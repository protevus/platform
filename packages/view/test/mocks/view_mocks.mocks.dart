// Mocks generated by Mockito 5.4.4 from annotations
// in illuminate_view/test/mocks/view_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:illuminate_view/src/contracts/view.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeView_0 extends _i1.SmartFake implements _i2.View {
  _FakeView_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeViewFactoryContract_1 extends _i1.SmartFake
    implements _i2.ViewFactoryContract {
  _FakeViewFactoryContract_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ViewFactoryContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewFactoryContract extends _i1.Mock
    implements _i2.ViewFactoryContract {
  MockViewFactoryContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> get shared => (super.noSuchMethod(
        Invocation.getter(#shared),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, String> get sections => (super.noSuchMethod(
        Invocation.getter(#sections),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  bool get hasRendering => (super.noSuchMethod(
        Invocation.getter(#hasRendering),
        returnValue: false,
      ) as bool);

  @override
  int get renderCount => (super.noSuchMethod(
        Invocation.getter(#renderCount),
        returnValue: 0,
      ) as int);

  @override
  bool get doneRendering => (super.noSuchMethod(
        Invocation.getter(#doneRendering),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<_i2.View> make(
    String? view, [
    Map<String, dynamic>? data,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #make,
          [
            view,
            data,
          ],
        ),
        returnValue: _i3.Future<_i2.View>.value(_FakeView_0(
          this,
          Invocation.method(
            #make,
            [
              view,
              data,
            ],
          ),
        )),
      ) as _i3.Future<_i2.View>);

  @override
  bool exists(String? view) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [view],
        ),
        returnValue: false,
      ) as bool);

  @override
  void creator(
    dynamic views,
    Function? callback,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #creator,
          [
            views,
            callback,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void creators(Map<Function, List<String>>? creators) => super.noSuchMethod(
        Invocation.method(
          #creators,
          [creators],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void callCreator(_i2.View? view) => super.noSuchMethod(
        Invocation.method(
          #callCreator,
          [view],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void composer(
    dynamic views,
    Function? callback,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #composer,
          [
            views,
            callback,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void composers(Map<Function, List<String>>? composers) => super.noSuchMethod(
        Invocation.method(
          #composers,
          [composers],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void callComposer(_i2.View? view) => super.noSuchMethod(
        Invocation.method(
          #callComposer,
          [view],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void share(
    String? key,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #share,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addLocation(String? location) => super.noSuchMethod(
        Invocation.method(
          #addLocation,
          [location],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ViewFactoryContract addNamespace(
    String? namespace,
    List<String>? hints,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNamespace,
          [
            namespace,
            hints,
          ],
        ),
        returnValue: _FakeViewFactoryContract_1(
          this,
          Invocation.method(
            #addNamespace,
            [
              namespace,
              hints,
            ],
          ),
        ),
      ) as _i2.ViewFactoryContract);

  @override
  void addExtension(
    String? extension,
    String? engine,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addExtension,
          [
            extension,
            engine,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isCached(String? view) => (super.noSuchMethod(
        Invocation.method(
          #isCached,
          [view],
        ),
        returnValue: false,
      ) as bool);

  @override
  String? getCachedPath(String? view) => (super.noSuchMethod(Invocation.method(
        #getCachedPath,
        [view],
      )) as String?);

  @override
  void flushCache() => super.noSuchMethod(
        Invocation.method(
          #flushCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startSection(
    String? section, [
    String? content,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #startSection,
          [
            section,
            content,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String stopSection({bool? overwrite = false}) => (super.noSuchMethod(
        Invocation.method(
          #stopSection,
          [],
          {#overwrite: overwrite},
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #stopSection,
            [],
            {#overwrite: overwrite},
          ),
        ),
      ) as String);

  @override
  String appendSection() => (super.noSuchMethod(
        Invocation.method(
          #appendSection,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #appendSection,
            [],
          ),
        ),
      ) as String);

  @override
  String yieldContent(
    String? section, [
    String? defaultContent = r'',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #yieldContent,
          [
            section,
            defaultContent,
          ],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #yieldContent,
            [
              section,
              defaultContent,
            ],
          ),
        ),
      ) as String);

  @override
  bool hasSection(String? name) => (super.noSuchMethod(
        Invocation.method(
          #hasSection,
          [name],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool sectionMissing(String? name) => (super.noSuchMethod(
        Invocation.method(
          #sectionMissing,
          [name],
        ),
        returnValue: false,
      ) as bool);

  @override
  String? getSection(
    String? name, [
    String? defaultContent,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getSection,
        [
          name,
          defaultContent,
        ],
      )) as String?);

  @override
  void flushSections() => super.noSuchMethod(
        Invocation.method(
          #flushSections,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startRender(_i2.View? view) => super.noSuchMethod(
        Invocation.method(
          #startRender,
          [view],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopRender() => super.noSuchMethod(
        Invocation.method(
          #stopRender,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isRenderingView(_i2.View? view) => (super.noSuchMethod(
        Invocation.method(
          #isRenderingView,
          [view],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> extendView(
    String? name, [
    Map<String, dynamic>? data,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #extendView,
          [
            name,
            data,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void flushState() => super.noSuchMethod(
        Invocation.method(
          #flushState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addLoop(dynamic data) => super.noSuchMethod(
        Invocation.method(
          #addLoop,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void incrementLoopIndices() => super.noSuchMethod(
        Invocation.method(
          #incrementLoopIndices,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popLoop() => super.noSuchMethod(
        Invocation.method(
          #popLoop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Map<String, dynamic>> getLoopStack() => (super.noSuchMethod(
        Invocation.method(
          #getLoopStack,
          [],
        ),
        returnValue: <Map<String, dynamic>>[],
      ) as List<Map<String, dynamic>>);

  @override
  void flushLoops() => super.noSuchMethod(
        Invocation.method(
          #flushLoops,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startPush(
    String? section, [
    String? content = r'',
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #startPush,
          [
            section,
            content,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String stopPush() => (super.noSuchMethod(
        Invocation.method(
          #stopPush,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #stopPush,
            [],
          ),
        ),
      ) as String);

  @override
  void startPrepend(
    String? section, [
    String? content = r'',
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #startPrepend,
          [
            section,
            content,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String stopPrepend() => (super.noSuchMethod(
        Invocation.method(
          #stopPrepend,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #stopPrepend,
            [],
          ),
        ),
      ) as String);

  @override
  String yieldPushContent(
    String? section, [
    String? defaultContent = r'',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #yieldPushContent,
          [
            section,
            defaultContent,
          ],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #yieldPushContent,
            [
              section,
              defaultContent,
            ],
          ),
        ),
      ) as String);

  @override
  void flushStacks() => super.noSuchMethod(
        Invocation.method(
          #flushStacks,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startComponent(
    dynamic view, [
    Map<String, dynamic>? data,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #startComponent,
          [
            view,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startComponentFirst(
    List<String>? names, [
    Map<String, dynamic>? data,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #startComponentFirst,
          [
            names,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<String> renderComponent() => (super.noSuchMethod(
        Invocation.method(
          #renderComponent,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #renderComponent,
            [],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  T? getConsumableComponentData<T>(
    String? key, [
    T? defaultValue,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getConsumableComponentData,
        [
          key,
          defaultValue,
        ],
      )) as T?);

  @override
  void slot(
    String? name, [
    String? content,
    Map<String, dynamic>? attributes,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #slot,
          [
            name,
            content,
            attributes,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void endSlot() => super.noSuchMethod(
        Invocation.method(
          #endSlot,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void flushComponents() => super.noSuchMethod(
        Invocation.method(
          #flushComponents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startFragment(String? fragment) => super.noSuchMethod(
        Invocation.method(
          #startFragment,
          [fragment],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String stopFragment() => (super.noSuchMethod(
        Invocation.method(
          #stopFragment,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #stopFragment,
            [],
          ),
        ),
      ) as String);

  @override
  String? getFragment(
    String? name, [
    String? defaultContent,
  ]) =>
      (super.noSuchMethod(Invocation.method(
        #getFragment,
        [
          name,
          defaultContent,
        ],
      )) as String?);

  @override
  Map<String, String> getFragments() => (super.noSuchMethod(
        Invocation.method(
          #getFragments,
          [],
        ),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  void flushFragments() => super.noSuchMethod(
        Invocation.method(
          #flushFragments,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ViewEngine].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewEngine extends _i1.Mock implements _i2.ViewEngine {
  MockViewEngine() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> get(
    String? path,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            path,
            data,
          ],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #get,
            [
              path,
              data,
            ],
          ),
        )),
      ) as _i3.Future<String>);
}
