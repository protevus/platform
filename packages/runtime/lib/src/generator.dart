/*
 * This file is part of the Protevus Platform.
 *
 * (C) Protevus <developers@protevus.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

import 'dart:async';
import 'dart:io';

/// Token used to replace directives in the loader shell.
const String _directiveToken = "___DIRECTIVES___";

/// Token used to replace assignments in the loader shell.
const String _assignmentToken = "___ASSIGNMENTS___";

/// A class responsible for generating runtime code.
///
/// This class allows adding runtime elements and writing them to a specified directory.
class RuntimeGenerator {
  /// List of runtime elements to be generated.
  final _elements = <_RuntimeElement>[];

  /// Adds a new runtime element to the generator.
  ///
  /// [name] is the name of the runtime element.
  /// [source] is the source code of the runtime element.
  void addRuntime({required String name, required String source}) {
    _elements.add(_RuntimeElement(name, source));
  }

  /// Writes the generated runtime code to the specified directory.
  ///
  /// [directoryUri] is the URI of the directory where the code will be written.
  /// This method creates necessary directories, writes the library file,
  /// pubspec file, and individual runtime element files.
  Future<void> writeTo(Uri directoryUri) async {
    final dir = Directory.fromUri(directoryUri);
    final libDir = Directory.fromUri(dir.uri.resolve("lib/"));
    final srcDir = Directory.fromUri(libDir.uri.resolve("src/"));
    if (!libDir.existsSync()) {
      libDir.createSync(recursive: true);
    }
    if (!srcDir.existsSync()) {
      srcDir.createSync(recursive: true);
    }

    final libraryFile =
        File.fromUri(libDir.uri.resolve("generated_runtime.dart"));
    await libraryFile.writeAsString(loaderSource);

    final pubspecFile = File.fromUri(dir.uri.resolve("pubspec.yaml"));
    await pubspecFile.writeAsString(pubspecSource);

    await Future.forEach(_elements, (_RuntimeElement e) async {
      final file = File.fromUri(srcDir.uri.resolveUri(e.relativeUri));
      if (!file.parent.existsSync()) {
        file.parent.createSync(recursive: true);
      }

      await file.writeAsString(e.source);
    });
  }

  /// Returns the content of the pubspec.yaml file as a string.
  String get pubspecSource => """
name: generated_runtime
description: A runtime generated by package:conduit_runtime
version: 1.0.0

environment:
  sdk: '>=3.4.0 <4.0.0'
""";

  /// Returns the shell of the loader file as a string.
  ///
  /// This shell contains placeholders for directives and assignments.
  String get _loaderShell => """
import 'package:conduit_runtime/runtime.dart';
import 'package:conduit_runtime/slow_coerce.dart' as runtime_cast;
$_directiveToken

RuntimeContext instance = GeneratedContext._();

class GeneratedContext extends RuntimeContext {
  GeneratedContext._() {
    final map = <String, Object>{};

    $_assignmentToken

    runtimes = RuntimeCollection(map);
  }

  @override
  T coerce<T>(dynamic input) {
    return runtime_cast.cast<T>(input);
  }
}
  """;

  /// Returns the complete source of the loader file.
  ///
  /// This method replaces the directive and assignment tokens in the loader shell
  /// with the actual directives and assignments.
  String get loaderSource {
    return _loaderShell
        .replaceFirst(_directiveToken, _directives)
        .replaceFirst(_assignmentToken, _assignments);
  }

  /// Generates the import directives for all runtime elements.
  String get _directives {
    final buf = StringBuffer();

    for (final e in _elements) {
      buf.writeln(
        "import 'src/${e.relativeUri.toFilePath(windows: Platform.isWindows)}' as ${e.importAlias};",
      );
    }

    return buf.toString();
  }

  /// Generates the assignments for all runtime elements.
  String get _assignments {
    final buf = StringBuffer();

    for (final e in _elements) {
      buf.writeln("map['${e.typeName}'] = ${e.importAlias}.instance;");
    }

    return buf.toString();
  }
}

/// A class representing a single runtime element.
class _RuntimeElement {
  /// Creates a new runtime element.
  ///
  /// [typeName] is the name of the type for this runtime element.
  /// [source] is the source code of this runtime element.
  _RuntimeElement(this.typeName, this.source);

  /// The name of the type for this runtime element.
  final String typeName;

  /// The source code of this runtime element.
  final String source;

  /// Returns the relative URI for this runtime element's file.
  Uri get relativeUri => Uri.file("${typeName.toLowerCase()}.dart");

  /// Returns the import alias for this runtime element.
  String get importAlias {
    return "g_${typeName.toLowerCase()}";
  }
}
