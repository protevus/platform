/*
 * This file is part of the Protevus Platform.
 *
 * (C) Protevus <developers@protevus.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

import 'package:protevus_database/src/persistent_store/persistent_store.dart';
import 'package:protevus_database/src/query/query.dart';
import 'package:protevus_http/http.dart';

/// An exception describing an issue with a query.
///
/// A suggested HTTP status code based on the type of exception will always be available.
class QueryException<T> implements HandlerException {
  /// Creates a new [QueryException] instance.
  ///
  /// The [event] parameter represents the type of query exception that occurred.
  /// The [message] parameter is an optional error message describing the exception.
  /// The [underlyingException] parameter is the underlying exception that caused the query failure.
  /// The [offendingItems] parameter is a list of strings representing the items that caused the query to fail.
  QueryException(
    this.event, {
    this.message,
    this.underlyingException,
    this.offendingItems,
  });

  /// Creates a new [QueryException] instance of type [QueryExceptionEvent.input].
  ///
  /// The [message] parameter is an optional error message describing the exception.
  /// The [offendingItems] parameter is a list of strings representing the items that caused the query to fail.
  /// The [underlyingException] parameter is the underlying exception that caused the query failure.
  QueryException.input(
    this.message,
    this.offendingItems, {
    this.underlyingException,
  }) : event = QueryExceptionEvent.input;

  /// Creates a new [QueryException] instance of type [QueryExceptionEvent.transport].
  ///
  /// The [message] parameter is an optional error message describing the exception.
  /// The [underlyingException] parameter is the underlying exception that caused the query failure.
  QueryException.transport(this.message, {this.underlyingException})
      : event = QueryExceptionEvent.transport,
        offendingItems = null;

  /// Creates a new [QueryException] instance of type [QueryExceptionEvent.conflict].
  ///
  /// The [message] parameter is an optional error message describing the exception.
  /// The [offendingItems] parameter is a list of strings representing the items that caused the query to fail.
  /// The [underlyingException] parameter is the underlying exception that caused the query failure.
  QueryException.conflict(
    this.message,
    this.offendingItems, {
    this.underlyingException,
  }) : event = QueryExceptionEvent.conflict;

  /// The optional error message describing the exception.
  final String? message;

  /// The exception generated by the [PersistentStore] or other mechanism that caused [Query] to fail.
  ///
  /// This property holds the underlying exception that led to the query failure. It can be used to provide more detailed information about the cause of the failure.
  final T? underlyingException;

  /// The type of event that caused this exception.
  ///
  /// This property indicates the specific type of query exception that occurred. The possible values are:
  ///
  /// - `QueryExceptionEvent.input`: Indicates that the input data used in the query was invalid or caused an issue.
  /// - `QueryExceptionEvent.transport`: Indicates that the underlying transport mechanism (e.g., database connection) failed.
  /// - `QueryExceptionEvent.conflict`: Indicates that a unique constraint was violated in the underlying data store.
  final QueryExceptionEvent event;

  /// The list of strings representing the items that caused the query to fail.
  ///
  /// This property is only available when the [QueryExceptionEvent] is of type [QueryExceptionEvent.input] or [QueryExceptionEvent.conflict]. It is `null` for other exception types.
  final List<String>? offendingItems;

  /// Returns a [Response] object based on the type of [QueryException] that was thrown.
  ///
  /// The response will have the appropriate HTTP status code based on the [QueryExceptionEvent] type, and the response body will contain an error message and, if applicable, a list of offending items that caused the query to fail.
  @override
  Response get response {
    return Response(_getStatus(event), null, _getBody(message, offendingItems));
  }

  /// Generates the response body for a [QueryException] based on the exception type and details.
  ///
  /// The response body will contain an "error" field with the error message, and potentially a "detail" field if there are offending items that caused the query to fail.
  ///
  /// If [message] is `null`, the "error" field will default to "query failed".
  ///
  /// If [offendingItems] is not `null` and is not empty, a "detail" field will be added to the response body, listing the offending items separated by commas.
  ///
  /// Returns a map representing the response body.
  static Map<String, String> _getBody(
    String? message,
    List<String>? offendingItems,
  ) {
    final body = {
      "error": message ?? "query failed",
    };

    if (offendingItems != null && offendingItems.isNotEmpty) {
      body["detail"] = "Offending Items: ${offendingItems.join(", ")}";
    }

    return body;
  }

  /// Retrieves the appropriate HTTP status code based on the [QueryExceptionEvent] type.
  ///
  /// This method maps the different [QueryExceptionEvent] types to their corresponding HTTP status codes:
  ///
  /// - [QueryExceptionEvent.input]: Returns 400 (Bad Request)
  /// - [QueryExceptionEvent.transport]: Returns 503 (Service Unavailable)
  /// - [QueryExceptionEvent.conflict]: Returns 409 (Conflict)
  static int _getStatus(QueryExceptionEvent event) {
    switch (event) {
      case QueryExceptionEvent.input:
        return 400;
      case QueryExceptionEvent.transport:
        return 503;
      case QueryExceptionEvent.conflict:
        return 409;
    }
  }

  /// Returns a string representation of the [QueryException].
  ///
  /// The returned string includes the error message and the underlying exception that caused the query failure.
  @override
  String toString() => "Query failed: $message. Reason: $underlyingException";
}

/// Categorizations of query failures for [QueryException].
///
/// This enum defines the different types of query exceptions that can occur when interacting with a [PersistentStore] or performing a [Query]. The enum values are used to indicate the specific cause of a query failure, which helps [Controller]s determine the appropriate HTTP status code to return.
///
/// - `conflict`: Indicates that a unique constraint was violated in the underlying data store. [Controller]s interpret this exception to return a status code 409 (Conflict) by default.
/// - `transport`: Indicates that the underlying transport mechanism (e.g., database connection) failed. [Controller]s interpret this exception to return a status code 503 (Service Unavailable) by default.
/// - `input`: Indicates that the input data used in the query was invalid or caused an issue. [Controller]s interpret this exception to return a status code 400 (Bad Request) by default.
enum QueryExceptionEvent {
  /// This event is used when the underlying [PersistentStore] reports that a unique constraint was violated.
  ///
  /// [Controller]s interpret this exception to return a status code 409 by default.
  conflict,

  /// This event is used when the underlying [PersistentStore] cannot reach its database.
  ///
  /// [Controller]s interpret this exception to return a status code 503 by default.
  transport,

  /// This event is used when the underlying [PersistentStore] reports an issue with the data used in a [Query].
  ///
  /// [Controller]s interpret this exception to return a status code 400 by default.
  input,
}
