// Mocks generated by Mockito 5.4.4 from annotations
// in platform_core/test/provider/service_provider_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i13;

import 'package:belatuk_combinator/belatuk_combinator.dart' as _i12;
import 'package:logging/logging.dart' as _i5;
import 'package:mime/mime.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i19;
import 'package:platform_container/container.dart' as _i6;
import 'package:platform_core/core.dart' as _i10;
import 'package:platform_core/src/core/controller.dart' as _i18;
import 'package:platform_core/src/core/env.dart' as _i3;
import 'package:platform_core/src/core/hooked_service.dart' as _i9;
import 'package:platform_core/src/core/request_context.dart' as _i16;
import 'package:platform_core/src/core/response_context.dart' as _i17;
import 'package:platform_core/src/core/routable.dart' as _i14;
import 'package:platform_core/src/core/service.dart' as _i8;
import 'package:platform_core/src/provider/provider_discovery.dart' as _i21;
import 'package:platform_core/src/provider/service_provider.dart' as _i20;
import 'package:platform_exceptions/http_exception.dart' as _i15;
import 'package:platform_route/route.dart' as _i4;
import 'package:tuple/tuple.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMimeTypeResolver_0 extends _i1.SmartFake
    implements _i2.MimeTypeResolver {
  _FakeMimeTypeResolver_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProtevusEnvironment_1 extends _i1.SmartFake
    implements _i3.ProtevusEnvironment {
  _FakeProtevusEnvironment_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouter_2<T> extends _i1.SmartFake implements _i4.Router<T> {
  _FakeRouter_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_3 extends _i1.SmartFake implements _i5.Logger {
  _FakeLogger_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContainer_4 extends _i1.SmartFake implements _i6.Container {
  _FakeContainer_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoute_5<T> extends _i1.SmartFake implements _i4.Route<T> {
  _FakeRoute_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSymlinkRoute_6<T> extends _i1.SmartFake
    implements _i4.SymlinkRoute<T> {
  _FakeSymlinkRoute_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_7<T1> extends _i1.SmartFake implements _i7.Future<T1> {
  _FakeFuture_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHookedService_8<Id1, Data1, T1 extends _i8.Service<Id1, Data1>>
    extends _i1.SmartFake implements _i9.HookedService<Id1, Data1, T1> {
  _FakeHookedService_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChainedRouter_9<T> extends _i1.SmartFake
    implements _i4.ChainedRouter<T> {
  _FakeChainedRouter_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApplication_10 extends _i1.SmartFake implements _i10.Application {
  _FakeApplication_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReflector_11 extends _i1.SmartFake implements _i6.Reflector {
  _FakeReflector_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Application].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplication extends _i1.Mock implements _i10.Application {
  MockApplication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<
      String,
      _i11.Tuple4<
          List<dynamic>,
          Map<String, dynamic>,
          _i12.ParseResult<_i4.RouteResult>,
          _i4.MiddlewarePipeline<dynamic>>> get handlerCache =>
      (super.noSuchMethod(
        Invocation.getter(#handlerCache),
        returnValue: <String,
            _i11.Tuple4<
                List<dynamic>,
                Map<String, dynamic>,
                _i12.ParseResult<_i4.RouteResult>,
                _i4.MiddlewarePipeline<dynamic>>>{},
      ) as Map<
          String,
          _i11.Tuple4<
              List<dynamic>,
              Map<String, dynamic>,
              _i12.ParseResult<_i4.RouteResult>,
              _i4.MiddlewarePipeline<dynamic>>>);

  @override
  Map<String, _i13.Converter<List<int>, List<int>>> get encoders =>
      (super.noSuchMethod(
        Invocation.getter(#encoders),
        returnValue: <String, _i13.Converter<List<int>, List<int>>>{},
      ) as Map<String, _i13.Converter<List<int>, List<int>>>);

  @override
  _i2.MimeTypeResolver get mimeTypeResolver => (super.noSuchMethod(
        Invocation.getter(#mimeTypeResolver),
        returnValue: _FakeMimeTypeResolver_0(
          this,
          Invocation.getter(#mimeTypeResolver),
        ),
      ) as _i2.MimeTypeResolver);

  @override
  set serializer(_i7.FutureOr<String> Function(dynamic)? _serializer) =>
      super.noSuchMethod(
        Invocation.setter(
          #serializer,
          _serializer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get allowMethodOverrides => (super.noSuchMethod(
        Invocation.getter(#allowMethodOverrides),
        returnValue: false,
      ) as bool);

  @override
  set allowMethodOverrides(bool? _allowMethodOverrides) => super.noSuchMethod(
        Invocation.setter(
          #allowMethodOverrides,
          _allowMethodOverrides,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ProtevusEnvironment get environment => (super.noSuchMethod(
        Invocation.getter(#environment),
        returnValue: _FakeProtevusEnvironment_1(
          this,
          Invocation.getter(#environment),
        ),
      ) as _i3.ProtevusEnvironment);

  @override
  List<_i10.PlatformConfigurer> get startupHooks => (super.noSuchMethod(
        Invocation.getter(#startupHooks),
        returnValue: <_i10.PlatformConfigurer>[],
      ) as List<_i10.PlatformConfigurer>);

  @override
  List<_i10.PlatformConfigurer> get shutdownHooks => (super.noSuchMethod(
        Invocation.getter(#shutdownHooks),
        returnValue: <_i10.PlatformConfigurer>[],
      ) as List<_i10.PlatformConfigurer>);

  @override
  List<_i14.RequestHandler> get responseFinalizers => (super.noSuchMethod(
        Invocation.getter(#responseFinalizers),
        returnValue: <_i14.RequestHandler>[],
      ) as List<_i14.RequestHandler>);

  @override
  set viewGenerator(_i10.ViewGenerator? _viewGenerator) => super.noSuchMethod(
        Invocation.setter(
          #viewGenerator,
          _viewGenerator,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.PlatformErrorHandler get errorHandler => (super.noSuchMethod(
        Invocation.getter(#errorHandler),
        returnValue: (
          _i15.PlatformHttpException e,
          _i16.RequestContext<dynamic> req,
          _i17.ResponseContext<dynamic> res,
        ) =>
            null,
      ) as _i10.PlatformErrorHandler);

  @override
  set errorHandler(_i10.PlatformErrorHandler? _errorHandler) =>
      super.noSuchMethod(
        Invocation.setter(
          #errorHandler,
          _errorHandler,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<dynamic, _i16.InjectionRequest> get preContained => (super.noSuchMethod(
        Invocation.getter(#preContained),
        returnValue: <dynamic, _i16.InjectionRequest>{},
      ) as Map<dynamic, _i16.InjectionRequest>);

  @override
  _i4.Router<_i14.RequestHandler> get optimizedRouter => (super.noSuchMethod(
        Invocation.getter(#optimizedRouter),
        returnValue: _FakeRouter_2<_i14.RequestHandler>(
          this,
          Invocation.getter(#optimizedRouter),
        ),
      ) as _i4.Router<_i14.RequestHandler>);

  @override
  List<_i10.Application> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i10.Application>[],
      ) as List<_i10.Application>);

  @override
  Map<Pattern, _i18.Controller> get controllers => (super.noSuchMethod(
        Invocation.getter(#controllers),
        returnValue: <Pattern, _i18.Controller>{},
      ) as Map<Pattern, _i18.Controller>);

  @override
  _i5.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.Logger);

  @override
  set logger(_i5.Logger? log) => super.noSuchMethod(
        Invocation.setter(
          #logger,
          log,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<dynamic, dynamic> get configuration => (super.noSuchMethod(
        Invocation.getter(#configuration),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i6.Container get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeContainer_4(
          this,
          Invocation.getter(#container),
        ),
      ) as _i6.Container);

  @override
  Map<Pattern, _i8.Service<dynamic, dynamic>> get services =>
      (super.noSuchMethod(
        Invocation.getter(#services),
        returnValue: <Pattern, _i8.Service<dynamic, dynamic>>{},
      ) as Map<Pattern, _i8.Service<dynamic, dynamic>>);

  @override
  _i7.Stream<_i8.Service<dynamic, dynamic>> get onService =>
      (super.noSuchMethod(
        Invocation.getter(#onService),
        returnValue: _i7.Stream<_i8.Service<dynamic, dynamic>>.empty(),
      ) as _i7.Stream<_i8.Service<dynamic, dynamic>>);

  @override
  List<_i14.RequestHandler> get middleware => (super.noSuchMethod(
        Invocation.getter(#middleware),
        returnValue: <_i14.RequestHandler>[],
      ) as List<_i14.RequestHandler>);

  @override
  Map<Pattern, _i4.Router<_i14.RequestHandler>> get mounted =>
      (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: <Pattern, _i4.Router<_i14.RequestHandler>>{},
      ) as Map<Pattern, _i4.Router<_i14.RequestHandler>>);

  @override
  List<_i4.Route<_i14.RequestHandler>> get routes => (super.noSuchMethod(
        Invocation.getter(#routes),
        returnValue: <_i4.Route<_i14.RequestHandler>>[],
      ) as List<_i4.Route<_i14.RequestHandler>>);

  @override
  _i4.Route<_i14.RequestHandler> addRoute(
    String? method,
    String? path,
    _i14.RequestHandler? handler, {
    Iterable<_i14.RequestHandler>? middleware = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRoute,
          [
            method,
            path,
            handler,
          ],
          {#middleware: middleware},
        ),
        returnValue: _FakeRoute_5<_i14.RequestHandler>(
          this,
          Invocation.method(
            #addRoute,
            [
              method,
              path,
              handler,
            ],
            {#middleware: middleware},
          ),
        ),
      ) as _i4.Route<_i14.RequestHandler>);

  @override
  _i4.SymlinkRoute<_i14.RequestHandler> mount(
    String? path,
    _i4.Router<_i14.RequestHandler>? router,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #mount,
          [
            path,
            router,
          ],
        ),
        returnValue: _FakeSymlinkRoute_6<_i14.RequestHandler>(
          this,
          Invocation.method(
            #mount,
            [
              path,
              router,
            ],
          ),
        ),
      ) as _i4.SymlinkRoute<_i14.RequestHandler>);

  @override
  void bootstrapContainer() => super.noSuchMethod(
        Invocation.method(
          #bootstrapContainer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void dumpTree({
    dynamic Function(String)? callback,
    String? header = r'Dumping route tree:',
    String? tab = r'  ',
    bool? showMatchers = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #dumpTree,
          [],
          {
            #callback: callback,
            #header: header,
            #tab: tab,
            #showMatchers: showMatchers,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<dynamic> getHandlerResult(
    dynamic handler,
    _i16.RequestContext<dynamic>? req,
    _i17.ResponseContext<dynamic>? res,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHandlerResult,
          [
            handler,
            req,
            res,
          ],
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<bool> executeHandler(
    dynamic handler,
    _i16.RequestContext<dynamic>? req,
    _i17.ResponseContext<dynamic>? res,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeHandler,
          [
            handler,
            req,
            res,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  void optimizeForProduction({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #optimizeForProduction,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<dynamic> runContained(
    Function? handler,
    _i16.RequestContext<dynamic>? req,
    _i17.ResponseContext<dynamic>? res, [
    _i6.Container? container,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #runContained,
          [
            handler,
            req,
            res,
            container,
          ],
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<dynamic> runReflected(
    Function? handler,
    _i16.RequestContext<dynamic>? req,
    _i17.ResponseContext<dynamic>? res, [
    _i6.Container? container,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #runReflected,
          [
            handler,
            req,
            res,
            container,
          ],
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<dynamic> configure(_i10.PlatformConfigurer? configurer) =>
      (super.noSuchMethod(
        Invocation.method(
          #configure,
          [configurer],
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<T> mountController<T extends _i18.Controller>([Type? type]) =>
      (super.noSuchMethod(
        Invocation.method(
          #mountController,
          [type],
        ),
        returnValue: _i19.ifNotNull(
              _i19.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #mountController,
                  [type],
                ),
              ),
              (T v) => _i7.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #mountController,
                [type],
              ),
            ),
      ) as _i7.Future<T>);

  @override
  _i4.Route<_i14.RequestHandler?> fallback(_i14.RequestHandler? handler) =>
      (super.noSuchMethod(
        Invocation.method(
          #fallback,
          [handler],
        ),
        returnValue: _FakeRoute_5<_i14.RequestHandler?>(
          this,
          Invocation.method(
            #fallback,
            [handler],
          ),
        ),
      ) as _i4.Route<_i14.RequestHandler?>);

  @override
  _i9.HookedService<Id, Data, T> use<Id, Data, T extends _i8.Service<Id, Data>>(
    String? path,
    T? service,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #use,
          [
            path,
            service,
          ],
        ),
        returnValue: _FakeHookedService_8<Id, Data, T>(
          this,
          Invocation.method(
            #use,
            [
              path,
              service,
            ],
          ),
        ),
      ) as _i9.HookedService<Id, Data, T>);

  @override
  T? findService<T extends _i8.Service<dynamic, dynamic>>(Pattern? path) =>
      (super.noSuchMethod(Invocation.method(
        #findService,
        [path],
      )) as T?);

  @override
  _i8.Service<Id, Data>? findServiceOf<Id, Data>(Pattern? path) =>
      (super.noSuchMethod(Invocation.method(
        #findServiceOf,
        [path],
      )) as _i8.Service<Id, Data>?);

  @override
  _i9.HookedService<dynamic, dynamic, T>?
      findHookedService<T extends _i8.Service<dynamic, dynamic>>(
              Pattern? path) =>
          (super.noSuchMethod(Invocation.method(
            #findHookedService,
            [path],
          )) as _i9.HookedService<dynamic, dynamic, T>?);

  @override
  void enableCache() => super.noSuchMethod(
        Invocation.method(
          #enableCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ChainedRouter<_i14.RequestHandler> chain(
          Iterable<_i14.RequestHandler>? middleware) =>
      (super.noSuchMethod(
        Invocation.method(
          #chain,
          [middleware],
        ),
        returnValue: _FakeChainedRouter_9<_i14.RequestHandler>(
          this,
          Invocation.method(
            #chain,
            [middleware],
          ),
        ),
      ) as _i4.ChainedRouter<_i14.RequestHandler>);

  @override
  _i4.Router<_i14.RequestHandler> clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _FakeRouter_2<_i14.RequestHandler>(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
      ) as _i4.Router<_i14.RequestHandler>);

  @override
  _i4.SymlinkRoute<_i14.RequestHandler> group(
    String? path,
    void Function(_i4.Router<_i14.RequestHandler>)? callback, {
    Iterable<_i14.RequestHandler>? middleware = const [],
    String? name = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #group,
          [
            path,
            callback,
          ],
          {
            #middleware: middleware,
            #name: name,
          },
        ),
        returnValue: _FakeSymlinkRoute_6<_i14.RequestHandler>(
          this,
          Invocation.method(
            #group,
            [
              path,
              callback,
            ],
            {
              #middleware: middleware,
              #name: name,
            },
          ),
        ),
      ) as _i4.SymlinkRoute<_i14.RequestHandler>);

  @override
  _i7.Future<_i4.SymlinkRoute<_i14.RequestHandler>> groupAsync(
    String? path,
    _i7.FutureOr<void> Function(_i4.Router<_i14.RequestHandler>)? callback, {
    Iterable<_i14.RequestHandler>? middleware = const [],
    String? name = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #groupAsync,
          [
            path,
            callback,
          ],
          {
            #middleware: middleware,
            #name: name,
          },
        ),
        returnValue: _i7.Future<_i4.SymlinkRoute<_i14.RequestHandler>>.value(
            _FakeSymlinkRoute_6<_i14.RequestHandler>(
          this,
          Invocation.method(
            #groupAsync,
            [
              path,
              callback,
            ],
            {
              #middleware: middleware,
              #name: name,
            },
          ),
        )),
      ) as _i7.Future<_i4.SymlinkRoute<_i14.RequestHandler>>);

  @override
  String navigate(
    Iterable<dynamic>? linkParams, {
    bool? absolute = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigate,
          [linkParams],
          {#absolute: absolute},
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #navigate,
            [linkParams],
            {#absolute: absolute},
          ),
        ),
      ) as String);

  @override
  bool resolve(
    String? absolute,
    String? relative,
    List<_i4.RoutingResult<_i14.RequestHandler?>>? out, {
    String? method = r'GET',
    bool? strip = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolve,
          [
            absolute,
            relative,
            out,
          ],
          {
            #method: method,
            #strip: strip,
          },
        ),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i4.RoutingResult<_i14.RequestHandler>> resolveAbsolute(
    String? path, {
    String? method = r'GET',
    bool? strip = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveAbsolute,
          [path],
          {
            #method: method,
            #strip: strip,
          },
        ),
        returnValue: <_i4.RoutingResult<_i14.RequestHandler>>[],
      ) as Iterable<_i4.RoutingResult<_i14.RequestHandler>>);

  @override
  Iterable<_i4.RoutingResult<_i14.RequestHandler>> resolveAll(
    String? absolute,
    String? relative, {
    String? method = r'GET',
    bool? strip = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveAll,
          [
            absolute,
            relative,
          ],
          {
            #method: method,
            #strip: strip,
          },
        ),
        returnValue: <_i4.RoutingResult<_i14.RequestHandler>>[],
      ) as Iterable<_i4.RoutingResult<_i14.RequestHandler>>);

  @override
  _i4.Route<_i14.RequestHandler> all(
    String? path,
    _i14.RequestHandler? handler, {
    Iterable<_i14.RequestHandler>? middleware = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #all,
          [
            path,
            handler,
          ],
          {#middleware: middleware},
        ),
        returnValue: _FakeRoute_5<_i14.RequestHandler>(
          this,
          Invocation.method(
            #all,
            [
              path,
              handler,
            ],
            {#middleware: middleware},
          ),
        ),
      ) as _i4.Route<_i14.RequestHandler>);

  @override
  _i4.Route<_i14.RequestHandler> delete(
    String? path,
    _i14.RequestHandler? handler, {
    Iterable<_i14.RequestHandler>? middleware = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            path,
            handler,
          ],
          {#middleware: middleware},
        ),
        returnValue: _FakeRoute_5<_i14.RequestHandler>(
          this,
          Invocation.method(
            #delete,
            [
              path,
              handler,
            ],
            {#middleware: middleware},
          ),
        ),
      ) as _i4.Route<_i14.RequestHandler>);

  @override
  _i4.Route<_i14.RequestHandler> get(
    String? path,
    _i14.RequestHandler? handler, {
    Iterable<_i14.RequestHandler>? middleware = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            path,
            handler,
          ],
          {#middleware: middleware},
        ),
        returnValue: _FakeRoute_5<_i14.RequestHandler>(
          this,
          Invocation.method(
            #get,
            [
              path,
              handler,
            ],
            {#middleware: middleware},
          ),
        ),
      ) as _i4.Route<_i14.RequestHandler>);

  @override
  _i4.Route<_i14.RequestHandler> head(
    String? path,
    _i14.RequestHandler? handler, {
    Iterable<_i14.RequestHandler>? middleware = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [
            path,
            handler,
          ],
          {#middleware: middleware},
        ),
        returnValue: _FakeRoute_5<_i14.RequestHandler>(
          this,
          Invocation.method(
            #head,
            [
              path,
              handler,
            ],
            {#middleware: middleware},
          ),
        ),
      ) as _i4.Route<_i14.RequestHandler>);

  @override
  _i4.Route<_i14.RequestHandler> options(
    String? path,
    _i14.RequestHandler? handler, {
    Iterable<_i14.RequestHandler>? middleware = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #options,
          [
            path,
            handler,
          ],
          {#middleware: middleware},
        ),
        returnValue: _FakeRoute_5<_i14.RequestHandler>(
          this,
          Invocation.method(
            #options,
            [
              path,
              handler,
            ],
            {#middleware: middleware},
          ),
        ),
      ) as _i4.Route<_i14.RequestHandler>);

  @override
  _i4.Route<_i14.RequestHandler> post(
    String? path,
    _i14.RequestHandler? handler, {
    Iterable<_i14.RequestHandler>? middleware = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            path,
            handler,
          ],
          {#middleware: middleware},
        ),
        returnValue: _FakeRoute_5<_i14.RequestHandler>(
          this,
          Invocation.method(
            #post,
            [
              path,
              handler,
            ],
            {#middleware: middleware},
          ),
        ),
      ) as _i4.Route<_i14.RequestHandler>);

  @override
  _i4.Route<_i14.RequestHandler> patch(
    String? path,
    _i14.RequestHandler? handler, {
    Iterable<_i14.RequestHandler>? middleware = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [
            path,
            handler,
          ],
          {#middleware: middleware},
        ),
        returnValue: _FakeRoute_5<_i14.RequestHandler>(
          this,
          Invocation.method(
            #patch,
            [
              path,
              handler,
            ],
            {#middleware: middleware},
          ),
        ),
      ) as _i4.Route<_i14.RequestHandler>);

  @override
  _i4.Route<dynamic> put(
    String? path,
    _i14.RequestHandler? handler, {
    Iterable<_i14.RequestHandler>? middleware = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            path,
            handler,
          ],
          {#middleware: middleware},
        ),
        returnValue: _FakeRoute_5<dynamic>(
          this,
          Invocation.method(
            #put,
            [
              path,
              handler,
            ],
            {#middleware: middleware},
          ),
        ),
      ) as _i4.Route<dynamic>);
}

/// A class which mocks [ServiceProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceProvider extends _i1.Mock implements _i20.ServiceProvider {
  MockServiceProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Application get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeApplication_10(
          this,
          Invocation.getter(#app),
        ),
      ) as _i10.Application);

  @override
  set app(_i10.Application? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Container get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeContainer_4(
          this,
          Invocation.getter(#container),
        ),
      ) as _i6.Container);

  @override
  set container(_i6.Container? _container) => super.noSuchMethod(
        Invocation.setter(
          #container,
          _container,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isDeferred => (super.noSuchMethod(
        Invocation.getter(#isDeferred),
        returnValue: false,
      ) as bool);

  @override
  List<Type> get dependencies => (super.noSuchMethod(
        Invocation.getter(#dependencies),
        returnValue: <Type>[],
      ) as List<Type>);

  @override
  void configure(Map<String, dynamic>? options) => super.noSuchMethod(
        Invocation.method(
          #configure,
          [options],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setDeferred(bool? deferred) => super.noSuchMethod(
        Invocation.method(
          #setDeferred,
          [deferred],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerWithContainer(_i6.Container? container) => super.noSuchMethod(
        Invocation.method(
          #registerWithContainer,
          [container],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> register() => (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> beforeBoot() => (super.noSuchMethod(
        Invocation.method(
          #beforeBoot,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> boot() => (super.noSuchMethod(
        Invocation.method(
          #boot,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> afterBoot() => (super.noSuchMethod(
        Invocation.method(
          #afterBoot,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [ProviderDiscovery].
///
/// See the documentation for Mockito's code generation for more information.
class MockProviderDiscovery extends _i1.Mock implements _i21.ProviderDiscovery {
  MockProviderDiscovery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Type> discoverProviders() => (super.noSuchMethod(
        Invocation.method(
          #discoverProviders,
          [],
        ),
        returnValue: <Type>[],
      ) as List<Type>);

  @override
  _i20.ServiceProvider? createInstance(Type? type) =>
      (super.noSuchMethod(Invocation.method(
        #createInstance,
        [type],
      )) as _i20.ServiceProvider?);
}

/// A class which mocks [Container].
///
/// See the documentation for Mockito's code generation for more information.
class MockContainer extends _i1.Mock implements _i6.Container {
  MockContainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Reflector get reflector => (super.noSuchMethod(
        Invocation.getter(#reflector),
        returnValue: _FakeReflector_11(
          this,
          Invocation.getter(#reflector),
        ),
      ) as _i6.Reflector);

  @override
  bool get isRoot => (super.noSuchMethod(
        Invocation.getter(#isRoot),
        returnValue: false,
      ) as bool);

  @override
  _i6.Container createChild() => (super.noSuchMethod(
        Invocation.method(
          #createChild,
          [],
        ),
        returnValue: _FakeContainer_4(
          this,
          Invocation.method(
            #createChild,
            [],
          ),
        ),
      ) as _i6.Container);

  @override
  bool has<T>([Type? t]) => (super.noSuchMethod(
        Invocation.method(
          #has,
          [t],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool hasNamed(String? name) => (super.noSuchMethod(
        Invocation.method(
          #hasNamed,
          [name],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<T> makeAsync<T>([Type? type]) => (super.noSuchMethod(
        Invocation.method(
          #makeAsync,
          [type],
        ),
        returnValue: _i19.ifNotNull(
              _i19.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #makeAsync,
                  [type],
                ),
              ),
              (T v) => _i7.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #makeAsync,
                [type],
              ),
            ),
      ) as _i7.Future<T>);

  @override
  T make<T>([Type? type]) => (super.noSuchMethod(
        Invocation.method(
          #make,
          [type],
        ),
        returnValue: _i19.dummyValue<T>(
          this,
          Invocation.method(
            #make,
            [type],
          ),
        ),
      ) as T);

  @override
  T Function(_i6.Container) registerLazySingleton<T>(
    T Function(_i6.Container)? f, {
    Type? as,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerLazySingleton,
          [f],
          {#as: as},
        ),
        returnValue: (_i6.Container __p0) => _i19.dummyValue<T>(
          this,
          Invocation.method(
            #registerLazySingleton,
            [f],
            {#as: as},
          ),
        ),
      ) as T Function(_i6.Container));

  @override
  T Function(_i6.Container) registerFactory<T>(
    T Function(_i6.Container)? f, {
    Type? as,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerFactory,
          [f],
          {#as: as},
        ),
        returnValue: (_i6.Container __p0) => _i19.dummyValue<T>(
          this,
          Invocation.method(
            #registerFactory,
            [f],
            {#as: as},
          ),
        ),
      ) as T Function(_i6.Container));

  @override
  T registerSingleton<T>(
    T? object, {
    Type? as,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerSingleton,
          [object],
          {#as: as},
        ),
        returnValue: _i19.dummyValue<T>(
          this,
          Invocation.method(
            #registerSingleton,
            [object],
            {#as: as},
          ),
        ),
      ) as T);

  @override
  T findByName<T>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #findByName,
          [name],
        ),
        returnValue: _i19.dummyValue<T>(
          this,
          Invocation.method(
            #findByName,
            [name],
          ),
        ),
      ) as T);

  @override
  T registerNamedSingleton<T>(
    String? name,
    T? object,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerNamedSingleton,
          [
            name,
            object,
          ],
        ),
        returnValue: _i19.dummyValue<T>(
          this,
          Invocation.method(
            #registerNamedSingleton,
            [
              name,
              object,
            ],
          ),
        ),
      ) as T);
}
