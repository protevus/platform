name: Stopwatch
class_comment: '# * Stopwatch provides a way to profile code.

  # *

  # * @author Fabien Potencier <fabien@symfony.com>'
dependencies:
- name: ResetInterface
  type: class
  source: Symfony\Contracts\Service\ResetInterface
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: morePrecision
    default: 'false'
  comment: "# * Stopwatch provides a way to profile code.\n# *\n# * @author Fabien\
    \ Potencier <fabien@symfony.com>\n# */\n# class Stopwatch implements ResetInterface\n\
    # {\n# public const ROOT = '__root__';\n# \n# /**\n# * @var Section[]\n# */\n\
    # private array $sections;\n# \n# /**\n# * @var Section[]\n# */\n# private array\
    \ $activeSections;\n# \n# /**\n# * @param bool $morePrecision If true, time is\
    \ stored as float to keep the original microsecond precision"
- name: getSections
  visibility: public
  parameters: []
  comment: '# * @return Section[]'
- name: openSection
  visibility: public
  parameters:
  - name: id
    default: 'null'
  comment: '# * Creates a new section or re-opens an existing section.

    # *

    # * @param string|null $id The id of the session to re-open, null to create a
    new one

    # *

    # * @throws \LogicException When the section to re-open is not reachable'
- name: stopSection
  visibility: public
  parameters:
  - name: id
  comment: '# * Stops the last started section.

    # *

    # * The id parameter is used to retrieve the events from this section.

    # *

    # * @see getSectionEvents()

    # *

    # * @throws \LogicException When there''s no started section to be stopped'
- name: start
  visibility: public
  parameters:
  - name: name
  - name: category
    default: 'null'
  comment: '# * Starts an event.'
- name: isStarted
  visibility: public
  parameters:
  - name: name
  comment: '# * Checks if the event was started.'
- name: stop
  visibility: public
  parameters:
  - name: name
  comment: '# * Stops an event.'
- name: lap
  visibility: public
  parameters:
  - name: name
  comment: '# * Stops then restarts an event.'
- name: getEvent
  visibility: public
  parameters:
  - name: name
  comment: '# * Returns a specific event by name.'
- name: getSectionEvents
  visibility: public
  parameters:
  - name: id
  comment: '# * Gets all events for a given section.

    # *

    # * @return StopwatchEvent[]'
- name: getRootSectionEvents
  visibility: public
  parameters: []
  comment: '# * Gets all events for the root section.

    # *

    # * @return StopwatchEvent[]'
- name: reset
  visibility: public
  parameters: []
  comment: '# * Resets the stopwatch to its original state.'
traits:
- Symfony\Contracts\Service\ResetInterface
interfaces:
- ResetInterface
