name: Section
class_comment: '# * Stopwatch section.

  # *

  # * @author Fabien Potencier <fabien@symfony.com>'
dependencies: []
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: origin
    default: 'null'
  - name: morePrecision
    default: 'false'
  comment: "# * Stopwatch section.\n# *\n# * @author Fabien Potencier <fabien@symfony.com>\n\
    # */\n# class Section\n# {\n# /**\n# * @var StopwatchEvent[]\n# */\n# private\
    \ array $events = [];\n# \n# private ?string $id = null;\n# \n# /**\n# * @var\
    \ Section[]\n# */\n# private array $children = [];\n# \n# /**\n# * @param float|null\
    \ $origin        Set the origin of the events in this section, use null to set\
    \ their origin to their start time\n# * @param bool       $morePrecision If true,\
    \ time is stored as float to keep the original microsecond precision"
- name: get
  visibility: public
  parameters:
  - name: id
  comment: '# * Returns the child section.'
- name: open
  visibility: public
  parameters:
  - name: id
  comment: '# * Creates or re-opens a child section.

    # *

    # * @param string|null $id Null to create a new section, the identifier to re-open
    an existing one'
- name: getId
  visibility: public
  parameters: []
  comment: null
- name: setId
  visibility: public
  parameters:
  - name: id
  comment: '# * Sets the session identifier.

    # *

    # * @return $this'
- name: startEvent
  visibility: public
  parameters:
  - name: name
  - name: category
  comment: '# * Starts an event.'
- name: isEventStarted
  visibility: public
  parameters:
  - name: name
  comment: '# * Checks if the event was started.'
- name: stopEvent
  visibility: public
  parameters:
  - name: name
  comment: '# * Stops an event.

    # *

    # * @throws \LogicException When the event has not been started'
- name: lap
  visibility: public
  parameters:
  - name: name
  comment: '# * Stops then restarts an event.

    # *

    # * @throws \LogicException When the event has not been started'
- name: getEvent
  visibility: public
  parameters:
  - name: name
  comment: '# * Returns a specific event by name.

    # *

    # * @throws \LogicException When the event is not known'
- name: getEvents
  visibility: public
  parameters: []
  comment: '# * Returns the events from this section.

    # *

    # * @return StopwatchEvent[]'
traits: []
interfaces: []
