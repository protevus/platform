name: InMemoryTransport
class_comment: '# * Transport that stays in memory. Useful for testing purpose.

  # *

  # * @author Gary PEGEOT <garypegeot@gmail.com>'
dependencies:
- name: ClockInterface
  type: class
  source: Psr\Clock\ClockInterface
- name: Envelope
  type: class
  source: Symfony\Component\Messenger\Envelope
- name: LogicException
  type: class
  source: Symfony\Component\Messenger\Exception\LogicException
- name: DelayStamp
  type: class
  source: Symfony\Component\Messenger\Stamp\DelayStamp
- name: TransportMessageIdStamp
  type: class
  source: Symfony\Component\Messenger\Stamp\TransportMessageIdStamp
- name: SerializerInterface
  type: class
  source: Symfony\Component\Messenger\Transport\Serialization\SerializerInterface
- name: TransportInterface
  type: class
  source: Symfony\Component\Messenger\Transport\TransportInterface
- name: ResetInterface
  type: class
  source: Symfony\Contracts\Service\ResetInterface
properties: []
methods:
- name: getAcknowledged
  visibility: public
  parameters: []
  comment: "# * Transport that stays in memory. Useful for testing purpose.\n# *\n\
    # * @author Gary PEGEOT <garypegeot@gmail.com>\n# */\n# class InMemoryTransport\
    \ implements TransportInterface, ResetInterface\n# {\n# /**\n# * @var Envelope[]\n\
    # */\n# private array $sent = [];\n# \n# /**\n# * @var Envelope[]\n# */\n# private\
    \ array $acknowledged = [];\n# \n# /**\n# * @var Envelope[]\n# */\n# private array\
    \ $rejected = [];\n# \n# /**\n# * @var Envelope[]\n# */\n# private array $queue\
    \ = [];\n# \n# private int $nextId = 1;\n# private array $availableAt = [];\n\
    # \n# public function __construct(\n# private ?SerializerInterface $serializer\
    \ = null,\n# private ?ClockInterface $clock = null,\n# ) {\n# }\n# \n# public\
    \ function get(): iterable\n# {\n# $envelopes = [];\n# $now = $this->clock?->now()\
    \ ?? new \\DateTimeImmutable();\n# foreach ($this->decode($this->queue) as $id\
    \ => $envelope) {\n# if (!isset($this->availableAt[$id]) || $now > $this->availableAt[$id])\
    \ {\n# $envelopes[] = $envelope;\n# }\n# }\n# \n# return $envelopes;\n# }\n# \n\
    # public function ack(Envelope $envelope): void\n# {\n# $this->acknowledged[]\
    \ = $this->encode($envelope);\n# \n# if (!$transportMessageIdStamp = $envelope->last(TransportMessageIdStamp::class))\
    \ {\n# throw new LogicException('No TransportMessageIdStamp found on the Envelope.');\n\
    # }\n# \n# unset($this->queue[$id = $transportMessageIdStamp->getId()], $this->availableAt[$id]);\n\
    # }\n# \n# public function reject(Envelope $envelope): void\n# {\n# $this->rejected[]\
    \ = $this->encode($envelope);\n# \n# if (!$transportMessageIdStamp = $envelope->last(TransportMessageIdStamp::class))\
    \ {\n# throw new LogicException('No TransportMessageIdStamp found on the Envelope.');\n\
    # }\n# \n# unset($this->queue[$id = $transportMessageIdStamp->getId()], $this->availableAt[$id]);\n\
    # }\n# \n# public function send(Envelope $envelope): Envelope\n# {\n# $id = $this->nextId++;\n\
    # $envelope = $envelope->with(new TransportMessageIdStamp($id));\n# $encodedEnvelope\
    \ = $this->encode($envelope);\n# $this->sent[] = $encodedEnvelope;\n# $this->queue[$id]\
    \ = $encodedEnvelope;\n# \n# /** @var DelayStamp|null $delayStamp */\n# if ($delayStamp\
    \ = $envelope->last(DelayStamp::class)) {\n# $now = $this->clock?->now() ?? new\
    \ \\DateTimeImmutable();\n# $this->availableAt[$id] = $now->modify(\\sprintf('+%d\
    \ seconds', $delayStamp->getDelay() / 1000));\n# }\n# \n# return $envelope;\n\
    # }\n# \n# public function reset(): void\n# {\n# $this->sent = $this->queue =\
    \ $this->rejected = $this->acknowledged = [];\n# }\n# \n# /**\n# * @return Envelope[]"
- name: getRejected
  visibility: public
  parameters: []
  comment: '# * @return Envelope[]'
- name: getSent
  visibility: public
  parameters: []
  comment: '# * @return Envelope[]'
- name: encode
  visibility: private
  parameters:
  - name: envelope
  comment: null
- name: decode
  visibility: private
  parameters:
  - name: messagesEncoded
  comment: '# * @param array<mixed> $messagesEncoded

    # *

    # * @return Envelope[]'
traits:
- Psr\Clock\ClockInterface
- Symfony\Component\Messenger\Envelope
- Symfony\Component\Messenger\Exception\LogicException
- Symfony\Component\Messenger\Stamp\DelayStamp
- Symfony\Component\Messenger\Stamp\TransportMessageIdStamp
- Symfony\Component\Messenger\Transport\Serialization\SerializerInterface
- Symfony\Component\Messenger\Transport\TransportInterface
- Symfony\Contracts\Service\ResetInterface
interfaces:
- TransportInterface
