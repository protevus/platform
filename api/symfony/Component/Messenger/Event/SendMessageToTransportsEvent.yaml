name: SendMessageToTransportsEvent
class_comment: null
dependencies:
- name: Envelope
  type: class
  source: Symfony\Component\Messenger\Envelope
- name: SenderInterface
  type: class
  source: Symfony\Component\Messenger\Transport\Sender\SenderInterface
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: envelope
  - name: senders
  comment: '# * Event is dispatched before a message is sent to the transport.

    # *

    # * The event is *only* dispatched if the message will actually

    # * be sent to at least one transport. If the message is sent

    # * to multiple transports, the message is dispatched only once.

    # * This message is only dispatched the first time a message

    # * is sent to a transport, not also if it is retried.

    # *

    # * @author Ryan Weaver <ryan@symfonycasts.com>

    # */

    # final class SendMessageToTransportsEvent

    # {

    # /**

    # * @param array<string, SenderInterface> $senders'
- name: getEnvelope
  visibility: public
  parameters: []
  comment: null
- name: setEnvelope
  visibility: public
  parameters:
  - name: envelope
  comment: null
- name: getSenders
  visibility: public
  parameters: []
  comment: '# * @return array<string, SenderInterface>'
traits:
- Symfony\Component\Messenger\Envelope
- Symfony\Component\Messenger\Transport\Sender\SenderInterface
interfaces: []
