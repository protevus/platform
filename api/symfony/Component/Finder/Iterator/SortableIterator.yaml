name: SortableIterator
class_comment: '# * SortableIterator applies a sort on a given Iterator.

  # *

  # * @author Fabien Potencier <fabien@symfony.com>

  # *

  # * @implements \IteratorAggregate<string, \SplFileInfo>'
dependencies: []
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: iterator
  - name: sort
  - name: reverseOrder
    default: 'false'
  comment: "# * SortableIterator applies a sort on a given Iterator.\n# *\n# * @author\
    \ Fabien Potencier <fabien@symfony.com>\n# *\n# * @implements \\IteratorAggregate<string,\
    \ \\SplFileInfo>\n# */\n# class SortableIterator implements \\IteratorAggregate\n\
    # {\n# public const SORT_BY_NONE = 0;\n# public const SORT_BY_NAME = 1;\n# public\
    \ const SORT_BY_TYPE = 2;\n# public const SORT_BY_ACCESSED_TIME = 3;\n# public\
    \ const SORT_BY_CHANGED_TIME = 4;\n# public const SORT_BY_MODIFIED_TIME = 5;\n\
    # public const SORT_BY_NAME_NATURAL = 6;\n# public const SORT_BY_NAME_CASE_INSENSITIVE\
    \ = 7;\n# public const SORT_BY_NAME_NATURAL_CASE_INSENSITIVE = 8;\n# public const\
    \ SORT_BY_EXTENSION = 9;\n# public const SORT_BY_SIZE = 10;\n# \n# /** @var \\\
    Traversable<string, \\SplFileInfo> */\n# private \\Traversable $iterator;\n# private\
    \ \\Closure|int $sort;\n# \n# /**\n# * @param \\Traversable<string, \\SplFileInfo>\
    \ $iterator\n# * @param int|callable                       $sort     The sort\
    \ type (SORT_BY_NAME, SORT_BY_TYPE, or a PHP callback)\n# *\n# * @throws \\InvalidArgumentException"
- name: getIterator
  visibility: public
  parameters: []
  comment: null
traits: []
interfaces:
- \IteratorAggregate
- \IteratorAggregate
