name: ResponseHeaderBag
class_comment: '# * ResponseHeaderBag is a container for Response HTTP headers.

  # *

  # * @author Fabien Potencier <fabien@symfony.com>'
dependencies: []
properties: []
methods:
- name: allPreserveCase
  visibility: public
  parameters: []
  comment: "# * ResponseHeaderBag is a container for Response HTTP headers.\n# *\n\
    # * @author Fabien Potencier <fabien@symfony.com>\n# */\n# class ResponseHeaderBag\
    \ extends HeaderBag\n# {\n# public const COOKIES_FLAT = 'flat';\n# public const\
    \ COOKIES_ARRAY = 'array';\n# \n# public const DISPOSITION_ATTACHMENT = 'attachment';\n\
    # public const DISPOSITION_INLINE = 'inline';\n# \n# protected array $computedCacheControl\
    \ = [];\n# protected array $cookies = [];\n# protected array $headerNames = [];\n\
    # \n# public function __construct(array $headers = [])\n# {\n# parent::__construct($headers);\n\
    # \n# if (!isset($this->headers['cache-control'])) {\n# $this->set('Cache-Control',\
    \ '');\n# }\n# \n# /* RFC2616 - 14.18 says all Responses need to have a Date */\n\
    # if (!isset($this->headers['date'])) {\n# $this->initDate();\n# }\n# }\n# \n\
    # /**\n# * Returns the headers, with original capitalizations."
- name: allPreserveCaseWithoutCookies
  visibility: public
  parameters: []
  comment: null
- name: replace
  visibility: public
  parameters:
  - name: headers
    default: '[]'
  comment: null
- name: all
  visibility: public
  parameters:
  - name: key
    default: 'null'
  comment: null
- name: set
  visibility: public
  parameters:
  - name: key
  - name: values
  - name: replace
    default: 'true'
  comment: null
- name: remove
  visibility: public
  parameters:
  - name: key
  comment: null
- name: hasCacheControlDirective
  visibility: public
  parameters:
  - name: key
  comment: null
- name: getCacheControlDirective
  visibility: public
  parameters:
  - name: key
  comment: null
- name: setCookie
  visibility: public
  parameters:
  - name: cookie
  comment: null
- name: removeCookie
  visibility: public
  parameters:
  - name: name
  - name: path
    default: '''/'''
  - name: domain
    default: 'null'
  comment: '# * Removes a cookie from the array, but does not unset it in the browser.'
- name: getCookies
  visibility: public
  parameters:
  - name: format
    default: self::COOKIES_FLAT
  comment: '# * Returns an array with all cookies.

    # *

    # * @return Cookie[]

    # *

    # * @throws \InvalidArgumentException When the $format is invalid'
- name: clearCookie
  visibility: public
  parameters:
  - name: name
  - name: path
    default: '''/'''
  - name: domain
    default: 'null'
  - name: secure
    default: 'false'
  - name: httpOnly
    default: 'true'
  - name: sameSite
    default: null /*
  - name: partitioned
    default: false */
  comment: '# * Clears a cookie in the browser.

    # *

    # * @param bool $partitioned'
- name: makeDisposition
  visibility: public
  parameters:
  - name: disposition
  - name: filename
  - name: filenameFallback
    default: ''''''
  comment: '# * @see HeaderUtils::makeDisposition()'
- name: computeCacheControlValue
  visibility: protected
  parameters: []
  comment: '# * Returns the calculated value of the cache-control header.

    # *

    # * This considers several other headers and calculates or modifies the

    # * cache-control header to a sensible, conservative value.'
- name: initDate
  visibility: private
  parameters: []
  comment: null
traits: []
interfaces: []
