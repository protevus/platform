name: SessionInterface
class_comment: null
dependencies:
- name: MetadataBag
  type: class
  source: Symfony\Component\HttpFoundation\Session\Storage\MetadataBag
properties: []
methods:
- name: start
  visibility: public
  parameters: []
  comment: '# * Interface for the session.

    # *

    # * @author Drak <drak@zikula.org>

    # */

    # interface SessionInterface

    # {

    # /**

    # * Starts the session storage.

    # *

    # * @throws \RuntimeException if session fails to start'
- name: getId
  visibility: public
  parameters: []
  comment: '# * Returns the session ID.'
- name: setId
  visibility: public
  parameters:
  - name: id
  comment: '# * Sets the session ID.'
- name: getName
  visibility: public
  parameters: []
  comment: '# * Returns the session name.'
- name: setName
  visibility: public
  parameters:
  - name: name
  comment: '# * Sets the session name.'
- name: invalidate
  visibility: public
  parameters:
  - name: lifetime
    default: 'null'
  comment: '# * Invalidates the current session.

    # *

    # * Clears all session attributes and flashes and regenerates the

    # * session and deletes the old session from persistence.

    # *

    # * @param int|null $lifetime Sets the cookie lifetime for the session cookie.
    A null value

    # *                           will leave the system settings unchanged, 0 sets
    the cookie

    # *                           to expire with browser session. Time is in seconds,
    and is

    # *                           not a Unix timestamp.'
- name: migrate
  visibility: public
  parameters:
  - name: destroy
    default: 'false'
  - name: lifetime
    default: 'null'
  comment: '# * Migrates the current session to a new session id while maintaining
    all

    # * session attributes.

    # *

    # * @param bool     $destroy  Whether to delete the old session or leave it to
    garbage collection

    # * @param int|null $lifetime Sets the cookie lifetime for the session cookie.
    A null value

    # *                           will leave the system settings unchanged, 0 sets
    the cookie

    # *                           to expire with browser session. Time is in seconds,
    and is

    # *                           not a Unix timestamp.'
- name: save
  visibility: public
  parameters: []
  comment: '# * Force the session to be saved and closed.

    # *

    # * This method is generally not required for real sessions as

    # * the session will be automatically saved at the end of

    # * code execution.'
- name: has
  visibility: public
  parameters:
  - name: name
  comment: '# * Checks if an attribute is defined.'
- name: get
  visibility: public
  parameters:
  - name: name
  - name: default
    default: 'null'
  comment: '# * Returns an attribute.'
- name: set
  visibility: public
  parameters:
  - name: name
  - name: value
  comment: '# * Sets an attribute.'
- name: all
  visibility: public
  parameters: []
  comment: '# * Returns attributes.'
- name: replace
  visibility: public
  parameters:
  - name: attributes
  comment: '# * Sets attributes.'
- name: remove
  visibility: public
  parameters:
  - name: name
  comment: '# * Removes an attribute.

    # *

    # * @return mixed The removed value or null when it does not exist'
- name: clear
  visibility: public
  parameters: []
  comment: '# * Clears all attributes.'
- name: isStarted
  visibility: public
  parameters: []
  comment: '# * Checks if the session was started.'
- name: registerBag
  visibility: public
  parameters:
  - name: bag
  comment: '# * Registers a SessionBagInterface with the session.'
- name: getBag
  visibility: public
  parameters:
  - name: name
  comment: '# * Gets a bag instance by name.'
- name: getMetadataBag
  visibility: public
  parameters: []
  comment: '# * Gets session meta.'
traits:
- Symfony\Component\HttpFoundation\Session\Storage\MetadataBag
interfaces: []
