name: ControllerArgumentsEvent
class_comment: null
dependencies:
- name: Request
  type: class
  source: Symfony\Component\HttpFoundation\Request
- name: HttpKernelInterface
  type: class
  source: Symfony\Component\HttpKernel\HttpKernelInterface
properties: []
methods:
- name: setController
  visibility: public
  parameters:
  - name: controller
  - name: attributes
    default: 'null'
  comment: "# * Allows filtering of controller arguments.\n# *\n# * You can call getController()\
    \ to retrieve the controller and getArguments\n# * to retrieve the current arguments.\
    \ With setArguments() you can replace\n# * arguments that are used to call the\
    \ controller.\n# *\n# * Arguments set in the event must be compatible with the\
    \ signature of the\n# * controller.\n# *\n# * @author Christophe Coevoet <stof@notk.org>\n\
    # */\n# final class ControllerArgumentsEvent extends KernelEvent\n# {\n# private\
    \ ControllerEvent $controllerEvent;\n# private array $namedArguments;\n# \n# public\
    \ function __construct(\n# HttpKernelInterface $kernel,\n# callable|ControllerEvent\
    \ $controller,\n# private array $arguments,\n# Request $request,\n# ?int $requestType,\n\
    # ) {\n# parent::__construct($kernel, $request, $requestType);\n# \n# if (!$controller\
    \ instanceof ControllerEvent) {\n# $controller = new ControllerEvent($kernel,\
    \ $controller, $request, $requestType);\n# }\n# \n# $this->controllerEvent = $controller;\n\
    # }\n# \n# public function getController(): callable\n# {\n# return $this->controllerEvent->getController();\n\
    # }\n# \n# /**\n# * @param array<class-string, list<object>>|null $attributes"
- name: getArguments
  visibility: public
  parameters: []
  comment: null
- name: setArguments
  visibility: public
  parameters:
  - name: arguments
  comment: null
- name: getNamedArguments
  visibility: public
  parameters: []
  comment: null
- name: getAttributes
  visibility: public
  parameters:
  - name: className
    default: 'null'
  comment: '# * @template T of class-string|null

    # *

    # * @param T $className

    # *

    # * @return array<class-string, list<object>>|list<object>

    # *

    # * @psalm-return (T is null ? array<class-string, list<object>> : list<object>)'
traits:
- Symfony\Component\HttpFoundation\Request
- Symfony\Component\HttpKernel\HttpKernelInterface
interfaces: []
