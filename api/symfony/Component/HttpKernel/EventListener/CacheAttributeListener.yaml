name: CacheAttributeListener
class_comment: '# * Handles HTTP cache headers configured via the Cache attribute.

  # *

  # * @author Fabien Potencier <fabien@symfony.com>'
dependencies:
- name: EventSubscriberInterface
  type: class
  source: Symfony\Component\EventDispatcher\EventSubscriberInterface
- name: ExpressionLanguage
  type: class
  source: Symfony\Component\ExpressionLanguage\ExpressionLanguage
- name: Request
  type: class
  source: Symfony\Component\HttpFoundation\Request
- name: Response
  type: class
  source: Symfony\Component\HttpFoundation\Response
- name: Cache
  type: class
  source: Symfony\Component\HttpKernel\Attribute\Cache
- name: ControllerArgumentsEvent
  type: class
  source: Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent
- name: ResponseEvent
  type: class
  source: Symfony\Component\HttpKernel\Event\ResponseEvent
- name: KernelEvents
  type: class
  source: Symfony\Component\HttpKernel\KernelEvents
properties: []
methods:
- name: onKernelControllerArguments
  visibility: public
  parameters:
  - name: event
  comment: "# * Handles HTTP cache headers configured via the Cache attribute.\n#\
    \ *\n# * @author Fabien Potencier <fabien@symfony.com>\n# */\n# class CacheAttributeListener\
    \ implements EventSubscriberInterface\n# {\n# /**\n# * @var \\SplObjectStorage<Request,\
    \ \\DateTimeInterface>\n# */\n# private \\SplObjectStorage $lastModified;\n# \n\
    # /**\n# * @var \\SplObjectStorage<Request, string>\n# */\n# private \\SplObjectStorage\
    \ $etags;\n# \n# public function __construct(\n# private ?ExpressionLanguage $expressionLanguage\
    \ = null,\n# ) {\n# $this->lastModified = new \\SplObjectStorage();\n# $this->etags\
    \ = new \\SplObjectStorage();\n# }\n# \n# /**\n# * Handles HTTP validation headers."
- name: onKernelResponse
  visibility: public
  parameters:
  - name: event
  comment: "# @var Cache[] $attributes */\n# foreach ($attributes as $cache) {\n#\
    \ if (null !== $cache->lastModified) {\n# $lastModified = $this->getExpressionLanguage()->evaluate($cache->lastModified,\
    \ array_merge($request->attributes->all(), $event->getNamedArguments()));\n# ($response\
    \ ??= new Response())->setLastModified($lastModified);\n# }\n# \n# if (null !==\
    \ $cache->etag) {\n# $etag = hash('sha256', $this->getExpressionLanguage()->evaluate($cache->etag,\
    \ array_merge($request->attributes->all(), $event->getNamedArguments())));\n#\
    \ ($response ??= new Response())->setEtag($etag);\n# }\n# }\n# \n# if ($response?->isNotModified($request))\
    \ {\n# $event->setController(static fn () => $response);\n# $event->stopPropagation();\n\
    # \n# return;\n# }\n# \n# if (null !== $etag) {\n# $this->etags[$request] = $etag;\n\
    # }\n# if (null !== $lastModified) {\n# $this->lastModified[$request] = $lastModified;\n\
    # }\n# }\n# \n# /**\n# * Modifies the response to apply HTTP cache headers when\
    \ needed."
- name: getSubscribedEvents
  visibility: public
  parameters: []
  comment: null
- name: getExpressionLanguage
  visibility: private
  parameters: []
  comment: null
- name: toSeconds
  visibility: private
  parameters:
  - name: time
  comment: null
traits:
- Symfony\Component\EventDispatcher\EventSubscriberInterface
- Symfony\Component\ExpressionLanguage\ExpressionLanguage
- Symfony\Component\HttpFoundation\Request
- Symfony\Component\HttpFoundation\Response
- Symfony\Component\HttpKernel\Attribute\Cache
- Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent
- Symfony\Component\HttpKernel\Event\ResponseEvent
- Symfony\Component\HttpKernel\KernelEvents
interfaces:
- EventSubscriberInterface
