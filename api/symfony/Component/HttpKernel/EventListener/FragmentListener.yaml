name: FragmentListener
class_comment: '# * Handles content fragments represented by special URIs.

  # *

  # * All URL paths starting with /_fragment are handled as

  # * content fragments by this listener.

  # *

  # * Throws an AccessDeniedHttpException exception if the request

  # * is not signed or if it is not an internal sub-request.

  # *

  # * @author Fabien Potencier <fabien@symfony.com>

  # *

  # * @final'
dependencies:
- name: EventSubscriberInterface
  type: class
  source: Symfony\Component\EventDispatcher\EventSubscriberInterface
- name: Request
  type: class
  source: Symfony\Component\HttpFoundation\Request
- name: UriSigner
  type: class
  source: Symfony\Component\HttpFoundation\UriSigner
- name: RequestEvent
  type: class
  source: Symfony\Component\HttpKernel\Event\RequestEvent
- name: AccessDeniedHttpException
  type: class
  source: Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
- name: KernelEvents
  type: class
  source: Symfony\Component\HttpKernel\KernelEvents
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: signer
  - name: fragmentPath
    default: '''/_fragment'''
  comment: '# * Handles content fragments represented by special URIs.

    # *

    # * All URL paths starting with /_fragment are handled as

    # * content fragments by this listener.

    # *

    # * Throws an AccessDeniedHttpException exception if the request

    # * is not signed or if it is not an internal sub-request.

    # *

    # * @author Fabien Potencier <fabien@symfony.com>

    # *

    # * @final

    # */

    # class FragmentListener implements EventSubscriberInterface

    # {

    # /**

    # * @param string $fragmentPath The path that triggers this listener'
- name: onKernelRequest
  visibility: public
  parameters:
  - name: event
  comment: '# * Fixes request attributes when the path is ''/_fragment''.

    # *

    # * @throws AccessDeniedHttpException if the request does not come from a trusted
    IP'
- name: validateRequest
  visibility: protected
  parameters:
  - name: request
  comment: null
- name: getSubscribedEvents
  visibility: public
  parameters: []
  comment: null
traits:
- Symfony\Component\EventDispatcher\EventSubscriberInterface
- Symfony\Component\HttpFoundation\Request
- Symfony\Component\HttpFoundation\UriSigner
- Symfony\Component\HttpKernel\Event\RequestEvent
- Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
- Symfony\Component\HttpKernel\KernelEvents
interfaces:
- EventSubscriberInterface
