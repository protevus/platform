name: EmailValidatorTest
class_comment: '# * @group dns-sensitive'
dependencies:
- name: Email
  type: class
  source: Symfony\Component\Validator\Constraints\Email
- name: EmailValidator
  type: class
  source: Symfony\Component\Validator\Constraints\EmailValidator
- name: UnexpectedValueException
  type: class
  source: Symfony\Component\Validator\Exception\UnexpectedValueException
- name: ConstraintValidatorTestCase
  type: class
  source: Symfony\Component\Validator\Test\ConstraintValidatorTestCase
properties: []
methods:
- name: testValidEmails
  visibility: public
  parameters:
  - name: email
  comment: "# * @group dns-sensitive\n# */\n# class EmailValidatorTest extends ConstraintValidatorTestCase\n\
    # {\n# protected function createValidator(): EmailValidator\n# {\n# return new\
    \ EmailValidator(Email::VALIDATION_MODE_HTML5);\n# }\n# \n# public function testUnknownDefaultModeTriggerException()\n\
    # {\n# $this->expectException(\\InvalidArgumentException::class);\n# $this->expectExceptionMessage('The\
    \ \"defaultMode\" parameter value is not valid.');\n# new EmailValidator('Unknown\
    \ Mode');\n# }\n# \n# public function testNullIsValid()\n# {\n# $this->validator->validate(null,\
    \ new Email());\n# \n# $this->assertNoViolation();\n# }\n# \n# public function\
    \ testEmptyStringIsValid()\n# {\n# $this->validator->validate('', new Email());\n\
    # \n# $this->assertNoViolation();\n# }\n# \n# public function testObjectEmptyStringIsValid()\n\
    # {\n# $this->validator->validate(new EmptyEmailObject(), new Email());\n# \n\
    # $this->assertNoViolation();\n# }\n# \n# public function testExpectsStringCompatibleType()\n\
    # {\n# $this->expectException(UnexpectedValueException::class);\n# $this->validator->validate(new\
    \ \\stdClass(), new Email());\n# }\n# \n# /**\n# * @dataProvider getValidEmails"
- name: getValidEmails
  visibility: public
  parameters: []
  comment: null
- name: testValidNormalizedEmails
  visibility: public
  parameters:
  - name: email
  comment: '# * @dataProvider getValidEmailsWithWhitespaces'
- name: getValidEmailsWithWhitespaces
  visibility: public
  parameters: []
  comment: null
- name: testValidEmailsHtml5
  visibility: public
  parameters:
  - name: email
  comment: '# * @dataProvider getValidEmailsHtml5'
- name: getValidEmailsHtml5
  visibility: public
  parameters: []
  comment: null
- name: testInvalidEmails
  visibility: public
  parameters:
  - name: email
  comment: '# * @dataProvider getInvalidEmails'
- name: getInvalidEmails
  visibility: public
  parameters: []
  comment: null
- name: testInvalidHtml5Emails
  visibility: public
  parameters:
  - name: email
  comment: '# * @dataProvider getInvalidHtml5Emails'
- name: getInvalidHtml5Emails
  visibility: public
  parameters: []
  comment: null
- name: testInvalidAllowNoTldEmails
  visibility: public
  parameters:
  - name: email
  comment: '# * @dataProvider getInvalidAllowNoTldEmails'
- name: getInvalidAllowNoTldEmails
  visibility: public
  parameters: []
  comment: null
- name: testModeStrict
  visibility: public
  parameters: []
  comment: null
- name: testModeHtml5
  visibility: public
  parameters: []
  comment: null
- name: testModeHtml5AllowNoTld
  visibility: public
  parameters: []
  comment: null
- name: testUnknownModesOnValidateTriggerException
  visibility: public
  parameters: []
  comment: null
- name: testStrictWithInvalidEmails
  visibility: public
  parameters:
  - name: email
  comment: '# * @dataProvider getInvalidEmailsForStrictChecks'
- name: getInvalidEmailsForStrictChecks
  visibility: public
  parameters: []
  comment: '# * @see https://github.com/egulias/EmailValidator/blob/1.2.8/tests/egulias/Tests/EmailValidator/EmailValidatorTest.php'
- name: __toString
  visibility: public
  parameters: []
  comment: null
traits:
- Symfony\Component\Validator\Constraints\Email
- Symfony\Component\Validator\Constraints\EmailValidator
- Symfony\Component\Validator\Exception\UnexpectedValueException
- Symfony\Component\Validator\Test\ConstraintValidatorTestCase
interfaces: []
