name: CascadingStrategy
class_comment: '# * Specifies whether an object should be cascaded.

  # *

  # * Cascading is relevant for any node type but class nodes. If such a node

  # * contains an object of value, and if cascading is enabled, then the node

  # * traverser will try to find class metadata for that object and validate the

  # * object against that metadata.

  # *

  # * If no metadata is found for a cascaded object, and if that object implements

  # * {@link \Traversable}, the node traverser will iterate over the object and

  # * cascade each object or collection contained within, unless iteration is

  # * prohibited by the specified {@link TraversalStrategy}.

  # *

  # * Although the constants currently represent a boolean switch, they are

  # * implemented as bit mask in order to allow future extensions.

  # *

  # * @author Bernhard Schussek <bschussek@gmail.com>

  # *

  # * @see TraversalStrategy'
dependencies: []
properties: []
methods:
- name: __construct
  visibility: private
  parameters: []
  comment: "# * Specifies whether an object should be cascaded.\n# *\n# * Cascading\
    \ is relevant for any node type but class nodes. If such a node\n# * contains\
    \ an object of value, and if cascading is enabled, then the node\n# * traverser\
    \ will try to find class metadata for that object and validate the\n# * object\
    \ against that metadata.\n# *\n# * If no metadata is found for a cascaded object,\
    \ and if that object implements\n# * {@link \\Traversable}, the node traverser\
    \ will iterate over the object and\n# * cascade each object or collection contained\
    \ within, unless iteration is\n# * prohibited by the specified {@link TraversalStrategy}.\n\
    # *\n# * Although the constants currently represent a boolean switch, they are\n\
    # * implemented as bit mask in order to allow future extensions.\n# *\n# * @author\
    \ Bernhard Schussek <bschussek@gmail.com>\n# *\n# * @see TraversalStrategy\n#\
    \ */\n# class CascadingStrategy\n# {\n# /**\n# * Specifies that a node should\
    \ not be cascaded.\n# */\n# public const NONE = 1;\n# \n# /**\n# * Specifies that\
    \ a node should be cascaded.\n# */\n# public const CASCADE = 2;\n# \n# /**\n#\
    \ * Not instantiable."
traits: []
interfaces: []
