name: NotCompromisedPassword
class_comment: null
dependencies:
- name: Constraint
  type: class
  source: Symfony\Component\Validator\Constraint
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: options
    default: 'null'
  - name: message
    default: 'null'
  - name: threshold
    default: 'null'
  - name: skipOnError
    default: 'null'
  - name: groups
    default: 'null'
  - name: payload
    default: 'null'
  comment: "# * Checks if a password has been leaked in a data breach.\n# *\n# * @author\
    \ K\xE9vin Dunglas <dunglas@gmail.com>\n# */\n# #[\\Attribute(\\Attribute::TARGET_PROPERTY\
    \ | \\Attribute::TARGET_METHOD | \\Attribute::IS_REPEATABLE)]\n# class NotCompromisedPassword\
    \ extends Constraint\n# {\n# public const COMPROMISED_PASSWORD_ERROR = 'd9bcdbfe-a9d6-4bfa-a8ff-da5fd93e0f6d';\n\
    # \n# protected const ERROR_NAMES = [\n# self::COMPROMISED_PASSWORD_ERROR => 'COMPROMISED_PASSWORD_ERROR',\n\
    # ];\n# \n# public string $message = 'This password has been leaked in a data\
    \ breach, it must not be used. Please use another password.';\n# public int $threshold\
    \ = 1;\n# public bool $skipOnError = false;\n# \n# /**\n# * @param array<string,mixed>|null\
    \ $options\n# * @param int|null                 $threshold   The number of times\
    \ the password should have been leaked to consider it is compromised (defaults\
    \ to 1)\n# * @param bool|null                $skipOnError Whether to ignore HTTP\
    \ errors while requesting the API and thus consider the password valid (defaults\
    \ to false)\n# * @param string[]|null            $groups"
traits:
- Symfony\Component\Validator\Constraint
interfaces: []
