name: Uuid
class_comment: null
dependencies:
- name: Constraint
  type: class
  source: Symfony\Component\Validator\Constraint
- name: InvalidArgumentException
  type: class
  source: Symfony\Component\Validator\Exception\InvalidArgumentException
properties:
- name: normalizer
  visibility: public
  comment: "# * Validates that a value is a valid Universally unique identifier (UUID).\n\
    # *\n# * @see https://en.wikipedia.org/wiki/Universally_unique_identifier\n# *\
    \ @see https://datatracker.ietf.org/doc/html/rfc4122\n# *\n# * @author Colin O'Dell\
    \ <colinodell@gmail.com>\n# * @author Bernhard Schussek <bschussek@gmail.com>\n\
    # */\n# #[\\Attribute(\\Attribute::TARGET_PROPERTY | \\Attribute::TARGET_METHOD\
    \ | \\Attribute::IS_REPEATABLE)]\n# class Uuid extends Constraint\n# {\n# public\
    \ const TOO_SHORT_ERROR = 'aa314679-dac9-4f54-bf97-b2049df8f2a3';\n# public const\
    \ TOO_LONG_ERROR = '494897dd-36f8-4d31-8923-71a8d5f3000d';\n# public const INVALID_CHARACTERS_ERROR\
    \ = '51120b12-a2bc-41bf-aa53-cd73daf330d0';\n# public const INVALID_HYPHEN_PLACEMENT_ERROR\
    \ = '98469c83-0309-4f5d-bf95-a496dcaa869c';\n# public const INVALID_VERSION_ERROR\
    \ = '21ba13b4-b185-4882-ac6f-d147355987eb';\n# public const INVALID_TIME_BASED_VERSION_ERROR\
    \ = '484081ca-6fbd-11ed-ade8-a3bdfd0fcf2f';\n# public const INVALID_VARIANT_ERROR\
    \ = '164ef693-2b9d-46de-ad7f-836201f0c2db';\n# \n# protected const ERROR_NAMES\
    \ = [\n# self::TOO_SHORT_ERROR => 'TOO_SHORT_ERROR',\n# self::TOO_LONG_ERROR =>\
    \ 'TOO_LONG_ERROR',\n# self::INVALID_CHARACTERS_ERROR => 'INVALID_CHARACTERS_ERROR',\n\
    # self::INVALID_HYPHEN_PLACEMENT_ERROR => 'INVALID_HYPHEN_PLACEMENT_ERROR',\n\
    # self::INVALID_VERSION_ERROR => 'INVALID_VERSION_ERROR',\n# self::INVALID_VARIANT_ERROR\
    \ => 'INVALID_VARIANT_ERROR',\n# ];\n# \n# // Possible versions defined by RFC\
    \ 4122\n# public const V1_MAC = 1;\n# public const V2_DCE = 2;\n# public const\
    \ V3_MD5 = 3;\n# public const V4_RANDOM = 4;\n# public const V5_SHA1 = 5;\n# public\
    \ const V6_SORTABLE = 6;\n# public const V7_MONOTONIC = 7;\n# public const V8_CUSTOM\
    \ = 8;\n# \n# public const ALL_VERSIONS = [\n# self::V1_MAC,\n# self::V2_DCE,\n\
    # self::V3_MD5,\n# self::V4_RANDOM,\n# self::V5_SHA1,\n# self::V6_SORTABLE,\n\
    # self::V7_MONOTONIC,\n# self::V8_CUSTOM,\n# ];\n# \n# public const TIME_BASED_VERSIONS\
    \ = [\n# self::V1_MAC,\n# self::V6_SORTABLE,\n# self::V7_MONOTONIC,\n# ];\n# \n\
    # /**\n# * Message to display when validation fails.\n# */\n# public string $message\
    \ = 'This is not a valid UUID.';\n# \n# /**\n# * Strict mode only allows UUIDs\
    \ that meet the formal definition and formatting per RFC 4122.\n# *\n# * Set this\
    \ to `false` to allow legacy formats with different dash positioning or wrapping\
    \ characters\n# */\n# public bool $strict = true;\n# \n# /**\n# * Array of allowed\
    \ versions (see version constants above).\n# *\n# * All UUID versions are allowed\
    \ by default\n# *\n# * @var int[]\n# */\n# public array $versions = self::ALL_VERSIONS;\n\
    # \n# /** @var callable|null"
methods:
- name: __construct
  visibility: public
  parameters:
  - name: options
    default: 'null'
  - name: message
    default: 'null'
  - name: versions
    default: 'null'
  - name: strict
    default: 'null'
  - name: normalizer
    default: 'null'
  - name: groups
    default: 'null'
  - name: payload
    default: 'null'
  comment: "# * Validates that a value is a valid Universally unique identifier (UUID).\n\
    # *\n# * @see https://en.wikipedia.org/wiki/Universally_unique_identifier\n# *\
    \ @see https://datatracker.ietf.org/doc/html/rfc4122\n# *\n# * @author Colin O'Dell\
    \ <colinodell@gmail.com>\n# * @author Bernhard Schussek <bschussek@gmail.com>\n\
    # */\n# #[\\Attribute(\\Attribute::TARGET_PROPERTY | \\Attribute::TARGET_METHOD\
    \ | \\Attribute::IS_REPEATABLE)]\n# class Uuid extends Constraint\n# {\n# public\
    \ const TOO_SHORT_ERROR = 'aa314679-dac9-4f54-bf97-b2049df8f2a3';\n# public const\
    \ TOO_LONG_ERROR = '494897dd-36f8-4d31-8923-71a8d5f3000d';\n# public const INVALID_CHARACTERS_ERROR\
    \ = '51120b12-a2bc-41bf-aa53-cd73daf330d0';\n# public const INVALID_HYPHEN_PLACEMENT_ERROR\
    \ = '98469c83-0309-4f5d-bf95-a496dcaa869c';\n# public const INVALID_VERSION_ERROR\
    \ = '21ba13b4-b185-4882-ac6f-d147355987eb';\n# public const INVALID_TIME_BASED_VERSION_ERROR\
    \ = '484081ca-6fbd-11ed-ade8-a3bdfd0fcf2f';\n# public const INVALID_VARIANT_ERROR\
    \ = '164ef693-2b9d-46de-ad7f-836201f0c2db';\n# \n# protected const ERROR_NAMES\
    \ = [\n# self::TOO_SHORT_ERROR => 'TOO_SHORT_ERROR',\n# self::TOO_LONG_ERROR =>\
    \ 'TOO_LONG_ERROR',\n# self::INVALID_CHARACTERS_ERROR => 'INVALID_CHARACTERS_ERROR',\n\
    # self::INVALID_HYPHEN_PLACEMENT_ERROR => 'INVALID_HYPHEN_PLACEMENT_ERROR',\n\
    # self::INVALID_VERSION_ERROR => 'INVALID_VERSION_ERROR',\n# self::INVALID_VARIANT_ERROR\
    \ => 'INVALID_VARIANT_ERROR',\n# ];\n# \n# // Possible versions defined by RFC\
    \ 4122\n# public const V1_MAC = 1;\n# public const V2_DCE = 2;\n# public const\
    \ V3_MD5 = 3;\n# public const V4_RANDOM = 4;\n# public const V5_SHA1 = 5;\n# public\
    \ const V6_SORTABLE = 6;\n# public const V7_MONOTONIC = 7;\n# public const V8_CUSTOM\
    \ = 8;\n# \n# public const ALL_VERSIONS = [\n# self::V1_MAC,\n# self::V2_DCE,\n\
    # self::V3_MD5,\n# self::V4_RANDOM,\n# self::V5_SHA1,\n# self::V6_SORTABLE,\n\
    # self::V7_MONOTONIC,\n# self::V8_CUSTOM,\n# ];\n# \n# public const TIME_BASED_VERSIONS\
    \ = [\n# self::V1_MAC,\n# self::V6_SORTABLE,\n# self::V7_MONOTONIC,\n# ];\n# \n\
    # /**\n# * Message to display when validation fails.\n# */\n# public string $message\
    \ = 'This is not a valid UUID.';\n# \n# /**\n# * Strict mode only allows UUIDs\
    \ that meet the formal definition and formatting per RFC 4122.\n# *\n# * Set this\
    \ to `false` to allow legacy formats with different dash positioning or wrapping\
    \ characters\n# */\n# public bool $strict = true;\n# \n# /**\n# * Array of allowed\
    \ versions (see version constants above).\n# *\n# * All UUID versions are allowed\
    \ by default\n# *\n# * @var int[]\n# */\n# public array $versions = self::ALL_VERSIONS;\n\
    # \n# /** @var callable|null */\n# public $normalizer;\n# \n# /**\n# * @param\
    \ array<string,mixed>|null $options\n# * @param self::V*[]|self::V*|null $versions\
    \ Specific UUID versions (defaults to {@see Uuid::ALL_VERSIONS})\n# * @param bool|null\
    \                $strict   Whether to force the value to follow the RFC's input\
    \ format rules; pass false to allow alternate formats (defaults to true)\n# *\
    \ @param string[]|null            $groups"
traits:
- Symfony\Component\Validator\Constraint
- Symfony\Component\Validator\Exception\InvalidArgumentException
interfaces: []
