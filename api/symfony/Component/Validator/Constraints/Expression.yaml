name: Expression
class_comment: null
dependencies:
- name: ExpressionObject
  type: class
  source: Symfony\Component\ExpressionLanguage\Expression
- name: ExpressionLanguage
  type: class
  source: Symfony\Component\ExpressionLanguage\ExpressionLanguage
- name: Constraint
  type: class
  source: Symfony\Component\Validator\Constraint
- name: LogicException
  type: class
  source: Symfony\Component\Validator\Exception\LogicException
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: expression
  - name: message
    default: 'null'
  - name: values
    default: 'null'
  - name: groups
    default: 'null'
  - name: payload
    default: 'null'
  - name: options
    default: '[]'
  - name: negate
    default: 'null'
  comment: "# * Validates a value using an expression from the Expression Language\
    \ component.\n# *\n# * @see https://symfony.com/doc/current/components/expression_language.html\n\
    # *\n# * @author Fabien Potencier <fabien@symfony.com>\n# * @author Bernhard Schussek\
    \ <bschussek@gmail.com>\n# */\n# #[\\Attribute(\\Attribute::TARGET_PROPERTY |\
    \ \\Attribute::TARGET_METHOD | \\Attribute::TARGET_CLASS | \\Attribute::IS_REPEATABLE)]\n\
    # class Expression extends Constraint\n# {\n# public const EXPRESSION_FAILED_ERROR\
    \ = '6b3befbc-2f01-4ddf-be21-b57898905284';\n# \n# protected const ERROR_NAMES\
    \ = [\n# self::EXPRESSION_FAILED_ERROR => 'EXPRESSION_FAILED_ERROR',\n# ];\n#\
    \ \n# public string $message = 'This value is not valid.';\n# public string|ExpressionObject|null\
    \ $expression = null;\n# public array $values = [];\n# public bool $negate = true;\n\
    # \n# /**\n# * @param string|ExpressionObject|array<string,mixed>|null $expression\
    \ The expression to evaluate\n# * @param array<string,mixed>|null            \
    \             $values     The values of the custom variables used in the expression\
    \ (defaults to an empty array)\n# * @param string[]|null                     \
    \               $groups\n# * @param array<string,mixed>                      \
    \        $options\n# * @param bool|null                                      \
    \  $negate     Whether to fail is the expression evaluates to true (defaults to\
    \ false)"
- name: getDefaultOption
  visibility: public
  parameters: []
  comment: null
- name: getRequiredOptions
  visibility: public
  parameters: []
  comment: null
- name: getTargets
  visibility: public
  parameters: []
  comment: null
- name: validatedBy
  visibility: public
  parameters: []
  comment: null
traits:
- Symfony\Component\ExpressionLanguage\ExpressionLanguage
- Symfony\Component\Validator\Constraint
- Symfony\Component\Validator\Exception\LogicException
interfaces: []
