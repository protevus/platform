name: Url
class_comment: null
dependencies:
- name: Constraint
  type: class
  source: Symfony\Component\Validator\Constraint
- name: InvalidArgumentException
  type: class
  source: Symfony\Component\Validator\Exception\InvalidArgumentException
properties:
- name: normalizer
  visibility: public
  comment: "# * Validates that a value is a valid URL string.\n# *\n# * @author Bernhard\
    \ Schussek <bschussek@gmail.com>\n# */\n# #[\\Attribute(\\Attribute::TARGET_PROPERTY\
    \ | \\Attribute::TARGET_METHOD | \\Attribute::IS_REPEATABLE)]\n# class Url extends\
    \ Constraint\n# {\n# public const INVALID_URL_ERROR = '57c2f299-1154-4870-89bb-ef3b1f5ad229';\n\
    # public const MISSING_TLD_ERROR = '8a5d387f-0716-46b4-844b-67367faf435a';\n#\
    \ \n# protected const ERROR_NAMES = [\n# self::INVALID_URL_ERROR => 'INVALID_URL_ERROR',\n\
    # self::MISSING_TLD_ERROR => 'MISSING_TLD_ERROR',\n# ];\n# \n# public string $message\
    \ = 'This value is not a valid URL.';\n# public string $tldMessage = 'This URL\
    \ is missing a top-level domain.';\n# public array $protocols = ['http', 'https'];\n\
    # public bool $relativeProtocol = false;\n# public bool $requireTld = false;\n\
    # /** @var callable|null"
methods:
- name: __construct
  visibility: public
  parameters:
  - name: options
    default: 'null'
  - name: message
    default: 'null'
  - name: protocols
    default: 'null'
  - name: relativeProtocol
    default: 'null'
  - name: normalizer
    default: 'null'
  - name: groups
    default: 'null'
  - name: payload
    default: 'null'
  - name: requireTld
    default: 'null'
  comment: "# * Validates that a value is a valid URL string.\n# *\n# * @author Bernhard\
    \ Schussek <bschussek@gmail.com>\n# */\n# #[\\Attribute(\\Attribute::TARGET_PROPERTY\
    \ | \\Attribute::TARGET_METHOD | \\Attribute::IS_REPEATABLE)]\n# class Url extends\
    \ Constraint\n# {\n# public const INVALID_URL_ERROR = '57c2f299-1154-4870-89bb-ef3b1f5ad229';\n\
    # public const MISSING_TLD_ERROR = '8a5d387f-0716-46b4-844b-67367faf435a';\n#\
    \ \n# protected const ERROR_NAMES = [\n# self::INVALID_URL_ERROR => 'INVALID_URL_ERROR',\n\
    # self::MISSING_TLD_ERROR => 'MISSING_TLD_ERROR',\n# ];\n# \n# public string $message\
    \ = 'This value is not a valid URL.';\n# public string $tldMessage = 'This URL\
    \ is missing a top-level domain.';\n# public array $protocols = ['http', 'https'];\n\
    # public bool $relativeProtocol = false;\n# public bool $requireTld = false;\n\
    # /** @var callable|null */\n# public $normalizer;\n# \n# /**\n# * @param array<string,mixed>|null\
    \ $options\n# * @param string[]|null            $protocols        The protocols\
    \ considered to be valid for the URL (e.g. http, https, ftp, etc.) (defaults to\
    \ ['http', 'https']\n# * @param bool|null                $relativeProtocol Whether\
    \ to accept URL without the protocol (i.e. //example.com) (defaults to false)\n\
    # * @param string[]|null            $groups\n# * @param bool|null            \
    \    $requireTld       Whether to require the URL to include a top-level domain\
    \ (defaults to false)"
traits:
- Symfony\Component\Validator\Constraint
- Symfony\Component\Validator\Exception\InvalidArgumentException
interfaces: []
