name: ExpressionSyntax
class_comment: null
dependencies:
- name: Constraint
  type: class
  source: Symfony\Component\Validator\Constraint
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: options
    default: 'null'
  - name: message
    default: 'null'
  - name: service
    default: 'null'
  - name: allowedVariables
    default: 'null'
  - name: groups
    default: 'null'
  - name: payload
    default: 'null'
  comment: "# * Validates that a value is valid as an ExpressionLanguage expression.\n\
    # *\n# * @author Andrey Sevastianov <mrpkmail@gmail.com>\n# */\n# #[\\Attribute(\\\
    Attribute::TARGET_PROPERTY | \\Attribute::TARGET_METHOD | \\Attribute::IS_REPEATABLE)]\n\
    # class ExpressionSyntax extends Constraint\n# {\n# public const EXPRESSION_SYNTAX_ERROR\
    \ = 'e219aa22-8b11-48ec-81a0-fc07cdb0e13f';\n# \n# protected const ERROR_NAMES\
    \ = [\n# self::EXPRESSION_SYNTAX_ERROR => 'EXPRESSION_SYNTAX_ERROR',\n# ];\n#\
    \ \n# public string $message = 'This value should be a valid expression.';\n#\
    \ public ?string $service = null;\n# public ?array $allowedVariables = null;\n\
    # \n# /**\n# * @param array<string,mixed>|null $options\n# * @param string|null\
    \              $service          The service used to validate the constraint instead\
    \ of the default one\n# * @param string[]|null            $allowedVariables Restrict\
    \ the available variables in the expression to these values (defaults to null\
    \ that allows any variable)\n# * @param string[]|null            $groups"
- name: validatedBy
  visibility: public
  parameters: []
  comment: null
traits:
- Symfony\Component\Validator\Constraint
interfaces: []
