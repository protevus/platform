name: CheckTypeDeclarationsPass
class_comment: null
dependencies:
- name: IteratorArgument
  type: class
  source: Symfony\Component\DependencyInjection\Argument\IteratorArgument
- name: RewindableGenerator
  type: class
  source: Symfony\Component\DependencyInjection\Argument\RewindableGenerator
- name: ServiceClosureArgument
  type: class
  source: Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument
- name: ServiceLocatorArgument
  type: class
  source: Symfony\Component\DependencyInjection\Argument\ServiceLocatorArgument
- name: Container
  type: class
  source: Symfony\Component\DependencyInjection\Container
- name: Definition
  type: class
  source: Symfony\Component\DependencyInjection\Definition
- name: InvalidArgumentException
  type: class
  source: Symfony\Component\DependencyInjection\Exception\InvalidArgumentException
- name: InvalidParameterTypeException
  type: class
  source: Symfony\Component\DependencyInjection\Exception\InvalidParameterTypeException
- name: RuntimeException
  type: class
  source: Symfony\Component\DependencyInjection\Exception\RuntimeException
- name: ExpressionLanguage
  type: class
  source: Symfony\Component\DependencyInjection\ExpressionLanguage
- name: Parameter
  type: class
  source: Symfony\Component\DependencyInjection\Parameter
- name: EnvPlaceholderParameterBag
  type: class
  source: Symfony\Component\DependencyInjection\ParameterBag\EnvPlaceholderParameterBag
- name: Reference
  type: class
  source: Symfony\Component\DependencyInjection\Reference
- name: ServiceLocator
  type: class
  source: Symfony\Component\DependencyInjection\ServiceLocator
- name: Expression
  type: class
  source: Symfony\Component\ExpressionLanguage\Expression
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: autoload
    default: 'false'
  - name: skippedIds
    default: '[]'
  comment: "# * Checks whether injected parameters are compatible with type declarations.\n\
    # *\n# * This pass should be run after all optimization passes.\n# *\n# * It can\
    \ be added either:\n# *  * before removing passes to check all services even if\
    \ they are not currently used,\n# *  * after removing passes to check only services\
    \ are used in the app.\n# *\n# * @author Nicolas Grekas <p@tchwork.com>\n# * @author\
    \ Julien Maulny <jmaulny@darkmira.fr>\n# */\n# final class CheckTypeDeclarationsPass\
    \ extends AbstractRecursivePass\n# {\n# protected bool $skipScalars = true;\n\
    # \n# private const SCALAR_TYPES = [\n# 'int' => true,\n# 'float' => true,\n#\
    \ 'bool' => true,\n# 'string' => true,\n# ];\n# \n# private const BUILTIN_TYPES\
    \ = [\n# 'array' => true,\n# 'bool' => true,\n# 'callable' => true,\n# 'float'\
    \ => true,\n# 'int' => true,\n# 'iterable' => true,\n# 'object' => true,\n# 'string'\
    \ => true,\n# ];\n# \n# private ExpressionLanguage $expressionLanguage;\n# \n\
    # /**\n# * @param bool  $autoload   Whether services who's class in not loaded\
    \ should be checked or not.\n# *                          Defaults to false to\
    \ save loading code during compilation.\n# * @param array $skippedIds An array\
    \ indexed by the service ids to skip"
- name: processValue
  visibility: protected
  parameters:
  - name: value
  - name: isRoot
    default: 'false'
  comment: null
- name: checkTypeDeclarations
  visibility: private
  parameters:
  - name: checkedDefinition
  - name: reflectionFunction
  - name: values
  comment: '# * @throws InvalidArgumentException When not enough parameters are defined
    for the method'
- name: checkType
  visibility: private
  parameters:
  - name: checkedDefinition
  - name: value
  - name: parameter
  - name: envPlaceholderUniquePrefix
  - name: reflectionType
    default: 'null'
  comment: '# * @throws InvalidParameterTypeException When a parameter is not compatible
    with the declared type'
- name: getExpressionLanguage
  visibility: private
  parameters: []
  comment: null
traits:
- Symfony\Component\DependencyInjection\Argument\IteratorArgument
- Symfony\Component\DependencyInjection\Argument\RewindableGenerator
- Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument
- Symfony\Component\DependencyInjection\Argument\ServiceLocatorArgument
- Symfony\Component\DependencyInjection\Container
- Symfony\Component\DependencyInjection\Definition
- Symfony\Component\DependencyInjection\Exception\InvalidArgumentException
- Symfony\Component\DependencyInjection\Exception\InvalidParameterTypeException
- Symfony\Component\DependencyInjection\Exception\RuntimeException
- Symfony\Component\DependencyInjection\ExpressionLanguage
- Symfony\Component\DependencyInjection\Parameter
- Symfony\Component\DependencyInjection\ParameterBag\EnvPlaceholderParameterBag
- Symfony\Component\DependencyInjection\Reference
- Symfony\Component\DependencyInjection\ServiceLocator
- Symfony\Component\ExpressionLanguage\Expression
interfaces: []
