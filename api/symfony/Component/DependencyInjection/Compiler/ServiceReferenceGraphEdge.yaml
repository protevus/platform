name: ServiceReferenceGraphEdge
class_comment: '# * Represents an edge in your service graph.

  # *

  # * Value is typically a reference.

  # *

  # * @author Johannes M. Schmitt <schmittjoh@gmail.com>'
dependencies: []
properties: []
methods:
- name: getValue
  visibility: public
  parameters: []
  comment: "# * Represents an edge in your service graph.\n# *\n# * Value is typically\
    \ a reference.\n# *\n# * @author Johannes M. Schmitt <schmittjoh@gmail.com>\n\
    # */\n# class ServiceReferenceGraphEdge\n# {\n# public function __construct(\n\
    # private ServiceReferenceGraphNode $sourceNode,\n# private ServiceReferenceGraphNode\
    \ $destNode,\n# private mixed $value = null,\n# private bool $lazy = false,\n\
    # private bool $weak = false,\n# private bool $byConstructor = false,\n# ) {\n\
    # }\n# \n# /**\n# * Returns the value of the edge."
- name: getSourceNode
  visibility: public
  parameters: []
  comment: '# * Returns the source node.'
- name: getDestNode
  visibility: public
  parameters: []
  comment: '# * Returns the destination node.'
- name: isLazy
  visibility: public
  parameters: []
  comment: '# * Returns true if the edge is lazy, meaning it''s a dependency not requiring
    direct instantiation.'
- name: isWeak
  visibility: public
  parameters: []
  comment: '# * Returns true if the edge is weak, meaning it shouldn''t prevent removing
    the target service.'
- name: isReferencedByConstructor
  visibility: public
  parameters: []
  comment: '# * Returns true if the edge links with a constructor argument.'
traits: []
interfaces: []
