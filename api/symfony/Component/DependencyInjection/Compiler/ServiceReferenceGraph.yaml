name: ServiceReferenceGraph
class_comment: '# * This is a directed graph of your services.

  # *

  # * This information can be used by your compiler passes instead of collecting

  # * it themselves which improves performance quite a lot.

  # *

  # * @author Johannes M. Schmitt <schmittjoh@gmail.com>

  # *

  # * @final'
dependencies:
- name: InvalidArgumentException
  type: class
  source: Symfony\Component\DependencyInjection\Exception\InvalidArgumentException
- name: Reference
  type: class
  source: Symfony\Component\DependencyInjection\Reference
properties: []
methods:
- name: getNode
  visibility: public
  parameters:
  - name: id
  comment: "# * This is a directed graph of your services.\n# *\n# * This information\
    \ can be used by your compiler passes instead of collecting\n# * it themselves\
    \ which improves performance quite a lot.\n# *\n# * @author Johannes M. Schmitt\
    \ <schmittjoh@gmail.com>\n# *\n# * @final\n# */\n# class ServiceReferenceGraph\n\
    # {\n# /**\n# * @var ServiceReferenceGraphNode[]\n# */\n# private array $nodes\
    \ = [];\n# \n# public function hasNode(string $id): bool\n# {\n# return isset($this->nodes[$id]);\n\
    # }\n# \n# /**\n# * Gets a node by identifier.\n# *\n# * @throws InvalidArgumentException\
    \ if no node matches the supplied identifier"
- name: getNodes
  visibility: public
  parameters: []
  comment: '# * Returns all nodes.

    # *

    # * @return ServiceReferenceGraphNode[]'
- name: clear
  visibility: public
  parameters: []
  comment: '# * Clears all nodes.'
- name: connect
  visibility: public
  parameters:
  - name: sourceId
  - name: sourceValue
  - name: destId
  - name: destValue
    default: 'null'
  - name: reference
    default: 'null'
  - name: lazy
    default: 'false'
  - name: weak
    default: 'false'
  - name: byConstructor
    default: 'false'
  comment: '# * Connects 2 nodes together in the Graph.'
- name: createNode
  visibility: private
  parameters:
  - name: id
  - name: value
  comment: null
traits:
- Symfony\Component\DependencyInjection\Exception\InvalidArgumentException
- Symfony\Component\DependencyInjection\Reference
interfaces: []
