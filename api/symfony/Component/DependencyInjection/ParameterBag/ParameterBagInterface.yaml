name: ParameterBagInterface
class_comment: null
dependencies:
- name: LogicException
  type: class
  source: Symfony\Component\DependencyInjection\Exception\LogicException
- name: ParameterNotFoundException
  type: class
  source: Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException
properties: []
methods:
- name: clear
  visibility: public
  parameters: []
  comment: '# * ParameterBagInterface is the interface implemented by objects that
    manage service container parameters.

    # *

    # * @author Fabien Potencier <fabien@symfony.com>

    # */

    # interface ParameterBagInterface

    # {

    # /**

    # * Clears all parameters.

    # *

    # * @throws LogicException if the ParameterBagInterface cannot be cleared'
- name: add
  visibility: public
  parameters:
  - name: parameters
  comment: '# * Adds parameters to the service container parameters.

    # *

    # * @throws LogicException if the parameter cannot be added'
- name: all
  visibility: public
  parameters: []
  comment: '# * Gets the service container parameters.'
- name: get
  visibility: public
  parameters:
  - name: name
  comment: '# * Gets a service container parameter.

    # *

    # * @throws ParameterNotFoundException if the parameter is not defined'
- name: remove
  visibility: public
  parameters:
  - name: name
  comment: '# * Removes a parameter.'
- name: set
  visibility: public
  parameters:
  - name: name
  - name: value
  comment: '# * Sets a service container parameter.

    # *

    # * @throws LogicException if the parameter cannot be set'
- name: has
  visibility: public
  parameters:
  - name: name
  comment: '# * Returns true if a parameter name is defined.'
- name: resolve
  visibility: public
  parameters: []
  comment: '# * Replaces parameter placeholders (%name%) by their values for all parameters.'
- name: resolveValue
  visibility: public
  parameters:
  - name: value
  comment: '# * Replaces parameter placeholders (%name%) by their values.

    # *

    # * @throws ParameterNotFoundException if a placeholder references a parameter
    that does not exist'
- name: escapeValue
  visibility: public
  parameters:
  - name: value
  comment: '# * Escape parameter placeholders %.'
- name: unescapeValue
  visibility: public
  parameters:
  - name: value
  comment: '# * Unescape parameter placeholders %.'
traits:
- Symfony\Component\DependencyInjection\Exception\LogicException
- Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException
interfaces: []
