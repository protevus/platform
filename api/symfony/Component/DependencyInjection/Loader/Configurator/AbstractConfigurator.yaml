name: AbstractConfigurator
class_comment: null
dependencies:
- name: ParamConfigurator
  type: class
  source: Symfony\Component\Config\Loader\ParamConfigurator
- name: Alias
  type: class
  source: Symfony\Component\DependencyInjection\Alias
- name: AbstractArgument
  type: class
  source: Symfony\Component\DependencyInjection\Argument\AbstractArgument
- name: ArgumentInterface
  type: class
  source: Symfony\Component\DependencyInjection\Argument\ArgumentInterface
- name: ServiceClosureArgument
  type: class
  source: Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument
- name: Definition
  type: class
  source: Symfony\Component\DependencyInjection\Definition
- name: InvalidArgumentException
  type: class
  source: Symfony\Component\DependencyInjection\Exception\InvalidArgumentException
- name: Parameter
  type: class
  source: Symfony\Component\DependencyInjection\Parameter
- name: Reference
  type: class
  source: Symfony\Component\DependencyInjection\Reference
- name: Expression
  type: class
  source: Symfony\Component\ExpressionLanguage\Expression
properties: []
methods:
- name: processValue
  visibility: public
  parameters:
  - name: value
  - name: allowServices
    default: 'false'
  comment: "# * @var \\Closure(mixed, bool):mixed|null\n# */\n# public static ?\\\
    Closure $valuePreProcessor = null;\n# \n# /** @internal */\n# protected Definition|Alias|null\
    \ $definition = null;\n# \n# public function __call(string $method, array $args):\
    \ mixed\n# {\n# if (method_exists($this, 'set'.$method)) {\n# return $this->{'set'.$method}(...$args);\n\
    # }\n# \n# throw new \\BadMethodCallException(\\sprintf('Call to undefined method\
    \ \"%s::%s()\".', static::class, $method));\n# }\n# \n# public function __sleep():\
    \ array\n# {\n# throw new \\BadMethodCallException('Cannot serialize '.__CLASS__);\n\
    # }\n# \n# public function __wakeup(): void\n# {\n# throw new \\BadMethodCallException('Cannot\
    \ unserialize '.__CLASS__);\n# }\n# \n# /**\n# * Checks that a value is valid,\
    \ optionally replacing Definition and Reference configurators by their configure\
    \ value.\n# *\n# * @param bool $allowServices whether Definition and Reference\
    \ are allowed; by default, only scalars, arrays and enum are\n# *\n# * @return\
    \ mixed the value, optionally cast to a Definition/Reference"
traits:
- Symfony\Component\Config\Loader\ParamConfigurator
- Symfony\Component\DependencyInjection\Alias
- Symfony\Component\DependencyInjection\Argument\AbstractArgument
- Symfony\Component\DependencyInjection\Argument\ArgumentInterface
- Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument
- Symfony\Component\DependencyInjection\Definition
- Symfony\Component\DependencyInjection\Exception\InvalidArgumentException
- Symfony\Component\DependencyInjection\Parameter
- Symfony\Component\DependencyInjection\Reference
- Symfony\Component\ExpressionLanguage\Expression
interfaces: []
