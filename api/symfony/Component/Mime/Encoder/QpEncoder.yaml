name: QpEncoder
class_comment: '# * @author Chris Corbyn'
dependencies:
- name: CharacterStream
  type: class
  source: Symfony\Component\Mime\CharacterStream
properties: []
methods:
- name: encodeString
  visibility: public
  parameters:
  - name: string
  - name: charset
    default: '''utf-8'''
  - name: firstLineOffset
    default: '0'
  - name: maxLineLength
    default: '0'
  comment: "# * @author Chris Corbyn\n# */\n# class QpEncoder implements EncoderInterface\n\
    # {\n# /**\n# * Pre-computed QP for HUGE optimization.\n# */\n# private const\
    \ QP_MAP = [\n# 0 => '=00', 1 => '=01', 2 => '=02', 3 => '=03', 4 => '=04',\n\
    # 5 => '=05', 6 => '=06', 7 => '=07', 8 => '=08', 9 => '=09',\n# 10 => '=0A',\
    \ 11 => '=0B', 12 => '=0C', 13 => '=0D', 14 => '=0E',\n# 15 => '=0F', 16 => '=10',\
    \ 17 => '=11', 18 => '=12', 19 => '=13',\n# 20 => '=14', 21 => '=15', 22 => '=16',\
    \ 23 => '=17', 24 => '=18',\n# 25 => '=19', 26 => '=1A', 27 => '=1B', 28 => '=1C',\
    \ 29 => '=1D',\n# 30 => '=1E', 31 => '=1F', 32 => '=20', 33 => '=21', 34 => '=22',\n\
    # 35 => '=23', 36 => '=24', 37 => '=25', 38 => '=26', 39 => '=27',\n# 40 => '=28',\
    \ 41 => '=29', 42 => '=2A', 43 => '=2B', 44 => '=2C',\n# 45 => '=2D', 46 => '=2E',\
    \ 47 => '=2F', 48 => '=30', 49 => '=31',\n# 50 => '=32', 51 => '=33', 52 => '=34',\
    \ 53 => '=35', 54 => '=36',\n# 55 => '=37', 56 => '=38', 57 => '=39', 58 => '=3A',\
    \ 59 => '=3B',\n# 60 => '=3C', 61 => '=3D', 62 => '=3E', 63 => '=3F', 64 => '=40',\n\
    # 65 => '=41', 66 => '=42', 67 => '=43', 68 => '=44', 69 => '=45',\n# 70 => '=46',\
    \ 71 => '=47', 72 => '=48', 73 => '=49', 74 => '=4A',\n# 75 => '=4B', 76 => '=4C',\
    \ 77 => '=4D', 78 => '=4E', 79 => '=4F',\n# 80 => '=50', 81 => '=51', 82 => '=52',\
    \ 83 => '=53', 84 => '=54',\n# 85 => '=55', 86 => '=56', 87 => '=57', 88 => '=58',\
    \ 89 => '=59',\n# 90 => '=5A', 91 => '=5B', 92 => '=5C', 93 => '=5D', 94 => '=5E',\n\
    # 95 => '=5F', 96 => '=60', 97 => '=61', 98 => '=62', 99 => '=63',\n# 100 => '=64',\
    \ 101 => '=65', 102 => '=66', 103 => '=67', 104 => '=68',\n# 105 => '=69', 106\
    \ => '=6A', 107 => '=6B', 108 => '=6C', 109 => '=6D',\n# 110 => '=6E', 111 =>\
    \ '=6F', 112 => '=70', 113 => '=71', 114 => '=72',\n# 115 => '=73', 116 => '=74',\
    \ 117 => '=75', 118 => '=76', 119 => '=77',\n# 120 => '=78', 121 => '=79', 122\
    \ => '=7A', 123 => '=7B', 124 => '=7C',\n# 125 => '=7D', 126 => '=7E', 127 =>\
    \ '=7F', 128 => '=80', 129 => '=81',\n# 130 => '=82', 131 => '=83', 132 => '=84',\
    \ 133 => '=85', 134 => '=86',\n# 135 => '=87', 136 => '=88', 137 => '=89', 138\
    \ => '=8A', 139 => '=8B',\n# 140 => '=8C', 141 => '=8D', 142 => '=8E', 143 =>\
    \ '=8F', 144 => '=90',\n# 145 => '=91', 146 => '=92', 147 => '=93', 148 => '=94',\
    \ 149 => '=95',\n# 150 => '=96', 151 => '=97', 152 => '=98', 153 => '=99', 154\
    \ => '=9A',\n# 155 => '=9B', 156 => '=9C', 157 => '=9D', 158 => '=9E', 159 =>\
    \ '=9F',\n# 160 => '=A0', 161 => '=A1', 162 => '=A2', 163 => '=A3', 164 => '=A4',\n\
    # 165 => '=A5', 166 => '=A6', 167 => '=A7', 168 => '=A8', 169 => '=A9',\n# 170\
    \ => '=AA', 171 => '=AB', 172 => '=AC', 173 => '=AD', 174 => '=AE',\n# 175 =>\
    \ '=AF', 176 => '=B0', 177 => '=B1', 178 => '=B2', 179 => '=B3',\n# 180 => '=B4',\
    \ 181 => '=B5', 182 => '=B6', 183 => '=B7', 184 => '=B8',\n# 185 => '=B9', 186\
    \ => '=BA', 187 => '=BB', 188 => '=BC', 189 => '=BD',\n# 190 => '=BE', 191 =>\
    \ '=BF', 192 => '=C0', 193 => '=C1', 194 => '=C2',\n# 195 => '=C3', 196 => '=C4',\
    \ 197 => '=C5', 198 => '=C6', 199 => '=C7',\n# 200 => '=C8', 201 => '=C9', 202\
    \ => '=CA', 203 => '=CB', 204 => '=CC',\n# 205 => '=CD', 206 => '=CE', 207 =>\
    \ '=CF', 208 => '=D0', 209 => '=D1',\n# 210 => '=D2', 211 => '=D3', 212 => '=D4',\
    \ 213 => '=D5', 214 => '=D6',\n# 215 => '=D7', 216 => '=D8', 217 => '=D9', 218\
    \ => '=DA', 219 => '=DB',\n# 220 => '=DC', 221 => '=DD', 222 => '=DE', 223 =>\
    \ '=DF', 224 => '=E0',\n# 225 => '=E1', 226 => '=E2', 227 => '=E3', 228 => '=E4',\
    \ 229 => '=E5',\n# 230 => '=E6', 231 => '=E7', 232 => '=E8', 233 => '=E9', 234\
    \ => '=EA',\n# 235 => '=EB', 236 => '=EC', 237 => '=ED', 238 => '=EE', 239 =>\
    \ '=EF',\n# 240 => '=F0', 241 => '=F1', 242 => '=F2', 243 => '=F3', 244 => '=F4',\n\
    # 245 => '=F5', 246 => '=F6', 247 => '=F7', 248 => '=F8', 249 => '=F9',\n# 250\
    \ => '=FA', 251 => '=FB', 252 => '=FC', 253 => '=FD', 254 => '=FE',\n# 255 =>\
    \ '=FF',\n# ];\n# \n# private static array $safeMapShare = [];\n# \n# /**\n# *\
    \ A map of non-encoded ascii characters.\n# *\n# * @var string[]\n# *\n# * @internal\n\
    # */\n# protected array $safeMap = [];\n# \n# public function __construct()\n\
    # {\n# $id = static::class;\n# if (!isset(self::$safeMapShare[$id])) {\n# $this->initSafeMap();\n\
    # self::$safeMapShare[$id] = $this->safeMap;\n# } else {\n# $this->safeMap = self::$safeMapShare[$id];\n\
    # }\n# }\n# \n# protected function initSafeMap(): void\n# {\n# foreach (array_merge([0x09,\
    \ 0x20], range(0x21, 0x3C), range(0x3E, 0x7E)) as $byte) {\n# $this->safeMap[$byte]\
    \ = \\chr($byte);\n# }\n# }\n# \n# /**\n# * Takes an unencoded string and produces\
    \ a QP encoded string from it.\n# *\n# * QP encoded strings have a maximum line\
    \ length of 76 characters.\n# * If the first line needs to be shorter, indicate\
    \ the difference with\n# * $firstLineOffset."
- name: encodeByteSequence
  visibility: private
  parameters:
  - name: bytes
  - name: '&$size'
  comment: '# * Encode the given byte array into a verbatim QP form.'
- name: standardize
  visibility: private
  parameters:
  - name: string
  comment: '# * Make sure CRLF is correct and HT/SPACE are in valid places.'
traits:
- Symfony\Component\Mime\CharacterStream
interfaces:
- EncoderInterface
