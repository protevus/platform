name: FormBuilderInterface
class_comment: null
dependencies: []
properties: []
methods:
- name: add
  visibility: public
  parameters:
  - name: child
  - name: type
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * @author Bernhard Schussek <bschussek@gmail.com>

    # *

    # * @extends \Traversable<string, FormBuilderInterface>

    # */

    # interface FormBuilderInterface extends \Traversable, \Countable, FormConfigBuilderInterface

    # {

    # /**

    # * Adds a new field to this group. A field must have a unique name within

    # * the group. Otherwise the existing field is overwritten.

    # *

    # * If you add a nested group, this group should also be represented in the

    # * object hierarchy.

    # *

    # * @param array<string, mixed> $options'
- name: create
  visibility: public
  parameters:
  - name: name
  - name: type
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * Creates a form builder.

    # *

    # * @param string               $name    The name of the form or the name of the
    property

    # * @param string|null          $type    The type of the form or null if name
    is a property

    # * @param array<string, mixed> $options'
- name: get
  visibility: public
  parameters:
  - name: name
  comment: '# * Returns a child by name.

    # *

    # * @throws Exception\InvalidArgumentException if the given child does not exist'
- name: remove
  visibility: public
  parameters:
  - name: name
  comment: '# * Removes the field with the given name.'
- name: has
  visibility: public
  parameters:
  - name: name
  comment: '# * Returns whether a field with the given name exists.'
- name: all
  visibility: public
  parameters: []
  comment: '# * Returns the children.

    # *

    # * @return array<string, self>'
- name: getForm
  visibility: public
  parameters: []
  comment: '# * Creates the form.'
traits: []
interfaces: []
