name: ResolvedFormTypeTest
class_comment: '# * @author Bernhard Schussek <bschussek@gmail.com>'
dependencies:
- name: TestCase
  type: class
  source: PHPUnit\Framework\TestCase
- name: EventDispatcher
  type: class
  source: Symfony\Component\EventDispatcher\EventDispatcher
- name: AbstractType
  type: class
  source: Symfony\Component\Form\AbstractType
- name: AbstractTypeExtension
  type: class
  source: Symfony\Component\Form\AbstractTypeExtension
- name: FormType
  type: class
  source: Symfony\Component\Form\Extension\Core\Type\FormType
- name: FormBuilder
  type: class
  source: Symfony\Component\Form\FormBuilder
- name: FormBuilderInterface
  type: class
  source: Symfony\Component\Form\FormBuilderInterface
- name: FormFactory
  type: class
  source: Symfony\Component\Form\FormFactory
- name: FormInterface
  type: class
  source: Symfony\Component\Form\FormInterface
- name: FormRegistry
  type: class
  source: Symfony\Component\Form\FormRegistry
- name: FormView
  type: class
  source: Symfony\Component\Form\FormView
- name: ResolvedFormType
  type: class
  source: Symfony\Component\Form\ResolvedFormType
- name: ResolvedFormTypeFactory
  type: class
  source: Symfony\Component\Form\ResolvedFormTypeFactory
- name: ConfigurableFormType
  type: class
  source: Symfony\Component\Form\Tests\Fixtures\ConfigurableFormType
- name: MissingOptionsException
  type: class
  source: Symfony\Component\OptionsResolver\Exception\MissingOptionsException
- name: OptionsResolver
  type: class
  source: Symfony\Component\OptionsResolver\OptionsResolver
- name: UsageTrackingTrait
  type: class
  source: UsageTrackingTrait
- name: UsageTrackingTrait
  type: class
  source: UsageTrackingTrait
- name: UsageTrackingTrait
  type: class
  source: UsageTrackingTrait
properties: []
methods:
- name: testBlockPrefixDefaultsToFQCNIfNoName
  visibility: public
  parameters:
  - name: typeClass
  - name: blockPrefix
  comment: "# * @author Bernhard Schussek <bschussek@gmail.com>\n# */\n# class ResolvedFormTypeTest\
    \ extends TestCase\n# {\n# private array $calls;\n# private UsageTrackingParentFormType\
    \ $parentType;\n# private UsageTrackingFormType $type;\n# private UsageTrackingFormTypeExtension\
    \ $extension1;\n# private UsageTrackingFormTypeExtension $extension2;\n# private\
    \ ResolvedFormType $parentResolvedType;\n# private ResolvedFormType $resolvedType;\n\
    # private FormFactory $formFactory;\n# \n# protected function setUp(): void\n\
    # {\n# $this->calls = [];\n# $this->parentType = new UsageTrackingParentFormType($this->calls);\n\
    # $this->type = new UsageTrackingFormType($this->calls);\n# $this->extension1\
    \ = new UsageTrackingFormTypeExtension($this->calls, ['c' => 'c_default']);\n\
    # $this->extension2 = new UsageTrackingFormTypeExtension($this->calls, ['d' =>\
    \ 'd_default']);\n# $this->parentResolvedType = new ResolvedFormType($this->parentType);\n\
    # $this->resolvedType = new ResolvedFormType($this->type, [$this->extension1,\
    \ $this->extension2], $this->parentResolvedType);\n# $this->formFactory = new\
    \ FormFactory(new FormRegistry([], new ResolvedFormTypeFactory()));\n# }\n# \n\
    # public function testGetOptionsResolver()\n# {\n# $givenOptions = ['a' => 'a_custom',\
    \ 'c' => 'c_custom', 'foo' => 'bar'];\n# $resolvedOptions = ['a' => 'a_custom',\
    \ 'b' => 'b_default', 'c' => 'c_custom', 'd' => 'd_default', 'foo' => 'bar'];\n\
    # \n# $resolver = $this->resolvedType->getOptionsResolver();\n# \n# $this->assertEquals($resolvedOptions,\
    \ $resolver->resolve($givenOptions));\n# }\n# \n# public function testCreateBuilder()\n\
    # {\n# $givenOptions = ['a' => 'a_custom', 'c' => 'c_custom', 'foo' => 'bar'];\n\
    # $resolvedOptions = ['b' => 'b_default', 'd' => 'd_default', 'a' => 'a_custom',\
    \ 'c' => 'c_custom', 'foo' => 'bar'];\n# \n# $builder = $this->resolvedType->createBuilder($this->formFactory,\
    \ 'name', $givenOptions);\n# \n# $this->assertSame($this->resolvedType, $builder->getType());\n\
    # $this->assertSame($resolvedOptions, $builder->getOptions());\n# $this->assertNull($builder->getDataClass());\n\
    # }\n# \n# public function testCreateBuilderWithDataClassOption()\n# {\n# $resolvedOptions\
    \ = [\n# 'a' => 'a_default',\n# 'b' => 'b_default',\n# 'c' => 'c_default',\n#\
    \ 'd' => 'd_default',\n# 'data_class' => \\stdClass::class,\n# 'foo' => 'bar',\n\
    # ];\n# \n# $builder = $this->resolvedType->createBuilder($this->formFactory,\
    \ 'name', [\n# 'data_class' => \\stdClass::class,\n# 'foo' => 'bar',\n# ]);\n\
    # \n# $this->assertSame($this->resolvedType, $builder->getType());\n# $this->assertSame($resolvedOptions,\
    \ $builder->getOptions());\n# $this->assertSame(\\stdClass::class, $builder->getDataClass());\n\
    # }\n# \n# public function testFailsCreateBuilderOnInvalidFormOptionsResolution()\n\
    # {\n# $this->expectException(MissingOptionsException::class);\n# $this->expectExceptionMessage(\\\
    sprintf('An error has occurred resolving the options of the form \"%s\": The required\
    \ option \"foo\" is missing.', UsageTrackingFormType::class));\n# \n# $this->resolvedType->createBuilder($this->formFactory,\
    \ 'name');\n# }\n# \n# public function testBuildForm()\n# {\n# $this->resolvedType->buildForm(new\
    \ FormBuilder(null, null, new EventDispatcher(), $this->formFactory), []);\n#\
    \ \n# $this->assertSame([$this->parentType, $this->type, $this->extension1, $this->extension2],\
    \ $this->calls['buildForm']);\n# }\n# \n# public function testCreateView()\n#\
    \ {\n# $view = $this->resolvedType->createView($this->formFactory->create());\n\
    # \n# $this->assertInstanceOf(FormView::class, $view);\n# $this->assertNull($view->parent);\n\
    # }\n# \n# public function testCreateViewWithParent()\n# {\n# $parentView = new\
    \ FormView();\n# \n# $view = $this->resolvedType->createView($this->formFactory->create(),\
    \ $parentView);\n# \n# $this->assertInstanceOf(FormView::class, $view);\n# $this->assertSame($parentView,\
    \ $view->parent);\n# }\n# \n# public function testBuildView()\n# {\n# $this->resolvedType->buildView(new\
    \ FormView(), $this->formFactory->create(), []);\n# \n# $this->assertSame([$this->parentType,\
    \ $this->type, $this->extension1, $this->extension2], $this->calls['buildView']);\n\
    # }\n# \n# public function testFinishView()\n# {\n# $this->resolvedType->finishView(new\
    \ FormView(), $this->formFactory->create(), []);\n# \n# $this->assertSame([$this->parentType,\
    \ $this->type, $this->extension1, $this->extension2], $this->calls['finishView']);\n\
    # }\n# \n# public function testGetBlockPrefix()\n# {\n# $resolvedType = new ResolvedFormType(new\
    \ ConfigurableFormType());\n# \n# $this->assertSame('configurable_form_prefix',\
    \ $resolvedType->getBlockPrefix());\n# }\n# \n# /**\n# * @dataProvider provideTypeClassBlockPrefixTuples"
- name: provideTypeClassBlockPrefixTuples
  visibility: public
  parameters: []
  comment: null
- name: __construct
  visibility: public
  parameters:
  - name: '&$calls'
  comment: null
- name: getParent
  visibility: public
  parameters: []
  comment: null
- name: configureOptions
  visibility: public
  parameters:
  - name: resolver
  comment: null
- name: __construct
  visibility: public
  parameters:
  - name: '&$calls'
  comment: null
- name: configureOptions
  visibility: public
  parameters:
  - name: resolver
  comment: null
- name: __construct
  visibility: public
  parameters:
  - name: '&$calls'
  - name: defaultOptions
  comment: null
- name: configureOptions
  visibility: public
  parameters:
  - name: resolver
  comment: null
- name: getExtendedTypes
  visibility: public
  parameters: []
  comment: null
- name: buildForm
  visibility: public
  parameters:
  - name: builder
  - name: options
  comment: null
- name: buildView
  visibility: public
  parameters:
  - name: view
  - name: form
  - name: options
  comment: null
- name: finishView
  visibility: public
  parameters:
  - name: view
  - name: form
  - name: options
  comment: null
traits:
- PHPUnit\Framework\TestCase
- Symfony\Component\EventDispatcher\EventDispatcher
- Symfony\Component\Form\AbstractType
- Symfony\Component\Form\AbstractTypeExtension
- Symfony\Component\Form\Extension\Core\Type\FormType
- Symfony\Component\Form\FormBuilder
- Symfony\Component\Form\FormBuilderInterface
- Symfony\Component\Form\FormFactory
- Symfony\Component\Form\FormInterface
- Symfony\Component\Form\FormRegistry
- Symfony\Component\Form\FormView
- Symfony\Component\Form\ResolvedFormType
- Symfony\Component\Form\ResolvedFormTypeFactory
- Symfony\Component\Form\Tests\Fixtures\ConfigurableFormType
- Symfony\Component\OptionsResolver\Exception\MissingOptionsException
- Symfony\Component\OptionsResolver\OptionsResolver
- UsageTrackingTrait
- UsageTrackingTrait
- UsageTrackingTrait
interfaces: []
