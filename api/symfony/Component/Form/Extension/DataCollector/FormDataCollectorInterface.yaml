name: FormDataCollectorInterface
class_comment: null
dependencies:
- name: FormInterface
  type: class
  source: Symfony\Component\Form\FormInterface
- name: FormView
  type: class
  source: Symfony\Component\Form\FormView
- name: DataCollectorInterface
  type: class
  source: Symfony\Component\HttpKernel\DataCollector\DataCollectorInterface
- name: Data
  type: class
  source: Symfony\Component\VarDumper\Cloner\Data
properties: []
methods:
- name: collectConfiguration
  visibility: public
  parameters:
  - name: form
  comment: '# * Collects and structures information about forms.

    # *

    # * @author Bernhard Schussek <bschussek@gmail.com>

    # */

    # interface FormDataCollectorInterface extends DataCollectorInterface

    # {

    # /**

    # * Stores configuration data of the given form and its children.'
- name: collectDefaultData
  visibility: public
  parameters:
  - name: form
  comment: '# * Stores the default data of the given form and its children.'
- name: collectSubmittedData
  visibility: public
  parameters:
  - name: form
  comment: '# * Stores the submitted data of the given form and its children.'
- name: collectViewVariables
  visibility: public
  parameters:
  - name: view
  comment: '# * Stores the view variables of the given form view and its children.'
- name: associateFormWithView
  visibility: public
  parameters:
  - name: form
  - name: view
  comment: '# * Specifies that the given objects represent the same conceptual form.'
- name: buildPreliminaryFormTree
  visibility: public
  parameters:
  - name: form
  comment: '# * Assembles the data collected about the given form and its children
    as

    # * a tree-like data structure.

    # *

    # * The result can be queried using {@link getData()}.'
- name: buildFinalFormTree
  visibility: public
  parameters:
  - name: form
  - name: view
  comment: '# * Assembles the data collected about the given form and its children
    as

    # * a tree-like data structure.

    # *

    # * The result can be queried using {@link getData()}.

    # *

    # * Contrary to {@link buildPreliminaryFormTree()}, a {@link FormView}

    # * object has to be passed. The tree structure of this view object will be

    # * used for structuring the resulting data. That means, if a child is

    # * present in the view, but not in the form, it will be present in the final

    # * data array anyway.

    # *

    # * When {@link FormView} instances are present in the view tree, for which

    # * no corresponding {@link FormInterface} objects can be found in the form

    # * tree, only the view data will be included in the result. If a

    # * corresponding {@link FormInterface} exists otherwise, call

    # * {@link associateFormWithView()} before calling this method.'
- name: getData
  visibility: public
  parameters: []
  comment: '# * Returns all collected data.'
traits:
- Symfony\Component\Form\FormInterface
- Symfony\Component\Form\FormView
- Symfony\Component\HttpKernel\DataCollector\DataCollectorInterface
- Symfony\Component\VarDumper\Cloner\Data
interfaces: []
