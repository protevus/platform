name: FormValidator
class_comment: '# * @author Bernhard Schussek <bschussek@gmail.com>'
dependencies:
- name: FormInterface
  type: class
  source: Symfony\Component\Form\FormInterface
- name: Constraint
  type: class
  source: Symfony\Component\Validator\Constraint
- name: Composite
  type: class
  source: Symfony\Component\Validator\Constraints\Composite
- name: GroupSequence
  type: class
  source: Symfony\Component\Validator\Constraints\GroupSequence
- name: Valid
  type: class
  source: Symfony\Component\Validator\Constraints\Valid
- name: ConstraintValidator
  type: class
  source: Symfony\Component\Validator\ConstraintValidator
- name: UnexpectedTypeException
  type: class
  source: Symfony\Component\Validator\Exception\UnexpectedTypeException
properties: []
methods:
- name: getValidationGroups
  visibility: private
  parameters:
  - name: form
  comment: "# * @author Bernhard Schussek <bschussek@gmail.com>\n# */\n# class FormValidator\
    \ extends ConstraintValidator\n# {\n# /**\n# * @var \\SplObjectStorage<FormInterface,\
    \ array<int, string|string[]|GroupSequence>>\n# */\n# private \\SplObjectStorage\
    \ $resolvedGroups;\n# \n# public function validate(mixed $form, Constraint $formConstraint):\
    \ void\n# {\n# if (!$formConstraint instanceof Form) {\n# throw new UnexpectedTypeException($formConstraint,\
    \ Form::class);\n# }\n# \n# if (!$form instanceof FormInterface) {\n# return;\n\
    # }\n# \n# /* @var FormInterface $form */\n# $config = $form->getConfig();\n#\
    \ \n# $validator = $this->context->getValidator()->inContext($this->context);\n\
    # \n# if ($form->isSubmitted() && $form->isSynchronized()) {\n# // Validate the\
    \ form data only if transformation succeeded\n# $groups = $this->getValidationGroups($form);\n\
    # \n# if (!$groups) {\n# return;\n# }\n# \n# $data = $form->getData();\n# // Validate\
    \ the data against its own constraints\n# $validateDataGraph = $form->isRoot()\n\
    # && (\\is_object($data) || \\is_array($data))\n# && (($groups && \\is_array($groups))\
    \ || ($groups instanceof GroupSequence && $groups->groups))\n# ;\n# \n# // Validate\
    \ the data against the constraints defined in the form\n# /** @var Constraint[]\
    \ $constraints */\n# $constraints = $config->getOption('constraints', []);\n#\
    \ \n# $hasChildren = $form->count() > 0;\n# \n# if ($hasChildren && $form->isRoot())\
    \ {\n# $this->resolvedGroups = new \\SplObjectStorage();\n# }\n# \n# if ($groups\
    \ instanceof GroupSequence) {\n# // Validate the data, the form AND nested fields\
    \ in sequence\n# $violationsCount = $this->context->getViolations()->count();\n\
    # \n# foreach ($groups->groups as $group) {\n# if ($validateDataGraph) {\n# $validator->atPath('data')->validate($data,\
    \ null, $group);\n# }\n# \n# if ($groupedConstraints = self::getConstraintsInGroups($constraints,\
    \ $group)) {\n# $validator->atPath('data')->validate($data, $groupedConstraints,\
    \ $group);\n# }\n# \n# foreach ($form->all() as $field) {\n# if ($field->isSubmitted())\
    \ {\n# // remember to validate this field in one group only\n# // otherwise resolving\
    \ the groups would reuse the same\n# // sequence recursively, thus some fields\
    \ could fail\n# // in different steps without breaking early enough\n# $this->resolvedGroups[$field]\
    \ = (array) $group;\n# $fieldFormConstraint = new Form();\n# $fieldFormConstraint->groups\
    \ = $group;\n# $this->context->setNode($this->context->getValue(), $field, $this->context->getMetadata(),\
    \ $this->context->getPropertyPath());\n# $validator->atPath(\\sprintf('children[%s]',\
    \ $field->getName()))->validate($field, $fieldFormConstraint, $group);\n# }\n\
    # }\n# \n# if ($violationsCount < $this->context->getViolations()->count()) {\n\
    # break;\n# }\n# }\n# } else {\n# if ($validateDataGraph) {\n# $validator->atPath('data')->validate($data,\
    \ null, $groups);\n# }\n# \n# $groupedConstraints = [];\n# \n# foreach ($constraints\
    \ as $constraint) {\n# // For the \"Valid\" constraint, validate the data in all\
    \ groups\n# if ($constraint instanceof Valid) {\n# if (\\is_object($data) || \\\
    is_array($data)) {\n# $validator->atPath('data')->validate($data, $constraint,\
    \ $groups);\n# }\n# \n# continue;\n# }\n# \n# // Otherwise validate a constraint\
    \ only once for the first\n# // matching group\n# foreach ($groups as $group)\
    \ {\n# if (\\in_array($group, $constraint->groups, true)) {\n# $groupedConstraints[$group][]\
    \ = $constraint;\n# \n# // Prevent duplicate validation\n# if (!$constraint instanceof\
    \ Composite) {\n# continue 2;\n# }\n# }\n# }\n# }\n# \n# foreach ($groupedConstraints\
    \ as $group => $constraint) {\n# $validator->atPath('data')->validate($data, $constraint,\
    \ $group);\n# }\n# \n# foreach ($form->all() as $field) {\n# if ($field->isSubmitted())\
    \ {\n# $this->resolvedGroups[$field] = $groups;\n# $this->context->setNode($this->context->getValue(),\
    \ $field, $this->context->getMetadata(), $this->context->getPropertyPath());\n\
    # $validator->atPath(\\sprintf('children[%s]', $field->getName()))->validate($field,\
    \ $formConstraint);\n# }\n# }\n# }\n# \n# if ($hasChildren && $form->isRoot())\
    \ {\n# // destroy storage to avoid memory leaks\n# $this->resolvedGroups = new\
    \ \\SplObjectStorage();\n# }\n# } elseif (!$form->isSynchronized()) {\n# $childrenSynchronized\
    \ = true;\n# \n# /** @var FormInterface $child */\n# foreach ($form as $child)\
    \ {\n# if (!$child->isSynchronized()) {\n# $childrenSynchronized = false;\n# $this->context->setNode($this->context->getValue(),\
    \ $child, $this->context->getMetadata(), $this->context->getPropertyPath());\n\
    # $validator->atPath(\\sprintf('children[%s]', $child->getName()))->validate($child,\
    \ $formConstraint);\n# }\n# }\n# \n# // Mark the form with an error if it is not\
    \ synchronized BUT all\n# // of its children are synchronized. If any child is\
    \ not\n# // synchronized, an error is displayed there already and showing\n# //\
    \ a second error in its parent form is pointless, or worse, may\n# // lead to\
    \ duplicate errors if error bubbling is enabled on the\n# // child.\n# // See\
    \ also https://github.com/symfony/symfony/issues/4359\n# if ($childrenSynchronized)\
    \ {\n# $clientDataAsString = \\is_scalar($form->getViewData())\n# ? (string) $form->getViewData()\n\
    # : get_debug_type($form->getViewData());\n# \n# $failure = $form->getTransformationFailure();\n\
    # \n# $this->context->setConstraint($formConstraint);\n# $this->context->buildViolation($failure->getInvalidMessage()\
    \ ?? $config->getOption('invalid_message'))\n# ->setParameters(array_replace(\n\
    # ['{{ value }}' => $clientDataAsString],\n# $config->getOption('invalid_message_parameters'),\n\
    # $failure->getInvalidMessageParameters()\n# ))\n# ->setInvalidValue($form->getViewData())\n\
    # ->setCode(Form::NOT_SYNCHRONIZED_ERROR)\n# ->setCause($failure)\n# ->addViolation();\n\
    # }\n# }\n# \n# // Mark the form with an error if it contains extra fields\n#\
    \ if (!$config->getOption('allow_extra_fields') && \\count($form->getExtraData())\
    \ > 0) {\n# $this->context->setConstraint($formConstraint);\n# $this->context->buildViolation($config->getOption('extra_fields_message',\
    \ ''))\n# ->setParameter('{{ extra_fields }}', '\"'.implode('\", \"', array_keys($form->getExtraData())).'\"\
    ')\n# ->setPlural(\\count($form->getExtraData()))\n# ->setInvalidValue($form->getExtraData())\n\
    # ->setCode(Form::NO_SUCH_FIELD_ERROR)\n# ->addViolation();\n# }\n# }\n# \n# /**\n\
    # * Returns the validation groups of the given form.\n# *\n# * @return string|GroupSequence|array<string|GroupSequence>"
- name: resolveValidationGroups
  visibility: private
  parameters:
  - name: groups
  - name: form
  comment: '# * Post-processes the validation groups option for a given form.

    # *

    # * @param string|GroupSequence|array<string|GroupSequence>|callable $groups The
    validation groups

    # *

    # * @return GroupSequence|array<string|GroupSequence>'
- name: getConstraintsInGroups
  visibility: private
  parameters:
  - name: constraints
  - name: group
  comment: null
traits:
- Symfony\Component\Form\FormInterface
- Symfony\Component\Validator\Constraint
- Symfony\Component\Validator\Constraints\Composite
- Symfony\Component\Validator\Constraints\GroupSequence
- Symfony\Component\Validator\Constraints\Valid
- Symfony\Component\Validator\ConstraintValidator
- Symfony\Component\Validator\Exception\UnexpectedTypeException
interfaces: []
