name: NumberToLocalizedStringTransformer
class_comment: '# * Transforms between a number type and a localized number with grouping

  # * (each thousand) and comma separators.

  # *

  # * @author Bernhard Schussek <bschussek@gmail.com>

  # * @author Florian Eckerstorfer <florian@eckerstorfer.org>

  # *

  # * @implements DataTransformerInterface<int|float, string>'
dependencies:
- name: DataTransformerInterface
  type: class
  source: Symfony\Component\Form\DataTransformerInterface
- name: TransformationFailedException
  type: class
  source: Symfony\Component\Form\Exception\TransformationFailedException
properties: []
methods:
- name: transform
  visibility: public
  parameters:
  - name: value
  comment: "# * Transforms between a number type and a localized number with grouping\n\
    # * (each thousand) and comma separators.\n# *\n# * @author Bernhard Schussek\
    \ <bschussek@gmail.com>\n# * @author Florian Eckerstorfer <florian@eckerstorfer.org>\n\
    # *\n# * @implements DataTransformerInterface<int|float, string>\n# */\n# class\
    \ NumberToLocalizedStringTransformer implements DataTransformerInterface\n# {\n\
    # protected bool $grouping;\n# protected int $roundingMode;\n# \n# public function\
    \ __construct(\n# private ?int $scale = null,\n# ?bool $grouping = false,\n# ?int\
    \ $roundingMode = \\NumberFormatter::ROUND_HALFUP,\n# private ?string $locale\
    \ = null,\n# ) {\n# $this->grouping = $grouping ?? false;\n# $this->roundingMode\
    \ = $roundingMode ?? \\NumberFormatter::ROUND_HALFUP;\n# }\n# \n# /**\n# * Transforms\
    \ a number type into localized number.\n# *\n# * @param int|float|null $value\
    \ Number value\n# *\n# * @throws TransformationFailedException if the given value\
    \ is not numeric\n# *                                       or if the value cannot\
    \ be transformed"
- name: reverseTransform
  visibility: public
  parameters:
  - name: value
  comment: '# * Transforms a localized number into an integer or float.

    # *

    # * @param string $value The localized value

    # *

    # * @throws TransformationFailedException if the given value is not a string

    # *                                       or if the value cannot be transformed'
- name: getNumberFormatter
  visibility: protected
  parameters: []
  comment: '# * Returns a preconfigured \NumberFormatter instance.'
- name: castParsedValue
  visibility: protected
  parameters:
  - name: value
  comment: '# * @internal'
- name: round
  visibility: private
  parameters:
  - name: number
  comment: '# * Rounds a number according to the configured scale and rounding mode.'
traits:
- Symfony\Component\Form\DataTransformerInterface
- Symfony\Component\Form\Exception\TransformationFailedException
interfaces:
- DataTransformerInterface
- DataTransformerInterface
