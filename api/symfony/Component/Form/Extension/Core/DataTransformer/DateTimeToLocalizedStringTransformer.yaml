name: DateTimeToLocalizedStringTransformer
class_comment: '# * Transforms between a normalized time and a localized time string.

  # *

  # * @author Bernhard Schussek <bschussek@gmail.com>

  # * @author Florian Eckerstorfer <florian@eckerstorfer.org>

  # *

  # * @extends BaseDateTimeTransformer<string>'
dependencies:
- name: TransformationFailedException
  type: class
  source: Symfony\Component\Form\Exception\TransformationFailedException
- name: UnexpectedTypeException
  type: class
  source: Symfony\Component\Form\Exception\UnexpectedTypeException
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: inputTimezone
    default: 'null'
  - name: outputTimezone
    default: 'null'
  - name: dateFormat
    default: 'null'
  - name: timeFormat
    default: 'null'
  - name: calendar
    default: \IntlDateFormatter::GREGORIAN
  - name: pattern
    default: 'null'
  comment: "# * Transforms between a normalized time and a localized time string.\n\
    # *\n# * @author Bernhard Schussek <bschussek@gmail.com>\n# * @author Florian\
    \ Eckerstorfer <florian@eckerstorfer.org>\n# *\n# * @extends BaseDateTimeTransformer<string>\n\
    # */\n# class DateTimeToLocalizedStringTransformer extends BaseDateTimeTransformer\n\
    # {\n# private int $dateFormat;\n# private int $timeFormat;\n# \n# /**\n# * @see\
    \ BaseDateTimeTransformer::formats for available format options\n# *\n# * @param\
    \ string|null $inputTimezone  The name of the input timezone\n# * @param string|null\
    \ $outputTimezone The name of the output timezone\n# * @param int|null    $dateFormat\
    \     The date format\n# * @param int|null    $timeFormat     The time format\n\
    # * @param int         $calendar       One of the \\IntlDateFormatter calendar\
    \ constants\n# * @param string|null $pattern        A pattern to pass to \\IntlDateFormatter\n\
    # *\n# * @throws UnexpectedTypeException If a format is not supported or if a\
    \ timezone is not a string"
- name: transform
  visibility: public
  parameters:
  - name: dateTime
  comment: '# * Transforms a normalized date into a localized date string/array.

    # *

    # * @param \DateTimeInterface $dateTime A DateTimeInterface object

    # *

    # * @throws TransformationFailedException if the given value is not a \DateTimeInterface

    # *                                       or if the date could not be transformed'
- name: reverseTransform
  visibility: public
  parameters:
  - name: value
  comment: '# * Transforms a localized date string/array into a normalized date.

    # *

    # * @param string $value Localized date string

    # *

    # * @throws TransformationFailedException if the given value is not a string,

    # *                                       if the date could not be parsed'
- name: getIntlDateFormatter
  visibility: protected
  parameters:
  - name: ignoreTimezone
    default: 'false'
  comment: '# * Returns a preconfigured IntlDateFormatter instance.

    # *

    # * @param bool $ignoreTimezone Use UTC regardless of the configured timezone

    # *

    # * @throws TransformationFailedException in case the date formatter cannot be
    constructed'
- name: isPatternDateOnly
  visibility: protected
  parameters: []
  comment: '# * Checks if the pattern contains only a date.'
traits:
- Symfony\Component\Form\Exception\TransformationFailedException
- Symfony\Component\Form\Exception\UnexpectedTypeException
interfaces: []
