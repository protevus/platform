name: DateIntervalToArrayTransformer
class_comment: "# * Transforms between a normalized date interval and an interval\
  \ string/array.\n# *\n# * @author Steffen Ro\xDFkamp <steffen.rosskamp@gimmickmedia.de>\n\
  # *\n# * @implements DataTransformerInterface<\\DateInterval, array>"
dependencies:
- name: DataTransformerInterface
  type: class
  source: Symfony\Component\Form\DataTransformerInterface
- name: TransformationFailedException
  type: class
  source: Symfony\Component\Form\Exception\TransformationFailedException
- name: UnexpectedTypeException
  type: class
  source: Symfony\Component\Form\Exception\UnexpectedTypeException
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: fields
    default: 'null'
  - name: pad
    default: 'false'
  comment: "# * Transforms between a normalized date interval and an interval string/array.\n\
    # *\n# * @author Steffen Ro\xDFkamp <steffen.rosskamp@gimmickmedia.de>\n# *\n\
    # * @implements DataTransformerInterface<\\DateInterval, array>\n# */\n# class\
    \ DateIntervalToArrayTransformer implements DataTransformerInterface\n# {\n# public\
    \ const YEARS = 'years';\n# public const MONTHS = 'months';\n# public const DAYS\
    \ = 'days';\n# public const HOURS = 'hours';\n# public const MINUTES = 'minutes';\n\
    # public const SECONDS = 'seconds';\n# public const INVERT = 'invert';\n# \n#\
    \ private const AVAILABLE_FIELDS = [\n# self::YEARS => 'y',\n# self::MONTHS =>\
    \ 'm',\n# self::DAYS => 'd',\n# self::HOURS => 'h',\n# self::MINUTES => 'i',\n\
    # self::SECONDS => 's',\n# self::INVERT => 'r',\n# ];\n# private array $fields;\n\
    # \n# /**\n# * @param string[]|null $fields The date fields\n# * @param bool \
    \         $pad    Whether to use padding"
- name: transform
  visibility: public
  parameters:
  - name: dateInterval
  comment: '# * Transforms a normalized date interval into an interval array.

    # *

    # * @param \DateInterval $dateInterval Normalized date interval

    # *

    # * @throws UnexpectedTypeException if the given value is not a \DateInterval
    instance'
- name: reverseTransform
  visibility: public
  parameters:
  - name: value
  comment: '# * Transforms an interval array into a normalized date interval.

    # *

    # * @param array $value Interval array

    # *

    # * @throws UnexpectedTypeException       if the given value is not an array

    # * @throws TransformationFailedException if the value could not be transformed'
traits:
- Symfony\Component\Form\DataTransformerInterface
- Symfony\Component\Form\Exception\TransformationFailedException
- Symfony\Component\Form\Exception\UnexpectedTypeException
interfaces:
- DataTransformerInterface
- DataTransformerInterface
