name: FileType
class_comment: null
dependencies:
- name: AbstractType
  type: class
  source: Symfony\Component\Form\AbstractType
- name: PreSubmitEvent
  type: class
  source: Symfony\Component\Form\Event\PreSubmitEvent
- name: FileUploadError
  type: class
  source: Symfony\Component\Form\FileUploadError
- name: FormBuilderInterface
  type: class
  source: Symfony\Component\Form\FormBuilderInterface
- name: FormEvent
  type: class
  source: Symfony\Component\Form\FormEvent
- name: FormEvents
  type: class
  source: Symfony\Component\Form\FormEvents
- name: FormInterface
  type: class
  source: Symfony\Component\Form\FormInterface
- name: FormView
  type: class
  source: Symfony\Component\Form\FormView
- name: File
  type: class
  source: Symfony\Component\HttpFoundation\File\File
- name: Options
  type: class
  source: Symfony\Component\OptionsResolver\Options
- name: OptionsResolver
  type: class
  source: Symfony\Component\OptionsResolver\OptionsResolver
- name: TranslatorInterface
  type: class
  source: Symfony\Contracts\Translation\TranslatorInterface
properties: []
methods:
- name: __construct
  visibility: public
  parameters:
  - name: translator
    default: 'null'
  comment: null
- name: buildForm
  visibility: public
  parameters:
  - name: builder
  - name: options
  comment: null
- name: getMaxFilesize
  visibility: private
  parameters: []
  comment: "# @var PreSubmitEvent $event */\n# $form = $event->getForm();\n# $requestHandler\
    \ = $form->getConfig()->getRequestHandler();\n# \n# if ($options['multiple'])\
    \ {\n# $data = [];\n# $files = $event->getData();\n# \n# if (!\\is_array($files))\
    \ {\n# $files = [];\n# }\n# \n# foreach ($files as $file) {\n# if ($requestHandler->isFileUpload($file))\
    \ {\n# $data[] = $file;\n# \n# if (method_exists($requestHandler, 'getUploadFileError')\
    \ && null !== $errorCode = $requestHandler->getUploadFileError($file)) {\n# $form->addError($this->getFileUploadError($errorCode));\n\
    # }\n# }\n# }\n# \n# // Since the array is never considered empty in the view\
    \ data format\n# // on submission, we need to evaluate the configured empty data\
    \ here\n# if ([] === $data) {\n# $emptyData = $form->getConfig()->getEmptyData();\n\
    # $data = $emptyData instanceof \\Closure ? $emptyData($form, $data) : $emptyData;\n\
    # }\n# \n# $event->setData($data);\n# } elseif ($requestHandler->isFileUpload($event->getData())\
    \ && method_exists($requestHandler, 'getUploadFileError') && null !== $errorCode\
    \ = $requestHandler->getUploadFileError($event->getData())) {\n# $form->addError($this->getFileUploadError($errorCode));\n\
    # } elseif (!$requestHandler->isFileUpload($event->getData())) {\n# $event->setData(null);\n\
    # }\n# });\n# }\n# \n# public function buildView(FormView $view, FormInterface\
    \ $form, array $options): void\n# {\n# if ($options['multiple']) {\n# $view->vars['full_name']\
    \ .= '[]';\n# $view->vars['attr']['multiple'] = 'multiple';\n# }\n# \n# $view->vars\
    \ = array_replace($view->vars, [\n# 'type' => 'file',\n# 'value' => '',\n# ]);\n\
    # }\n# \n# public function finishView(FormView $view, FormInterface $form, array\
    \ $options): void\n# {\n# $view->vars['multipart'] = true;\n# }\n# \n# public\
    \ function configureOptions(OptionsResolver $resolver): void\n# {\n# $dataClass\
    \ = null;\n# if (class_exists(File::class)) {\n# $dataClass = static fn (Options\
    \ $options) => $options['multiple'] ? null : File::class;\n# }\n# \n# $emptyData\
    \ = static fn (Options $options) => $options['multiple'] ? [] : null;\n# \n# $resolver->setDefaults([\n\
    # 'compound' => false,\n# 'data_class' => $dataClass,\n# 'empty_data' => $emptyData,\n\
    # 'multiple' => false,\n# 'allow_file_upload' => true,\n# 'invalid_message' =>\
    \ 'Please select a valid file.',\n# ]);\n# }\n# \n# public function getBlockPrefix():\
    \ string\n# {\n# return 'file';\n# }\n# \n# private function getFileUploadError(int\
    \ $errorCode): FileUploadError\n# {\n# $messageParameters = [];\n# \n# if (\\\
    UPLOAD_ERR_INI_SIZE === $errorCode) {\n# [$limitAsString, $suffix] = $this->factorizeSizes(0,\
    \ self::getMaxFilesize());\n# $messageTemplate = 'The file is too large. Allowed\
    \ maximum size is {{ limit }} {{ suffix }}.';\n# $messageParameters = [\n# '{{\
    \ limit }}' => $limitAsString,\n# '{{ suffix }}' => $suffix,\n# ];\n# } elseif\
    \ (\\UPLOAD_ERR_FORM_SIZE === $errorCode) {\n# $messageTemplate = 'The file is\
    \ too large.';\n# } else {\n# $messageTemplate = 'The file could not be uploaded.';\n\
    # }\n# \n# if (null !== $this->translator) {\n# $message = $this->translator->trans($messageTemplate,\
    \ $messageParameters, 'validators');\n# } else {\n# $message = strtr($messageTemplate,\
    \ $messageParameters);\n# }\n# \n# return new FileUploadError($message, $messageTemplate,\
    \ $messageParameters);\n# }\n# \n# /**\n# * Returns the maximum size of an uploaded\
    \ file as configured in php.ini.\n# *\n# * This method should be kept in sync\
    \ with Symfony\\Component\\HttpFoundation\\File\\UploadedFile::getMaxFilesize()."
- name: factorizeSizes
  visibility: private
  parameters:
  - name: size
  - name: limit
  comment: '# * Converts the limit to the smallest possible number

    # * (i.e. try "MB", then "kB", then "bytes").

    # *

    # * This method should be kept in sync with Symfony\Component\Validator\Constraints\FileValidator::factorizeSizes().'
- name: moreDecimalsThan
  visibility: private
  parameters:
  - name: double
  - name: numberOfDecimals
  comment: '# * This method should be kept in sync with Symfony\Component\Validator\Constraints\FileValidator::moreDecimalsThan().'
traits:
- Symfony\Component\Form\AbstractType
- Symfony\Component\Form\Event\PreSubmitEvent
- Symfony\Component\Form\FileUploadError
- Symfony\Component\Form\FormBuilderInterface
- Symfony\Component\Form\FormEvent
- Symfony\Component\Form\FormEvents
- Symfony\Component\Form\FormInterface
- Symfony\Component\Form\FormView
- Symfony\Component\HttpFoundation\File\File
- Symfony\Component\OptionsResolver\Options
- Symfony\Component\OptionsResolver\OptionsResolver
- Symfony\Contracts\Translation\TranslatorInterface
interfaces: []
