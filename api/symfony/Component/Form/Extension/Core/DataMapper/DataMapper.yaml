name: DataMapper
class_comment: '# * Maps arrays/objects to/from forms using data accessors.

  # *

  # * @author Bernhard Schussek <bschussek@gmail.com>'
dependencies:
- name: DataAccessorInterface
  type: class
  source: Symfony\Component\Form\DataAccessorInterface
- name: DataMapperInterface
  type: class
  source: Symfony\Component\Form\DataMapperInterface
- name: UnexpectedTypeException
  type: class
  source: Symfony\Component\Form\Exception\UnexpectedTypeException
- name: CallbackAccessor
  type: class
  source: Symfony\Component\Form\Extension\Core\DataAccessor\CallbackAccessor
- name: ChainAccessor
  type: class
  source: Symfony\Component\Form\Extension\Core\DataAccessor\ChainAccessor
- name: PropertyPathAccessor
  type: class
  source: Symfony\Component\Form\Extension\Core\DataAccessor\PropertyPathAccessor
properties: []
methods:
- name: getDataAccessor
  visibility: public
  parameters: []
  comment: "# * Maps arrays/objects to/from forms using data accessors.\n# *\n# *\
    \ @author Bernhard Schussek <bschussek@gmail.com>\n# */\n# class DataMapper implements\
    \ DataMapperInterface\n# {\n# private DataAccessorInterface $dataAccessor;\n#\
    \ \n# public function __construct(?DataAccessorInterface $dataAccessor = null)\n\
    # {\n# $this->dataAccessor = $dataAccessor ?? new ChainAccessor([\n# new CallbackAccessor(),\n\
    # new PropertyPathAccessor(),\n# ]);\n# }\n# \n# public function mapDataToForms(mixed\
    \ $data, \\Traversable $forms): void\n# {\n# $empty = null === $data || [] ===\
    \ $data;\n# \n# if (!$empty && !\\is_array($data) && !\\is_object($data)) {\n\
    # throw new UnexpectedTypeException($data, 'object, array or empty');\n# }\n#\
    \ \n# foreach ($forms as $form) {\n# $config = $form->getConfig();\n# \n# if (!$empty\
    \ && $config->getMapped() && $this->dataAccessor->isReadable($data, $form)) {\n\
    # $form->setData($this->dataAccessor->getValue($data, $form));\n# } else {\n#\
    \ $form->setData($config->getData());\n# }\n# }\n# }\n# \n# public function mapFormsToData(\\\
    Traversable $forms, mixed &$data): void\n# {\n# if (null === $data) {\n# return;\n\
    # }\n# \n# if (!\\is_array($data) && !\\is_object($data)) {\n# throw new UnexpectedTypeException($data,\
    \ 'object, array or empty');\n# }\n# \n# foreach ($forms as $form) {\n# $config\
    \ = $form->getConfig();\n# \n# // Write-back is disabled if the form is not synchronized\
    \ (transformation failed),\n# // if the form was not submitted and if the form\
    \ is disabled (modification not allowed)\n# if ($config->getMapped() && $form->isSubmitted()\
    \ && $form->isSynchronized() && !$form->isDisabled() && $this->dataAccessor->isWritable($data,\
    \ $form)) {\n# $this->dataAccessor->setValue($data, $form->getData(), $form);\n\
    # }\n# }\n# }\n# \n# /**\n# * @internal"
traits:
- Symfony\Component\Form\DataAccessorInterface
- Symfony\Component\Form\DataMapperInterface
- Symfony\Component\Form\Exception\UnexpectedTypeException
- Symfony\Component\Form\Extension\Core\DataAccessor\CallbackAccessor
- Symfony\Component\Form\Extension\Core\DataAccessor\ChainAccessor
- Symfony\Component\Form\Extension\Core\DataAccessor\PropertyPathAccessor
interfaces:
- DataMapperInterface
