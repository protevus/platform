name: UriResolver
class_comment: "# * The UriResolver class takes an URI (relative, absolute, fragment,\
  \ etc.)\n# * and turns it into an absolute URI against another given base URI.\n\
  # *\n# * @author Fabien Potencier <fabien@symfony.com>\n# * @author Gr\xE9goire\
  \ Pineau <lyrixx@lyrixx.info>"
dependencies: []
properties: []
methods:
- name: resolve
  visibility: public
  parameters:
  - name: uri
  - name: baseUri
  comment: "# * The UriResolver class takes an URI (relative, absolute, fragment,\
    \ etc.)\n# * and turns it into an absolute URI against another given base URI.\n\
    # *\n# * @author Fabien Potencier <fabien@symfony.com>\n# * @author Gr\xE9goire\
    \ Pineau <lyrixx@lyrixx.info>\n# */\n# class UriResolver\n# {\n# /**\n# * Resolves\
    \ a URI according to a base URI.\n# *\n# * For example if $uri=/foo/bar and $baseUri=https://symfony.com\
    \ it will\n# * return https://symfony.com/foo/bar\n# *\n# * If the $uri is not\
    \ absolute you must pass an absolute $baseUri"
- name: canonicalizePath
  visibility: private
  parameters:
  - name: path
  comment: '# * Returns the canonicalized URI path (see RFC 3986, section 5.2.4).'
- name: cleanupUri
  visibility: private
  parameters:
  - name: uri
  comment: '# * Removes the query string and the anchor from the given uri.'
- name: cleanupQuery
  visibility: private
  parameters:
  - name: uri
  comment: '# * Removes the query string from the uri.'
- name: cleanupAnchor
  visibility: private
  parameters:
  - name: uri
  comment: '# * Removes the anchor from the uri.'
traits: []
interfaces: []
