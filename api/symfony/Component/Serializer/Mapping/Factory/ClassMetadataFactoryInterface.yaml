name: ClassMetadataFactoryInterface
class_comment: null
dependencies:
- name: InvalidArgumentException
  type: class
  source: Symfony\Component\Serializer\Exception\InvalidArgumentException
- name: ClassMetadataInterface
  type: class
  source: Symfony\Component\Serializer\Mapping\ClassMetadataInterface
properties: []
methods:
- name: getMetadataFor
  visibility: public
  parameters:
  - name: value
  comment: "# * Returns a {@see ClassMetadataInterface}.\n# *\n# * @author K\xE9vin\
    \ Dunglas <dunglas@gmail.com>\n# */\n# interface ClassMetadataFactoryInterface\n\
    # {\n# /**\n# * If the method was called with the same class name (or an object\
    \ of that\n# * class) before, the same metadata instance is returned.\n# *\n#\
    \ * If the factory was configured with a cache, this method will first look\n\
    # * for an existing metadata instance in the cache. If an existing instance\n\
    # * is found, it will be returned without further ado.\n# *\n# * Otherwise, a\
    \ new metadata instance is created. If the factory was\n# * configured with a\
    \ loader, the metadata is passed to the\n# * {@link \\Symfony\\Component\\Serializer\\\
    Mapping\\Loader\\LoaderInterface::loadClassMetadata()} method for further\n# *\
    \ configuration. At last, the new object is returned.\n# *\n# * @throws InvalidArgumentException"
- name: hasMetadataFor
  visibility: public
  parameters:
  - name: value
  comment: '# * Checks if class has metadata.'
traits:
- Symfony\Component\Serializer\Exception\InvalidArgumentException
- Symfony\Component\Serializer\Mapping\ClassMetadataInterface
interfaces: []
