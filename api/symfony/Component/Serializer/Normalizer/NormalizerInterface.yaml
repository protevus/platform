name: NormalizerInterface
class_comment: null
dependencies:
- name: CircularReferenceException
  type: class
  source: Symfony\Component\Serializer\Exception\CircularReferenceException
- name: ExceptionInterface
  type: class
  source: Symfony\Component\Serializer\Exception\ExceptionInterface
- name: InvalidArgumentException
  type: class
  source: Symfony\Component\Serializer\Exception\InvalidArgumentException
- name: LogicException
  type: class
  source: Symfony\Component\Serializer\Exception\LogicException
properties: []
methods:
- name: normalize
  visibility: public
  parameters:
  - name: data
  - name: format
    default: 'null'
  - name: context
    default: '[]'
  comment: '# * @author Jordi Boggiano <j.boggiano@seld.be>

    # */

    # interface NormalizerInterface

    # {

    # /**

    # * Normalizes data into a set of arrays/scalars.

    # *

    # * @param mixed       $data    Data to normalize

    # * @param string|null $format  Format the normalization result will be encoded
    as

    # * @param array       $context Context options for the normalizer

    # *

    # * @return array|string|int|float|bool|\ArrayObject|null \ArrayObject is used
    to make sure an empty object is encoded as an object not an array

    # *

    # * @throws InvalidArgumentException   Occurs when the object given is not a supported
    type for the normalizer

    # * @throws CircularReferenceException Occurs when the normalizer detects a circular
    reference when no circular

    # *                                    reference handler can fix it

    # * @throws LogicException             Occurs when the normalizer is not called
    in an expected context

    # * @throws ExceptionInterface         Occurs for all the other cases of errors'
- name: supportsNormalization
  visibility: public
  parameters:
  - name: data
  - name: format
    default: 'null'
  - name: context
    default: '[]'
  comment: '# * Checks whether the given class is supported for normalization by this
    normalizer.

    # *

    # * @param mixed       $data   Data to normalize

    # * @param string|null $format The format being (de-)serialized from or into'
- name: getSupportedTypes
  visibility: public
  parameters:
  - name: format
  comment: '# * Returns the types potentially supported by this normalizer.

    # *

    # * For each supported formats (if applicable), the supported types should be

    # * returned as keys, and each type should be mapped to a boolean indicating

    # * if the result of supportsNormalization() can be cached or not

    # * (a result cannot be cached when it depends on the context or on the data.)

    # * A null value means that the normalizer does not support the corresponding

    # * type.

    # *

    # * Use type "object" to match any classes or interfaces,

    # * and type "*" to match any types.

    # *

    # * @return array<class-string|''*''|''object''|string, bool|null>'
traits:
- Symfony\Component\Serializer\Exception\CircularReferenceException
- Symfony\Component\Serializer\Exception\ExceptionInterface
- Symfony\Component\Serializer\Exception\InvalidArgumentException
- Symfony\Component\Serializer\Exception\LogicException
interfaces: []
