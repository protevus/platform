name: TypeFactoryTrait
class_comment: null
dependencies:
- name: BackedEnumType
  type: class
  source: Symfony\Component\TypeInfo\Type\BackedEnumType
- name: BuiltinType
  type: class
  source: Symfony\Component\TypeInfo\Type\BuiltinType
- name: CollectionType
  type: class
  source: Symfony\Component\TypeInfo\Type\CollectionType
- name: EnumType
  type: class
  source: Symfony\Component\TypeInfo\Type\EnumType
- name: GenericType
  type: class
  source: Symfony\Component\TypeInfo\Type\GenericType
- name: IntersectionType
  type: class
  source: Symfony\Component\TypeInfo\Type\IntersectionType
- name: ObjectType
  type: class
  source: Symfony\Component\TypeInfo\Type\ObjectType
- name: TemplateType
  type: class
  source: Symfony\Component\TypeInfo\Type\TemplateType
- name: UnionType
  type: class
  source: Symfony\Component\TypeInfo\Type\UnionType
properties: []
methods:
- name: builtin
  visibility: public
  parameters:
  - name: identifier
  comment: '# * Helper trait to create any type easily.

    # *

    # * @author Mathias Arlaud <mathias.arlaud@gmail.com>

    # * @author Baptiste Leduc <baptiste.leduc@gmail.com>

    # *

    # * @experimental

    # */

    # trait TypeFactoryTrait

    # {

    # /**

    # * @template T of TypeIdentifier

    # * @template U value-of<T>

    # *

    # * @param T|U $identifier

    # *

    # * @return BuiltinType<T>'
- name: int
  visibility: public
  parameters: []
  comment: "# @var T $identifier */\n# $identifier = \\is_string($identifier) ? TypeIdentifier::from($identifier)\
    \ : $identifier;\n# \n# return new BuiltinType($identifier);\n# }\n# \n# /**\n\
    # * @return BuiltinType<TypeIdentifier::INT>"
- name: float
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::FLOAT>'
- name: string
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::STRING>'
- name: bool
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::BOOL>'
- name: resource
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::RESOURCE>'
- name: 'false'
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::FALSE>'
- name: 'true'
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::TRUE>'
- name: callable
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::CALLABLE>'
- name: mixed
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::MIXED>'
- name: 'null'
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::NULL>'
- name: void
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::VOID>'
- name: never
  visibility: public
  parameters: []
  comment: '# * @return BuiltinType<TypeIdentifier::NEVER>'
- name: collection
  visibility: public
  parameters:
  - name: type
  - name: value
    default: 'null'
  - name: key
    default: 'null'
  - name: asList
    default: 'false'
  comment: '# * @template T of BuiltinType<TypeIdentifier::ARRAY>|BuiltinType<TypeIdentifier::ITERABLE>|ObjectType|GenericType

    # *

    # * @param T $type

    # *

    # * @return CollectionType<T>'
- name: array
  visibility: public
  parameters:
  - name: value
    default: 'null'
  - name: key
    default: 'null'
  - name: asList
    default: 'false'
  comment: '# * @return CollectionType<BuiltinType<TypeIdentifier::ARRAY>>'
- name: iterable
  visibility: public
  parameters:
  - name: value
    default: 'null'
  - name: key
    default: 'null'
  - name: asList
    default: 'false'
  comment: '# * @return CollectionType<BuiltinType<TypeIdentifier::ITERABLE>>'
- name: list
  visibility: public
  parameters:
  - name: value
    default: 'null'
  comment: '# * @return CollectionType<BuiltinType<TypeIdentifier::ARRAY>>'
- name: dict
  visibility: public
  parameters:
  - name: value
    default: 'null'
  comment: '# * @return CollectionType<BuiltinType<TypeIdentifier::ARRAY>>'
- name: object
  visibility: public
  parameters:
  - name: className
    default: 'null'
  comment: '# * @template T of class-string

    # *

    # * @param T|null $className

    # *

    # * @return ($className is class-string ? ObjectType<T> : BuiltinType<TypeIdentifier::OBJECT>)'
- name: enum
  visibility: public
  parameters:
  - name: className
  - name: backingType
    default: 'null'
  comment: '# * @template T of class-string<\UnitEnum>|class-string<\BackedEnum>

    # * @template U of BuiltinType<TypeIdentifier::INT>|BuiltinType<TypeIdentifier::STRING>

    # *

    # * @param T      $className

    # * @param U|null $backingType

    # *

    # * @return ($className is class-string<\BackedEnum> ? ($backingType is U ? BackedEnumType<T,U>
    : BackedEnumType<T,BuiltinType<TypeIdentifier::INT>|BuiltinType<TypeIdentifier::STRING>>)
    : EnumType<T>))'
- name: generic
  visibility: public
  parameters:
  - name: mainType
  - name: '...$variableTypes'
  comment: '# * @template T of BuiltinType<TypeIdentifier::ARRAY>|BuiltinType<TypeIdentifier::ITERABLE>|ObjectType

    # *

    # * @param T $mainType

    # *

    # * @return GenericType<T>'
- name: template
  visibility: public
  parameters:
  - name: name
  - name: bound
    default: 'null'
  comment: null
- name: union
  visibility: public
  parameters:
  - name: '...$types'
  comment: '# * @template T of Type

    # *

    # * @param list<T> $types

    # *

    # * @return UnionType<Type>'
- name: intersection
  visibility: public
  parameters:
  - name: '...$types'
  comment: "# @var list<T> $unionTypes */\n# $unionTypes = [];\n# \n# foreach ($types\
    \ as $type) {\n# if (!$type instanceof UnionType) {\n# $unionTypes[] = $type;\n\
    # \n# continue;\n# }\n# \n# foreach ($type->getTypes() as $unionType) {\n# $unionTypes[]\
    \ = $unionType;\n# }\n# }\n# \n# return new UnionType(...$unionTypes);\n# }\n\
    # \n# /**\n# * @template T of Type\n# *\n# * @param list<T> $types\n# *\n# * @return\
    \ IntersectionType<Type>"
- name: nullable
  visibility: public
  parameters:
  - name: type
  comment: "# @var list<T> $intersectionTypes */\n# $intersectionTypes = [];\n# \n\
    # foreach ($types as $type) {\n# if (!$type instanceof IntersectionType) {\n#\
    \ $intersectionTypes[] = $type;\n# \n# continue;\n# }\n# \n# foreach ($type->getTypes()\
    \ as $intersectionType) {\n# $intersectionTypes[] = $intersectionType;\n# }\n\
    # }\n# \n# return new IntersectionType(...$intersectionTypes);\n# }\n# \n# /**\n\
    # * @template T of Type\n# *\n# * @param T $type\n# *\n# * @return (T is UnionType\
    \ ? T : UnionType<T|BuiltinType<TypeIdentifier::NULL>>)"
traits:
- Symfony\Component\TypeInfo\Type\BackedEnumType
- Symfony\Component\TypeInfo\Type\BuiltinType
- Symfony\Component\TypeInfo\Type\CollectionType
- Symfony\Component\TypeInfo\Type\EnumType
- Symfony\Component\TypeInfo\Type\GenericType
- Symfony\Component\TypeInfo\Type\IntersectionType
- Symfony\Component\TypeInfo\Type\ObjectType
- Symfony\Component\TypeInfo\Type\TemplateType
- Symfony\Component\TypeInfo\Type\UnionType
interfaces: []
