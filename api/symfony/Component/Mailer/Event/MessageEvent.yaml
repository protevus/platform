name: MessageEvent
class_comment: null
dependencies:
- name: Envelope
  type: class
  source: Symfony\Component\Mailer\Envelope
- name: LogicException
  type: class
  source: Symfony\Component\Mailer\Exception\LogicException
- name: StampInterface
  type: class
  source: Symfony\Component\Messenger\Stamp\StampInterface
- name: RawMessage
  type: class
  source: Symfony\Component\Mime\RawMessage
- name: Event
  type: class
  source: Symfony\Contracts\EventDispatcher\Event
properties: []
methods:
- name: getStamps
  visibility: public
  parameters: []
  comment: "# * Allows the transformation of a Message and the Envelope before the\
    \ email is sent.\n# *\n# * @author Fabien Potencier <fabien@symfony.com>\n# */\n\
    # final class MessageEvent extends Event\n# {\n# private bool $rejected = false;\n\
    # \n# /** @var StampInterface[] */\n# private array $stamps = [];\n# \n# public\
    \ function __construct(\n# private RawMessage $message,\n# private Envelope $envelope,\n\
    # private string $transport,\n# private bool $queued = false,\n# ) {\n# }\n# \n\
    # public function getMessage(): RawMessage\n# {\n# return $this->message;\n# }\n\
    # \n# public function setMessage(RawMessage $message): void\n# {\n# $this->message\
    \ = $message;\n# }\n# \n# public function getEnvelope(): Envelope\n# {\n# return\
    \ $this->envelope;\n# }\n# \n# public function setEnvelope(Envelope $envelope):\
    \ void\n# {\n# $this->envelope = $envelope;\n# }\n# \n# public function getTransport():\
    \ string\n# {\n# return $this->transport;\n# }\n# \n# public function isQueued():\
    \ bool\n# {\n# return $this->queued;\n# }\n# \n# public function isRejected():\
    \ bool\n# {\n# return $this->rejected;\n# }\n# \n# public function reject(): void\n\
    # {\n# $this->rejected = true;\n# $this->stopPropagation();\n# }\n# \n# public\
    \ function addStamp(StampInterface $stamp): void\n# {\n# if (!$this->queued) {\n\
    # throw new LogicException(\\sprintf('Cannot call \"%s()\" on a message that is\
    \ not meant to be queued.', __METHOD__));\n# }\n# \n# $this->stamps[] = $stamp;\n\
    # }\n# \n# /**\n# * @return StampInterface[]"
traits:
- Symfony\Component\Mailer\Envelope
- Symfony\Component\Mailer\Exception\LogicException
- Symfony\Component\Messenger\Stamp\StampInterface
- Symfony\Component\Mime\RawMessage
- Symfony\Contracts\EventDispatcher\Event
interfaces: []
