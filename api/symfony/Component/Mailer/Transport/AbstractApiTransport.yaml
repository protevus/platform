name: AbstractApiTransport
class_comment: null
dependencies:
- name: Envelope
  type: class
  source: Symfony\Component\Mailer\Envelope
- name: RuntimeException
  type: class
  source: Symfony\Component\Mailer\Exception\RuntimeException
- name: SentMessage
  type: class
  source: Symfony\Component\Mailer\SentMessage
- name: Address
  type: class
  source: Symfony\Component\Mime\Address
- name: Email
  type: class
  source: Symfony\Component\Mime\Email
- name: MessageConverter
  type: class
  source: Symfony\Component\Mime\MessageConverter
- name: ResponseInterface
  type: class
  source: Symfony\Contracts\HttpClient\ResponseInterface
properties: []
methods:
- name: getRecipients
  visibility: protected
  parameters:
  - name: email
  - name: envelope
  comment: "# * @author Fabien Potencier <fabien@symfony.com>\n# */\n# abstract class\
    \ AbstractApiTransport extends AbstractHttpTransport\n# {\n# abstract protected\
    \ function doSendApi(SentMessage $sentMessage, Email $email, Envelope $envelope):\
    \ ResponseInterface;\n# \n# protected function doSendHttp(SentMessage $message):\
    \ ResponseInterface\n# {\n# try {\n# $email = MessageConverter::toEmail($message->getOriginalMessage());\n\
    # } catch (\\Exception $e) {\n# throw new RuntimeException(\\sprintf('Unable to\
    \ send message with the \"%s\" transport: ', __CLASS__).$e->getMessage(), 0, $e);\n\
    # }\n# \n# return $this->doSendApi($message, $email, $message->getEnvelope());\n\
    # }\n# \n# /**\n# * @return Address[]"
traits:
- Symfony\Component\Mailer\Envelope
- Symfony\Component\Mailer\Exception\RuntimeException
- Symfony\Component\Mailer\SentMessage
- Symfony\Component\Mime\Address
- Symfony\Component\Mime\Email
- Symfony\Component\Mime\MessageConverter
- Symfony\Contracts\HttpClient\ResponseInterface
interfaces: []
