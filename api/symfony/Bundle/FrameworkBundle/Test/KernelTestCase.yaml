name: KernelTestCase
class_comment: null
dependencies:
- name: TestCase
  type: class
  source: PHPUnit\Framework\TestCase
- name: Container
  type: class
  source: Symfony\Component\DependencyInjection\Container
- name: ServiceNotFoundException
  type: class
  source: Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
- name: KernelInterface
  type: class
  source: Symfony\Component\HttpKernel\KernelInterface
- name: ResetInterface
  type: class
  source: Symfony\Contracts\Service\ResetInterface
- name: MailerAssertionsTrait
  type: class
  source: MailerAssertionsTrait
- name: NotificationAssertionsTrait
  type: class
  source: NotificationAssertionsTrait
properties: []
methods:
- name: getKernelClass
  visibility: protected
  parameters: []
  comment: "# * KernelTestCase is the base class for tests needing a Kernel.\n# *\n\
    # * @author Fabien Potencier <fabien@symfony.com>\n# */\n# abstract class KernelTestCase\
    \ extends TestCase\n# {\n# use MailerAssertionsTrait;\n# use NotificationAssertionsTrait;\n\
    # \n# protected static ?string $class = null;\n# protected static ?KernelInterface\
    \ $kernel = null;\n# protected static bool $booted = false;\n# \n# protected function\
    \ tearDown(): void\n# {\n# static::ensureKernelShutdown();\n# static::$class =\
    \ null;\n# static::$kernel = null;\n# static::$booted = false;\n# }\n# \n# /**\n\
    # * @throws \\RuntimeException\n# * @throws \\LogicException"
- name: bootKernel
  visibility: protected
  parameters:
  - name: options
    default: '[]'
  comment: '# * Boots the Kernel for this test.'
- name: getContainer
  visibility: protected
  parameters: []
  comment: '# * Provides a dedicated test container with access to both public and
    private

    # * services. The container will not include private services that have been

    # * inlined or removed. Private services will be removed when they are not

    # * used by other services.

    # *

    # * Using this method is the best way to get a container from your test code.'
- name: createKernel
  visibility: protected
  parameters:
  - name: options
    default: '[]'
  comment: '# * Creates a Kernel.

    # *

    # * Available options:

    # *

    # *  * environment

    # *  * debug'
- name: ensureKernelShutdown
  visibility: protected
  parameters: []
  comment: '# * Shuts the kernel down if it was used in the test - called by the tearDown
    method by default.'
traits:
- PHPUnit\Framework\TestCase
- Symfony\Component\DependencyInjection\Container
- Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
- Symfony\Component\HttpKernel\KernelInterface
- Symfony\Contracts\Service\ResetInterface
- MailerAssertionsTrait
- NotificationAssertionsTrait
interfaces: []
