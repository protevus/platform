name: FrameworkExtensionTestCase
class_comment: null
dependencies:
- name: CacheItemPoolInterface
  type: class
  source: Psr\Cache\CacheItemPoolInterface
- name: LoggerAwareInterface
  type: class
  source: Psr\Log\LoggerAwareInterface
- name: FrameworkExtension
  type: class
  source: Symfony\Bundle\FrameworkBundle\DependencyInjection\FrameworkExtension
- name: FrameworkBundle
  type: class
  source: Symfony\Bundle\FrameworkBundle\FrameworkBundle
- name: DummyMessage
  type: class
  source: Symfony\Bundle\FrameworkBundle\Tests\Fixtures\Messenger\DummyMessage
- name: TestCase
  type: class
  source: Symfony\Bundle\FrameworkBundle\Tests\TestCase
- name: FullStack
  type: class
  source: Symfony\Bundle\FullStack
- name: AdapterInterface
  type: class
  source: Symfony\Component\Cache\Adapter\AdapterInterface
- name: ApcuAdapter
  type: class
  source: Symfony\Component\Cache\Adapter\ApcuAdapter
- name: ArrayAdapter
  type: class
  source: Symfony\Component\Cache\Adapter\ArrayAdapter
- name: ChainAdapter
  type: class
  source: Symfony\Component\Cache\Adapter\ChainAdapter
- name: FilesystemAdapter
  type: class
  source: Symfony\Component\Cache\Adapter\FilesystemAdapter
- name: ProxyAdapter
  type: class
  source: Symfony\Component\Cache\Adapter\ProxyAdapter
- name: RedisAdapter
  type: class
  source: Symfony\Component\Cache\Adapter\RedisAdapter
- name: RedisTagAwareAdapter
  type: class
  source: Symfony\Component\Cache\Adapter\RedisTagAwareAdapter
- name: TagAwareAdapter
  type: class
  source: Symfony\Component\Cache\Adapter\TagAwareAdapter
- name: CachePoolPass
  type: class
  source: Symfony\Component\Cache\DependencyInjection\CachePoolPass
- name: InvalidConfigurationException
  type: class
  source: Symfony\Component\Config\Definition\Exception\InvalidConfigurationException
- name: ServiceClosureArgument
  type: class
  source: Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument
- name: ServiceLocatorArgument
  type: class
  source: Symfony\Component\DependencyInjection\Argument\ServiceLocatorArgument
- name: TaggedIteratorArgument
  type: class
  source: Symfony\Component\DependencyInjection\Argument\TaggedIteratorArgument
- name: ChildDefinition
  type: class
  source: Symfony\Component\DependencyInjection\ChildDefinition
- name: ResolveInstanceofConditionalsPass
  type: class
  source: Symfony\Component\DependencyInjection\Compiler\ResolveInstanceofConditionalsPass
- name: ResolveTaggedIteratorArgumentPass
  type: class
  source: Symfony\Component\DependencyInjection\Compiler\ResolveTaggedIteratorArgumentPass
- name: ContainerBuilder
  type: class
  source: Symfony\Component\DependencyInjection\ContainerBuilder
- name: ContainerInterface
  type: class
  source: Symfony\Component\DependencyInjection\ContainerInterface
- name: Definition
  type: class
  source: Symfony\Component\DependencyInjection\Definition
- name: LogicException
  type: class
  source: Symfony\Component\DependencyInjection\Exception\LogicException
- name: ClosureLoader
  type: class
  source: Symfony\Component\DependencyInjection\Loader\ClosureLoader
- name: ContainerConfigurator
  type: class
  source: Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator
- name: EnvPlaceholderParameterBag
  type: class
  source: Symfony\Component\DependencyInjection\ParameterBag\EnvPlaceholderParameterBag
- name: Reference
  type: class
  source: Symfony\Component\DependencyInjection\Reference
- name: EventDispatcherInterface
  type: class
  source: Symfony\Component\EventDispatcher\EventDispatcherInterface
- name: Finder
  type: class
  source: Symfony\Component\Finder\Finder
- name: Form
  type: class
  source: Symfony\Component\Form\Form
- name: HtmlSanitizer
  type: class
  source: Symfony\Component\HtmlSanitizer\HtmlSanitizer
- name: HtmlSanitizerConfig
  type: class
  source: Symfony\Component\HtmlSanitizer\HtmlSanitizerConfig
- name: HtmlSanitizerInterface
  type: class
  source: Symfony\Component\HtmlSanitizer\HtmlSanitizerInterface
- name: MockHttpClient
  type: class
  source: Symfony\Component\HttpClient\MockHttpClient
- name: RetryableHttpClient
  type: class
  source: Symfony\Component\HttpClient\RetryableHttpClient
- name: ScopingHttpClient
  type: class
  source: Symfony\Component\HttpClient\ScopingHttpClient
- name: ThrottlingHttpClient
  type: class
  source: Symfony\Component\HttpClient\ThrottlingHttpClient
- name: IpUtils
  type: class
  source: Symfony\Component\HttpFoundation\IpUtils
- name: LoggerPass
  type: class
  source: Symfony\Component\HttpKernel\DependencyInjection\LoggerPass
- name: FragmentUriGeneratorInterface
  type: class
  source: Symfony\Component\HttpKernel\Fragment\FragmentUriGeneratorInterface
- name: AmazonSqsTransportFactory
  type: class
  source: Symfony\Component\Messenger\Bridge\AmazonSqs\Transport\AmazonSqsTransportFactory
- name: AmqpTransportFactory
  type: class
  source: Symfony\Component\Messenger\Bridge\Amqp\Transport\AmqpTransportFactory
- name: BeanstalkdTransportFactory
  type: class
  source: Symfony\Component\Messenger\Bridge\Beanstalkd\Transport\BeanstalkdTransportFactory
- name: RedisTransportFactory
  type: class
  source: Symfony\Component\Messenger\Bridge\Redis\Transport\RedisTransportFactory
- name: TransportFactory
  type: class
  source: Symfony\Component\Messenger\Transport\TransportFactory
- name: ChatterInterface
  type: class
  source: Symfony\Component\Notifier\ChatterInterface
- name: TexterInterface
  type: class
  source: Symfony\Component\Notifier\TexterInterface
- name: PropertyAccessor
  type: class
  source: Symfony\Component\PropertyAccess\PropertyAccessor
- name: AuthenticationEvents
  type: class
  source: Symfony\Component\Security\Core\AuthenticationEvents
- name: AttributeLoader
  type: class
  source: Symfony\Component\Serializer\Mapping\Loader\AttributeLoader
- name: XmlFileLoader
  type: class
  source: Symfony\Component\Serializer\Mapping\Loader\XmlFileLoader
- name: YamlFileLoader
  type: class
  source: Symfony\Component\Serializer\Mapping\Loader\YamlFileLoader
- name: BackedEnumNormalizer
  type: class
  source: Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer
- name: ConstraintViolationListNormalizer
  type: class
  source: Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer
- name: DataUriNormalizer
  type: class
  source: Symfony\Component\Serializer\Normalizer\DataUriNormalizer
- name: DateIntervalNormalizer
  type: class
  source: Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer
- name: DateTimeNormalizer
  type: class
  source: Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
- name: FormErrorNormalizer
  type: class
  source: Symfony\Component\Serializer\Normalizer\FormErrorNormalizer
- name: JsonSerializableNormalizer
  type: class
  source: Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer
- name: ObjectNormalizer
  type: class
  source: Symfony\Component\Serializer\Normalizer\ObjectNormalizer
- name: TranslatableNormalizer
  type: class
  source: Symfony\Component\Serializer\Normalizer\TranslatableNormalizer
- name: Serializer
  type: class
  source: Symfony\Component\Serializer\Serializer
- name: TranslatorPass
  type: class
  source: Symfony\Component\Translation\DependencyInjection\TranslatorPass
- name: LocaleSwitcher
  type: class
  source: Symfony\Component\Translation\LocaleSwitcher
- name: AddConstraintValidatorsPass
  type: class
  source: Symfony\Component\Validator\DependencyInjection\AddConstraintValidatorsPass
- name: Validation
  type: class
  source: Symfony\Component\Validator\Validation
- name: ValidatorInterface
  type: class
  source: Symfony\Component\Validator\Validator\ValidatorInterface
- name: RequestParser
  type: class
  source: Symfony\Component\Webhook\Client\RequestParser
- name: WebhookController
  type: class
  source: Symfony\Component\Webhook\Controller\WebhookController
- name: InvalidDefinitionException
  type: class
  source: Symfony\Component\Workflow\Exception\InvalidDefinitionException
- name: InMemoryMetadataStore
  type: class
  source: Symfony\Component\Workflow\Metadata\InMemoryMetadataStore
- name: WorkflowEvents
  type: class
  source: Symfony\Component\Workflow\WorkflowEvents
- name: CacheInterface
  type: class
  source: Symfony\Contracts\Cache\CacheInterface
- name: TagAwareCacheInterface
  type: class
  source: Symfony\Contracts\Cache\TagAwareCacheInterface
properties: []
methods:
- name: loadFromFile
  visibility: protected
  parameters:
  - name: container
  - name: file
  comment: null
- name: testFormCsrfProtection
  visibility: public
  parameters: []
  comment: null
- name: testFormCsrfProtectionWithCsrfDisabled
  visibility: public
  parameters: []
  comment: null
- name: testPropertyAccessWithDefaultValue
  visibility: public
  parameters: []
  comment: null
- name: testPropertyAccessWithOverriddenValues
  visibility: public
  parameters: []
  comment: null
- name: testPropertyAccessCache
  visibility: public
  parameters: []
  comment: null
- name: testPropertyAccessCacheWithDebug
  visibility: public
  parameters: []
  comment: null
- name: testCsrfProtectionNeedsSessionToBeEnabled
  visibility: public
  parameters: []
  comment: null
- name: testCsrfProtectionForFormsEnablesCsrfProtectionAutomatically
  visibility: public
  parameters: []
  comment: null
- name: testFormsCsrfIsEnabledByDefault
  visibility: public
  parameters: []
  comment: null
- name: testHttpMethodOverride
  visibility: public
  parameters: []
  comment: null
- name: testTrustXSendfileTypeHeader
  visibility: public
  parameters: []
  comment: null
- name: testEsi
  visibility: public
  parameters: []
  comment: null
- name: testEsiDisabled
  visibility: public
  parameters: []
  comment: null
- name: testFragmentsAndHinclude
  visibility: public
  parameters: []
  comment: null
- name: testSsi
  visibility: public
  parameters: []
  comment: null
- name: testSsiDisabled
  visibility: public
  parameters: []
  comment: null
- name: testEsiAndSsiWithoutFragments
  visibility: public
  parameters: []
  comment: null
- name: testEnabledProfiler
  visibility: public
  parameters: []
  comment: null
- name: testDisabledProfiler
  visibility: public
  parameters: []
  comment: null
- name: testProfilerCollectSerializerDataEnabled
  visibility: public
  parameters: []
  comment: null
- name: testProfilerCollectSerializerDataDefaultDisabled
  visibility: public
  parameters: []
  comment: null
- name: testWorkflows
  visibility: public
  parameters: []
  comment: null
- name: testBackedEnumNormalizerRegistered
  visibility: public
  parameters: []
  comment: "# @var Reference $markingStoreRef */\n# $markingStoreRef = $serviceMarkingStoreWorkflowDefinition->getArgument(1);\n\
    # $this->assertInstanceOf(Reference::class, $markingStoreRef);\n# $this->assertEquals('workflow_service',\
    \ (string) $markingStoreRef);\n# \n# $this->assertTrue($container->hasDefinition('workflow.registry'),\
    \ 'Workflow registry is registered as a service');\n# $registryDefinition = $container->getDefinition('workflow.registry');\n\
    # $this->assertGreaterThan(0, \\count($registryDefinition->getMethodCalls()));\n\
    # }\n# \n# public function testWorkflowAreValidated()\n# {\n# $this->expectException(InvalidDefinitionException::class);\n\
    # $this->expectExceptionMessage('A transition from a place/state must have an\
    \ unique name. Multiple transitions named \"go\" from place/state \"first\" were\
    \ found on StateMachine \"my_workflow\".');\n# $this->createContainerFromFile('workflow_not_valid');\n\
    # }\n# \n# public function testWorkflowCannotHaveBothSupportsAndSupportStrategy()\n\
    # {\n# $this->expectException(InvalidConfigurationException::class);\n# $this->expectExceptionMessage('\"\
    supports\" and \"support_strategy\" cannot be used together.');\n# $this->createContainerFromFile('workflow_with_support_and_support_strategy');\n\
    # }\n# \n# public function testWorkflowShouldHaveOneOfSupportsAndSupportStrategy()\n\
    # {\n# $this->expectException(InvalidConfigurationException::class);\n# $this->expectExceptionMessage('\"\
    supports\" or \"support_strategy\" should be configured.');\n# $this->createContainerFromFile('workflow_without_support_and_support_strategy');\n\
    # }\n# \n# public function testWorkflowMultipleTransitionsWithSameName()\n# {\n\
    # $container = $this->createContainerFromFile('workflow_with_multiple_transitions_with_same_name');\n\
    # \n# $this->assertTrue($container->hasDefinition('workflow.article'), 'Workflow\
    \ is registered as a service');\n# $this->assertTrue($container->hasDefinition('workflow.article.definition'),\
    \ 'Workflow definition is registered as a service');\n# \n# $workflowDefinition\
    \ = $container->getDefinition('workflow.article.definition');\n# \n# $transitions\
    \ = $workflowDefinition->getArgument(1);\n# \n# $this->assertCount(5, $transitions);\n\
    # \n# $this->assertSame('.workflow.article.transition.0', (string) $transitions[0]);\n\
    # $this->assertSame([\n# 'request_review',\n# [\n# 'draft',\n# ],\n# [\n# 'wait_for_journalist',\
    \ 'wait_for_spellchecker',\n# ],\n# ], $container->getDefinition($transitions[0])->getArguments());\n\
    # \n# $this->assertSame('.workflow.article.transition.1', (string) $transitions[1]);\n\
    # $this->assertSame([\n# 'journalist_approval',\n# [\n# 'wait_for_journalist',\n\
    # ],\n# [\n# 'approved_by_journalist',\n# ],\n# ], $container->getDefinition($transitions[1])->getArguments());\n\
    # \n# $this->assertSame('.workflow.article.transition.2', (string) $transitions[2]);\n\
    # $this->assertSame([\n# 'spellchecker_approval',\n# [\n# 'wait_for_spellchecker',\n\
    # ],\n# [\n# 'approved_by_spellchecker',\n# ],\n# ], $container->getDefinition($transitions[2])->getArguments());\n\
    # \n# $this->assertSame('.workflow.article.transition.3', (string) $transitions[3]);\n\
    # $this->assertSame([\n# 'publish',\n# [\n# 'approved_by_journalist',\n# 'approved_by_spellchecker',\n\
    # ],\n# [\n# 'published',\n# ],\n# ], $container->getDefinition($transitions[3])->getArguments());\n\
    # \n# $this->assertSame('.workflow.article.transition.4', (string) $transitions[4]);\n\
    # $this->assertSame([\n# 'publish',\n# [\n# 'draft',\n# ],\n# [\n# 'published',\n\
    # ],\n# ], $container->getDefinition($transitions[4])->getArguments());\n# }\n\
    # \n# public function testWorkflowGuardExpressions()\n# {\n# $container = $this->createContainerFromFile('workflow_with_guard_expression');\n\
    # \n# $this->assertTrue($container->hasDefinition('.workflow.article.listener.guard'),\
    \ 'Workflow guard listener is registered as a service');\n# $this->assertTrue($container->hasParameter('workflow.has_guard_listeners'),\
    \ 'Workflow guard listeners parameter exists');\n# $this->assertTrue(true ===\
    \ $container->getParameter('workflow.has_guard_listeners'), 'Workflow guard listeners\
    \ parameter is enabled');\n# $guardDefinition = $container->getDefinition('.workflow.article.listener.guard');\n\
    # $this->assertSame([\n# [\n# 'event' => 'workflow.article.guard.publish',\n#\
    \ 'method' => 'onTransition',\n# ],\n# ], $guardDefinition->getTag('kernel.event_listener'));\n\
    # $guardsConfiguration = $guardDefinition->getArgument(0);\n# $this->assertTrue(1\
    \ === \\count($guardsConfiguration), 'Workflow guard configuration contains one\
    \ element per transition name');\n# $transitionGuardExpressions = $guardsConfiguration['workflow.article.guard.publish'];\n\
    # $this->assertSame('.workflow.article.transition.3', (string) $transitionGuardExpressions[0]->getArgument(0));\n\
    # $this->assertSame('!!true', $transitionGuardExpressions[0]->getArgument(1));\n\
    # $this->assertSame('.workflow.article.transition.4', (string) $transitionGuardExpressions[1]->getArgument(0));\n\
    # $this->assertSame('!!false', $transitionGuardExpressions[1]->getArgument(1));\n\
    # }\n# \n# public function testWorkflowServicesCanBeEnabled()\n# {\n# $container\
    \ = $this->createContainerFromFile('workflows_enabled');\n# \n# $this->assertTrue($container->hasDefinition('workflow.registry'));\n\
    # $this->assertTrue($container->hasDefinition('console.command.workflow_dump'));\n\
    # }\n# \n# public function testWorkflowsExplicitlyEnabled()\n# {\n# $container\
    \ = $this->createContainerFromFile('workflows_explicitly_enabled');\n# \n# $this->assertTrue($container->hasDefinition('workflow.foo.definition'));\n\
    # }\n# \n# public function testWorkflowsNamedExplicitlyEnabled()\n# {\n# $container\
    \ = $this->createContainerFromFile('workflows_explicitly_enabled_named_workflows');\n\
    # \n# $this->assertTrue($container->hasDefinition('workflow.workflows.definition'));\n\
    # }\n# \n# public function testWorkflowsWithNoDispatchedEvents()\n# {\n# $container\
    \ = $this->createContainerFromFile('workflow_with_no_events_to_dispatch');\n#\
    \ \n# $eventsToDispatch = $container->getDefinition('state_machine.my_workflow')->getArgument('index_4');\n\
    # \n# $this->assertSame([], $eventsToDispatch);\n# }\n# \n# public function testWorkflowsWithSpecifiedDispatchedEvents()\n\
    # {\n# $container = $this->createContainerFromFile('workflow_with_specified_events_to_dispatch');\n\
    # \n# $eventsToDispatch = $container->getDefinition('state_machine.my_workflow')->getArgument('index_4');\n\
    # \n# $this->assertSame([WorkflowEvents::LEAVE, WorkflowEvents::COMPLETED], $eventsToDispatch);\n\
    # }\n# \n# public function testEnabledPhpErrorsConfig()\n# {\n# $container = $this->createContainerFromFile('php_errors_enabled');\n\
    # \n# $definition = $container->getDefinition('debug.error_handler_configurator');\n\
    # $this->assertEquals(new Reference('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE),\
    \ $definition->getArgument(0));\n# $this->assertNull($definition->getArgument(1));\n\
    # $this->assertSame(-1, $container->getParameter('debug.error_handler.throw_at'));\n\
    # }\n# \n# public function testDisabledPhpErrorsConfig()\n# {\n# $container =\
    \ $this->createContainerFromFile('php_errors_disabled');\n# \n# $definition =\
    \ $container->getDefinition('debug.error_handler_configurator');\n# $this->assertNull($definition->getArgument(0));\n\
    # $this->assertNull($definition->getArgument(1));\n# $this->assertSame(0, $container->getParameter('debug.error_handler.throw_at'));\n\
    # }\n# \n# public function testPhpErrorsWithLogLevel()\n# {\n# $container = $this->createContainerFromFile('php_errors_log_level');\n\
    # \n# $definition = $container->getDefinition('debug.error_handler_configurator');\n\
    # $this->assertEquals(new Reference('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE),\
    \ $definition->getArgument(0));\n# $this->assertSame(8, $definition->getArgument(1));\n\
    # }\n# \n# public function testPhpErrorsWithLogLevels()\n# {\n# $container = $this->createContainerFromFile('php_errors_log_levels');\n\
    # \n# $definition = $container->getDefinition('debug.error_handler_configurator');\n\
    # $this->assertEquals(new Reference('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE),\
    \ $definition->getArgument(0));\n# $this->assertSame([\n# \\E_NOTICE => \\Psr\\\
    Log\\LogLevel::ERROR,\n# \\E_WARNING => \\Psr\\Log\\LogLevel::ERROR,\n# ], $definition->getArgument(1));\n\
    # }\n# \n# public function testExceptionsConfig()\n# {\n# $container = $this->createContainerFromFile('exceptions');\n\
    # \n# $configuration = $container->getDefinition('exception_listener')->getArgument(3);\n\
    # \n# $this->assertSame([\n# \\Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException::class,\n\
    # \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException::class,\n\
    # \\Symfony\\Component\\HttpKernel\\Exception\\ConflictHttpException::class,\n\
    # \\Symfony\\Component\\HttpKernel\\Exception\\ServiceUnavailableHttpException::class,\n\
    # ], array_keys($configuration));\n# \n# $this->assertEqualsCanonicalizing([\n\
    # 'log_level' => 'info',\n# 'status_code' => 422,\n# ], $configuration[\\Symfony\\\
    Component\\HttpKernel\\Exception\\BadRequestHttpException::class]);\n# \n# $this->assertEqualsCanonicalizing([\n\
    # 'log_level' => 'info',\n# 'status_code' => null,\n# ], $configuration[\\Symfony\\\
    Component\\HttpKernel\\Exception\\NotFoundHttpException::class]);\n# \n# $this->assertEqualsCanonicalizing([\n\
    # 'log_level' => 'info',\n# 'status_code' => null,\n# ], $configuration[\\Symfony\\\
    Component\\HttpKernel\\Exception\\ConflictHttpException::class]);\n# \n# $this->assertEqualsCanonicalizing([\n\
    # 'log_level' => null,\n# 'status_code' => 500,\n# ], $configuration[\\Symfony\\\
    Component\\HttpKernel\\Exception\\ServiceUnavailableHttpException::class]);\n\
    # }\n# \n# public function testRouter()\n# {\n# $container = $this->createContainerFromFile('full');\n\
    # \n# $this->assertTrue($container->has('router'), '->registerRouterConfiguration()\
    \ loads routing.xml');\n# $arguments = $container->findDefinition('router')->getArguments();\n\
    # $this->assertEquals($container->getParameter('kernel.project_dir').'/config/routing.xml',\
    \ $container->getParameter('router.resource'), '->registerRouterConfiguration()\
    \ sets routing resource');\n# $this->assertEquals('%router.resource%', $arguments[1],\
    \ '->registerRouterConfiguration() sets routing resource');\n# $this->assertEquals('xml',\
    \ $arguments[2]['resource_type'], '->registerRouterConfiguration() sets routing\
    \ resource type');\n# \n# $this->assertSame(['_locale' => 'fr|en'], $container->getDefinition('routing.loader')->getArgument(2));\n\
    # }\n# \n# public function testRouterRequiresResourceOption()\n# {\n# $container\
    \ = $this->createContainer();\n# $loader = new FrameworkExtension();\n# \n# $this->expectException(InvalidConfigurationException::class);\n\
    # \n# $loader->load([['http_method_override' => false, 'handle_all_throwables'\
    \ => true, 'php_errors' => ['log' => true], 'router' => true]], $container);\n\
    # }\n# \n# public function testSession()\n# {\n# $container = $this->createContainerFromFile('full');\n\
    # \n# $this->assertEquals('fr', $container->getParameter('kernel.default_locale'));\n\
    # $this->assertEquals('session.storage.factory.native', (string) $container->getAlias('session.storage.factory'));\n\
    # $this->assertEquals('session.handler.native_file', (string) $container->getAlias('session.handler'));\n\
    # \n# $options = $container->getParameter('session.storage.options');\n# $this->assertEquals('_SYMFONY',\
    \ $options['name']);\n# $this->assertEquals(86400, $options['cookie_lifetime']);\n\
    # $this->assertEquals('/', $options['cookie_path']);\n# $this->assertEquals('example.com',\
    \ $options['cookie_domain']);\n# $this->assertTrue($options['cookie_secure']);\n\
    # $this->assertFalse($options['cookie_httponly']);\n# $this->assertTrue($options['use_cookies']);\n\
    # $this->assertEquals(108, $options['gc_divisor']);\n# $this->assertEquals(1,\
    \ $options['gc_probability']);\n# $this->assertEquals(90000, $options['gc_maxlifetime']);\n\
    # $this->assertEquals(22, $options['sid_length']);\n# $this->assertEquals(4, $options['sid_bits_per_character']);\n\
    # \n# $this->assertEquals('/path/to/sessions', $container->getParameter('session.save_path'));\n\
    # }\n# \n# public function testNullSessionHandler()\n# {\n# $container = $this->createContainerFromFile('session');\n\
    # \n# $this->assertNull($container->getParameter('session.save_path'));\n# $this->assertSame('session.handler.native',\
    \ (string) $container->getAlias('session.handler'));\n# \n# $expected = ['session_factory',\
    \ 'logger', 'session_collector'];\n# $this->assertEquals($expected, array_keys($container->getDefinition('session_listener')->getArgument(0)->getValues()));\n\
    # $this->assertFalse($container->getDefinition('session.storage.factory.native')->getArgument(3));\n\
    # }\n# \n# public function testRequest()\n# {\n# $container = $this->createContainerFromFile('full');\n\
    # \n# $this->assertTrue($container->hasDefinition('request.add_request_formats_listener'),\
    \ '->registerRequestConfiguration() loads request.xml');\n# $listenerDef = $container->getDefinition('request.add_request_formats_listener');\n\
    # $this->assertEquals(['csv' => ['text/csv', 'text/plain'], 'pdf' => ['application/pdf']],\
    \ $listenerDef->getArgument(0));\n# }\n# \n# public function testEmptyRequestFormats()\n\
    # {\n# $container = $this->createContainerFromFile('request');\n# \n# $this->assertFalse($container->hasDefinition('request.add_request_formats_listener'),\
    \ '->registerRequestConfiguration() does not load request.xml when no request\
    \ formats are defined');\n# }\n# \n# public function testAssets()\n# {\n# $container\
    \ = $this->createContainerFromFile('assets');\n# $packages = $container->getDefinition('assets.packages');\n\
    # \n# // default package\n# $defaultPackage = $container->getDefinition((string)\
    \ $packages->getArgument(0));\n# $this->assertUrlPackage($container, $defaultPackage,\
    \ ['http://cdn.example.com'], 'SomeVersionScheme', '%%s?version=%%s');\n# \n#\
    \ // packages\n# $packageTags = $container->findTaggedServiceIds('assets.package');\n\
    # $this->assertCount(10, $packageTags);\n# \n# $packages = [];\n# foreach ($packageTags\
    \ as $serviceId => $tagAttributes) {\n# $packages[$tagAttributes[0]['package']]\
    \ = $serviceId;\n# }\n# \n# $package = $container->getDefinition((string) $packages['images_path']);\n\
    # $this->assertPathPackage($container, $package, '/foo', 'SomeVersionScheme',\
    \ '%%s?version=%%s');\n# \n# $package = $container->getDefinition((string) $packages['images']);\n\
    # $this->assertUrlPackage($container, $package, ['http://images1.example.com',\
    \ 'http://images2.example.com'], '1.0.0', '%%s?version=%%s');\n# \n# $package\
    \ = $container->getDefinition((string) $packages['foo']);\n# $this->assertPathPackage($container,\
    \ $package, '', '1.0.0', '%%s-%%s');\n# \n# $package = $container->getDefinition((string)\
    \ $packages['bar']);\n# $this->assertUrlPackage($container, $package, ['https://bar2.example.com'],\
    \ 'SomeVersionScheme', '%%s?version=%%s');\n# \n# $package = $container->getDefinition((string)\
    \ $packages['bar_version_strategy']);\n# $this->assertEquals('assets.custom_version_strategy',\
    \ (string) $package->getArgument(1));\n# \n# $package = $container->getDefinition((string)\
    \ $packages['json_manifest_strategy']);\n# $versionStrategy = $container->getDefinition((string)\
    \ $package->getArgument(1));\n# $this->assertEquals('assets.json_manifest_version_strategy',\
    \ $versionStrategy->getParent());\n# $this->assertEquals('/path/to/manifest.json',\
    \ $versionStrategy->getArgument(0));\n# $this->assertFalse($versionStrategy->getArgument(2));\n\
    # \n# $package = $container->getDefinition($packages['remote_manifest']);\n# $versionStrategy\
    \ = $container->getDefinition($package->getArgument(1));\n# $this->assertSame('assets.json_manifest_version_strategy',\
    \ $versionStrategy->getParent());\n# $this->assertSame('https://cdn.example.com/manifest.json',\
    \ $versionStrategy->getArgument(0));\n# \n# $package = $container->getDefinition($packages['var_manifest']);\n\
    # $versionStrategy = $container->getDefinition($package->getArgument(1));\n# $this->assertSame('assets.json_manifest_version_strategy',\
    \ $versionStrategy->getParent());\n# $this->assertSame('https://cdn.example.com/manifest.json',\
    \ $versionStrategy->getArgument(0));\n# $this->assertFalse($versionStrategy->getArgument(2));\n\
    # \n# $package = $container->getDefinition($packages['env_manifest']);\n# $versionStrategy\
    \ = $container->getDefinition($package->getArgument(1));\n# $this->assertSame('assets.json_manifest_version_strategy',\
    \ $versionStrategy->getParent());\n# $this->assertStringMatchesFormat('env_%s',\
    \ $versionStrategy->getArgument(0));\n# $this->assertFalse($versionStrategy->getArgument(2));\n\
    # \n# $package = $container->getDefinition((string) $packages['strict_manifest_strategy']);\n\
    # $versionStrategy = $container->getDefinition((string) $package->getArgument(1));\n\
    # $this->assertEquals('assets.json_manifest_version_strategy', $versionStrategy->getParent());\n\
    # $this->assertEquals('/path/to/manifest.json', $versionStrategy->getArgument(0));\n\
    # $this->assertTrue($versionStrategy->getArgument(2));\n# }\n# \n# public function\
    \ testAssetsDefaultVersionStrategyAsService()\n# {\n# $container = $this->createContainerFromFile('assets_version_strategy_as_service');\n\
    # $packages = $container->getDefinition('assets.packages');\n# \n# // default\
    \ package\n# $defaultPackage = $container->getDefinition((string) $packages->getArgument(0));\n\
    # $this->assertEquals('assets.custom_version_strategy', (string) $defaultPackage->getArgument(1));\n\
    # }\n# \n# public function testWebLink()\n# {\n# $container = $this->createContainerFromFile('web_link');\n\
    # $this->assertTrue($container->hasDefinition('web_link.add_link_header_listener'));\n\
    # }\n# \n# public function testMessengerServicesRemovedWhenDisabled()\n# {\n#\
    \ $container = $this->createContainerFromFile('messenger_disabled');\n# $messengerDefinitions\
    \ = array_filter(\n# $container->getDefinitions(),\n# fn ($name) => str_starts_with($name,\
    \ 'messenger.'),\n# \\ARRAY_FILTER_USE_KEY\n# );\n# \n# $this->assertEmpty($messengerDefinitions);\n\
    # $this->assertFalse($container->hasDefinition('console.command.messenger_consume_messages'));\n\
    # $this->assertFalse($container->hasDefinition('console.command.messenger_debug'));\n\
    # $this->assertFalse($container->hasDefinition('console.command.messenger_stop_workers'));\n\
    # $this->assertFalse($container->hasDefinition('console.command.messenger_setup_transports'));\n\
    # $this->assertFalse($container->hasDefinition('console.command.messenger_failed_messages_retry'));\n\
    # $this->assertFalse($container->hasDefinition('console.command.messenger_failed_messages_show'));\n\
    # $this->assertFalse($container->hasDefinition('console.command.messenger_failed_messages_remove'));\n\
    # $this->assertFalse($container->hasDefinition('cache.messenger.restart_workers_signal'));\n\
    # }\n# \n# public function testMessenger()\n# {\n# $container = $this->createContainerFromFile('messenger',\
    \ [], true, false);\n# $container->addCompilerPass(new ResolveTaggedIteratorArgumentPass());\n\
    # $container->compile();\n# \n# $expectedFactories = [\n# new Reference('scheduler.messenger_transport_factory'),\n\
    # ];\n# \n# if (class_exists(AmqpTransportFactory::class)) {\n# $expectedFactories[]\
    \ = 'messenger.transport.amqp.factory';\n# }\n# \n# if (class_exists(RedisTransportFactory::class))\
    \ {\n# $expectedFactories[] = 'messenger.transport.redis.factory';\n# }\n# \n\
    # $expectedFactories[] = 'messenger.transport.sync.factory';\n# $expectedFactories[]\
    \ = 'messenger.transport.in_memory.factory';\n# \n# if (class_exists(AmazonSqsTransportFactory::class))\
    \ {\n# $expectedFactories[] = 'messenger.transport.sqs.factory';\n# }\n# \n# if\
    \ (class_exists(BeanstalkdTransportFactory::class)) {\n# $expectedFactories[]\
    \ = 'messenger.transport.beanstalkd.factory';\n# }\n# \n# $this->assertTrue($container->hasDefinition('messenger.receiver_locator'));\n\
    # $this->assertTrue($container->hasDefinition('console.command.messenger_consume_messages'));\n\
    # $this->assertTrue($container->hasAlias('messenger.default_bus'));\n# $this->assertTrue($container->getAlias('messenger.default_bus')->isPublic());\n\
    # $this->assertTrue($container->hasDefinition('messenger.transport_factory'));\n\
    # $this->assertSame(TransportFactory::class, $container->getDefinition('messenger.transport_factory')->getClass());\n\
    # $this->assertInstanceOf(TaggedIteratorArgument::class, $container->getDefinition('messenger.transport_factory')->getArgument(0));\n\
    # $this->assertEquals($expectedFactories, $container->getDefinition('messenger.transport_factory')->getArgument(0)->getValues());\n\
    # $this->assertTrue($container->hasDefinition('messenger.listener.reset_services'));\n\
    # $this->assertSame('messenger.listener.reset_services', (string) $container->getDefinition('console.command.messenger_consume_messages')->getArgument(5));\n\
    # }\n# \n# public function testMessengerWithoutConsole()\n# {\n# $extension =\
    \ $this->createPartialMock(FrameworkExtension::class, ['hasConsole', 'getAlias']);\n\
    # $extension->method('hasConsole')->willReturn(false);\n# $extension->method('getAlias')->willReturn((new\
    \ FrameworkExtension())->getAlias());\n# \n# $container = $this->createContainerFromFile('messenger',\
    \ [], true, false, $extension);\n# $container->compile();\n# \n# $this->assertFalse($container->hasDefinition('console.command.messenger_consume_messages'));\n\
    # $this->assertTrue($container->hasAlias('messenger.default_bus'));\n# $this->assertTrue($container->getAlias('messenger.default_bus')->isPublic());\n\
    # $this->assertTrue($container->hasDefinition('messenger.transport_factory'));\n\
    # $this->assertFalse($container->hasDefinition('messenger.listener.reset_services'));\n\
    # }\n# \n# public function testMessengerMultipleFailureTransports()\n# {\n# $container\
    \ = $this->createContainerFromFile('messenger_multiple_failure_transports');\n\
    # \n# $failureTransport1Definition = $container->getDefinition('messenger.transport.failure_transport_1');\n\
    # $failureTransport1Tags = $failureTransport1Definition->getTag('messenger.receiver')[0];\n\
    # \n# $this->assertEquals([\n# 'alias' => 'failure_transport_1',\n# 'is_failure_transport'\
    \ => true,\n# ], $failureTransport1Tags);\n# \n# $failureTransport3Definition\
    \ = $container->getDefinition('messenger.transport.failure_transport_3');\n# $failureTransport3Tags\
    \ = $failureTransport3Definition->getTag('messenger.receiver')[0];\n# \n# $this->assertEquals([\n\
    # 'alias' => 'failure_transport_3',\n# 'is_failure_transport' => true,\n# ], $failureTransport3Tags);\n\
    # \n# // transport 2 exists but does not appear in the mapping\n# $this->assertFalse($container->hasDefinition('messenger.transport.failure_transport_2'));\n\
    # \n# $failureTransportsByTransportNameServiceLocator = $container->getDefinition('messenger.failure.send_failed_message_to_failure_transport_listener')->getArgument(0);\n\
    # $failureTransports = $container->getDefinition((string) $failureTransportsByTransportNameServiceLocator)->getArgument(0);\n\
    # $expectedTransportsByFailureTransports = [\n# 'transport_1' => new Reference('messenger.transport.failure_transport_1'),\n\
    # 'transport_3' => new Reference('messenger.transport.failure_transport_3'),\n\
    # ];\n# \n# $failureTransportsReferences = array_map(function (ServiceClosureArgument\
    \ $serviceClosureArgument) {\n# $values = $serviceClosureArgument->getValues();\n\
    # \n# return array_shift($values);\n# }, $failureTransports);\n# $this->assertEquals($expectedTransportsByFailureTransports,\
    \ $failureTransportsReferences);\n# }\n# \n# public function testMessengerMultipleFailureTransportsWithGlobalFailureTransport()\n\
    # {\n# $container = $this->createContainerFromFile('messenger_multiple_failure_transports_global');\n\
    # \n# $this->assertEquals('messenger.transport.failure_transport_global', (string)\
    \ $container->getAlias('messenger.failure_transports.default'));\n# \n# $failureTransport1Definition\
    \ = $container->getDefinition('messenger.transport.failure_transport_1');\n# $failureTransport1Tags\
    \ = $failureTransport1Definition->getTag('messenger.receiver')[0];\n# \n# $this->assertEquals([\n\
    # 'alias' => 'failure_transport_1',\n# 'is_failure_transport' => true,\n# ], $failureTransport1Tags);\n\
    # \n# $failureTransport3Definition = $container->getDefinition('messenger.transport.failure_transport_3');\n\
    # $failureTransport3Tags = $failureTransport3Definition->getTag('messenger.receiver')[0];\n\
    # \n# $this->assertEquals([\n# 'alias' => 'failure_transport_3',\n# 'is_failure_transport'\
    \ => true,\n# ], $failureTransport3Tags);\n# \n# $failureTransportsByTransportNameServiceLocator\
    \ = $container->getDefinition('messenger.failure.send_failed_message_to_failure_transport_listener')->getArgument(0);\n\
    # $failureTransports = $container->getDefinition((string) $failureTransportsByTransportNameServiceLocator)->getArgument(0);\n\
    # $expectedTransportsByFailureTransports = [\n# 'failure_transport_1' => new Reference('messenger.transport.failure_transport_global'),\n\
    # 'failure_transport_3' => new Reference('messenger.transport.failure_transport_global'),\n\
    # 'failure_transport_global' => new Reference('messenger.transport.failure_transport_global'),\n\
    # 'transport_1' => new Reference('messenger.transport.failure_transport_1'),\n\
    # 'transport_2' => new Reference('messenger.transport.failure_transport_global'),\n\
    # 'transport_3' => new Reference('messenger.transport.failure_transport_3'),\n\
    # ];\n# \n# $failureTransportsReferences = array_map(function (ServiceClosureArgument\
    \ $serviceClosureArgument) {\n# $values = $serviceClosureArgument->getValues();\n\
    # \n# return array_shift($values);\n# }, $failureTransports);\n# $this->assertEquals($expectedTransportsByFailureTransports,\
    \ $failureTransportsReferences);\n# }\n# \n# public function testMessengerTransports()\n\
    # {\n# $container = $this->createContainerFromFile('messenger_transports');\n\
    # $this->assertTrue($container->hasDefinition('messenger.transport.default'));\n\
    # $this->assertTrue($container->getDefinition('messenger.transport.default')->hasTag('messenger.receiver'));\n\
    # $this->assertEquals([\n# ['alias' => 'default', 'is_failure_transport' => false],\
    \ ], $container->getDefinition('messenger.transport.default')->getTag('messenger.receiver'));\n\
    # $transportArguments = $container->getDefinition('messenger.transport.default')->getArguments();\n\
    # $this->assertEquals(new Reference('messenger.default_serializer'), $transportArguments[2]);\n\
    # \n# $this->assertTrue($container->hasDefinition('messenger.transport.customised'));\n\
    # $transportFactory = $container->getDefinition('messenger.transport.customised')->getFactory();\n\
    # $transportArguments = $container->getDefinition('messenger.transport.customised')->getArguments();\n\
    # \n# $this->assertEquals([new Reference('messenger.transport_factory'), 'createTransport'],\
    \ $transportFactory);\n# $this->assertCount(3, $transportArguments);\n# $this->assertSame('amqp://localhost/%2f/messages?exchange_name=exchange_name',\
    \ $transportArguments[0]);\n# $this->assertEquals(['queue' => ['name' => 'Queue'],\
    \ 'transport_name' => 'customised'], $transportArguments[1]);\n# $this->assertEquals(new\
    \ Reference('messenger.transport.native_php_serializer'), $transportArguments[2]);\n\
    # \n# $this->assertTrue($container->hasDefinition('messenger.transport.amqp.factory'));\n\
    # \n# $this->assertTrue($container->hasDefinition('messenger.transport.redis'));\n\
    # $transportFactory = $container->getDefinition('messenger.transport.redis')->getFactory();\n\
    # $transportArguments = $container->getDefinition('messenger.transport.redis')->getArguments();\n\
    # \n# $this->assertEquals([new Reference('messenger.transport_factory'), 'createTransport'],\
    \ $transportFactory);\n# $this->assertCount(3, $transportArguments);\n# $this->assertSame('redis://127.0.0.1:6379/messages',\
    \ $transportArguments[0]);\n# \n# $this->assertTrue($container->hasDefinition('messenger.transport.redis.factory'));\n\
    # \n# $this->assertTrue($container->hasDefinition('messenger.transport.beanstalkd'));\n\
    # $transportFactory = $container->getDefinition('messenger.transport.beanstalkd')->getFactory();\n\
    # $transportArguments = $container->getDefinition('messenger.transport.beanstalkd')->getArguments();\n\
    # \n# $this->assertEquals([new Reference('messenger.transport_factory'), 'createTransport'],\
    \ $transportFactory);\n# $this->assertCount(3, $transportArguments);\n# $this->assertSame('beanstalkd://127.0.0.1:11300',\
    \ $transportArguments[0]);\n# \n# $this->assertTrue($container->hasDefinition('messenger.transport.beanstalkd.factory'));\n\
    # \n# $this->assertTrue($container->hasDefinition('messenger.transport.schedule'));\n\
    # $transportFactory = $container->getDefinition('messenger.transport.schedule')->getFactory();\n\
    # $transportArguments = $container->getDefinition('messenger.transport.schedule')->getArguments();\n\
    # \n# $this->assertEquals([new Reference('messenger.transport_factory'), 'createTransport'],\
    \ $transportFactory);\n# $this->assertCount(3, $transportArguments);\n# $this->assertSame('schedule://default',\
    \ $transportArguments[0]);\n# \n# $this->assertSame(10, $container->getDefinition('messenger.retry.multiplier_retry_strategy.customised')->getArgument(0));\n\
    # $this->assertSame(7, $container->getDefinition('messenger.retry.multiplier_retry_strategy.customised')->getArgument(1));\n\
    # $this->assertSame(3, $container->getDefinition('messenger.retry.multiplier_retry_strategy.customised')->getArgument(2));\n\
    # $this->assertSame(100, $container->getDefinition('messenger.retry.multiplier_retry_strategy.customised')->getArgument(3));\n\
    # \n# $failureTransportsByTransportNameServiceLocator = $container->getDefinition('messenger.failure.send_failed_message_to_failure_transport_listener')->getArgument(0);\n\
    # $failureTransports = $container->getDefinition((string) $failureTransportsByTransportNameServiceLocator)->getArgument(0);\n\
    # $expectedTransportsByFailureTransports = [\n# 'beanstalkd' => new Reference('messenger.transport.failed'),\n\
    # 'customised' => new Reference('messenger.transport.failed'),\n# 'default' =>\
    \ new Reference('messenger.transport.failed'),\n# 'failed' => new Reference('messenger.transport.failed'),\n\
    # 'redis' => new Reference('messenger.transport.failed'),\n# 'schedule' => new\
    \ Reference('messenger.transport.failed'),\n# ];\n# \n# $failureTransportsReferences\
    \ = array_map(function (ServiceClosureArgument $serviceClosureArgument) {\n# $values\
    \ = $serviceClosureArgument->getValues();\n# \n# return array_shift($values);\n\
    # }, $failureTransports);\n# $this->assertEquals($expectedTransportsByFailureTransports,\
    \ $failureTransportsReferences);\n# \n# $rateLimitedTransports = $container->getDefinition('messenger.rate_limiter_locator')->getArgument(0);\n\
    # $expectedRateLimitersByRateLimitedTransports = [\n# 'customised' => new Reference('limiter.customised_worker'),\n\
    # ];\n# $this->assertEquals($expectedRateLimitersByRateLimitedTransports, $rateLimitedTransports);\n\
    # }\n# \n# public function testMessengerRouting()\n# {\n# $container = $this->createContainerFromFile('messenger_routing');\n\
    # $senderLocatorDefinition = $container->getDefinition('messenger.senders_locator');\n\
    # \n# $sendersMapping = $senderLocatorDefinition->getArgument(0);\n# $this->assertEquals(['amqp',\
    \ 'messenger.transport.audit'], $sendersMapping[DummyMessage::class]);\n# $sendersLocator\
    \ = $container->getDefinition((string) $senderLocatorDefinition->getArgument(1));\n\
    # $this->assertSame(['amqp', 'audit', 'messenger.transport.amqp', 'messenger.transport.audit'],\
    \ array_keys($sendersLocator->getArgument(0)));\n# $this->assertEquals(new Reference('messenger.transport.amqp'),\
    \ $sendersLocator->getArgument(0)['amqp']->getValues()[0]);\n# $this->assertEquals(new\
    \ Reference('messenger.transport.audit'), $sendersLocator->getArgument(0)['messenger.transport.audit']->getValues()[0]);\n\
    # }\n# \n# public function testMessengerRoutingSingle()\n# {\n# $container = $this->createContainerFromFile('messenger_routing_single');\n\
    # $senderLocatorDefinition = $container->getDefinition('messenger.senders_locator');\n\
    # \n# $sendersMapping = $senderLocatorDefinition->getArgument(0);\n# $this->assertEquals(['amqp'],\
    \ $sendersMapping[DummyMessage::class]);\n# }\n# \n# public function testMessengerTransportConfiguration()\n\
    # {\n# $container = $this->createContainerFromFile('messenger_transport');\n#\
    \ \n# $this->assertSame('messenger.transport.symfony_serializer', (string) $container->getAlias('messenger.default_serializer'));\n\
    # \n# $serializerTransportDefinition = $container->getDefinition('messenger.transport.symfony_serializer');\n\
    # $this->assertSame('csv', $serializerTransportDefinition->getArgument(1));\n\
    # $this->assertSame(['enable_max_depth' => true], $serializerTransportDefinition->getArgument(2));\n\
    # }\n# \n# public function testMessengerWithMultipleBuses()\n# {\n# $container\
    \ = $this->createContainerFromFile('messenger_multiple_buses');\n# \n# $this->assertTrue($container->has('messenger.bus.commands'));\n\
    # $this->assertSame([], $container->getDefinition('messenger.bus.commands')->getArgument(0));\n\
    # $this->assertEquals([\n# ['id' => 'add_bus_name_stamp_middleware', 'arguments'\
    \ => ['messenger.bus.commands']],\n# ['id' => 'reject_redelivered_message_middleware'],\n\
    # ['id' => 'dispatch_after_current_bus'],\n# ['id' => 'failed_message_processing_middleware'],\n\
    # ['id' => 'send_message', 'arguments' => [true]],\n# ['id' => 'handle_message',\
    \ 'arguments' => [false]],\n# ], $container->getParameter('messenger.bus.commands.middleware'));\n\
    # $this->assertTrue($container->has('messenger.bus.events'));\n# $this->assertSame([],\
    \ $container->getDefinition('messenger.bus.events')->getArgument(0));\n# $this->assertEquals([\n\
    # ['id' => 'add_bus_name_stamp_middleware', 'arguments' => ['messenger.bus.events']],\n\
    # ['id' => 'reject_redelivered_message_middleware'],\n# ['id' => 'dispatch_after_current_bus'],\n\
    # ['id' => 'failed_message_processing_middleware'],\n# ['id' => 'with_factory',\
    \ 'arguments' => ['foo', true, ['bar' => 'baz']]],\n# ['id' => 'send_message',\
    \ 'arguments' => [true]],\n# ['id' => 'handle_message', 'arguments' => [false]],\n\
    # ], $container->getParameter('messenger.bus.events.middleware'));\n# $this->assertTrue($container->has('messenger.bus.queries'));\n\
    # $this->assertSame([], $container->getDefinition('messenger.bus.queries')->getArgument(0));\n\
    # $this->assertEquals([\n# ['id' => 'send_message', 'arguments' => []],\n# ['id'\
    \ => 'handle_message', 'arguments' => []],\n# ], $container->getParameter('messenger.bus.queries.middleware'));\n\
    # \n# $this->assertTrue($container->hasAlias('messenger.default_bus'));\n# $this->assertSame('messenger.bus.commands',\
    \ (string) $container->getAlias('messenger.default_bus'));\n# }\n# \n# public\
    \ function testMessengerMiddlewareFactoryErroneousFormat()\n# {\n# $this->expectException(\\\
    InvalidArgumentException::class);\n# $this->expectExceptionMessage('Invalid middleware\
    \ at path \"framework.messenger\": a map with a single factory id as key and its\
    \ arguments as value was expected, {\"foo\":[\"qux\"],\"bar\":[\"baz\"]} given.');\n\
    # $this->createContainerFromFile('messenger_middleware_factory_erroneous_format');\n\
    # }\n# \n# public function testMessengerInvalidTransportRouting()\n# {\n# $this->expectException(\\\
    LogicException::class);\n# $this->expectExceptionMessage('Invalid Messenger routing\
    \ configuration: invalid namespace \"Symfony\\*\\DummyMessage\" wildcard.');\n\
    # $this->createContainerFromFile('messenger_routing_invalid_wildcard');\n# }\n\
    # \n# public function testMessengerInvalidWildcardRouting()\n# {\n# $this->expectException(\\\
    LogicException::class);\n# $this->expectExceptionMessage('Invalid Messenger routing\
    \ configuration: the \"Symfony\\Bundle\\FrameworkBundle\\Tests\\Fixtures\\Messenger\\\
    DummyMessage\" class is being routed to a sender called \"invalid\". This is not\
    \ a valid transport or service id.');\n# $this->createContainerFromFile('messenger_routing_invalid_transport');\n\
    # }\n# \n# public function testTranslator()\n# {\n# $container = $this->createContainerFromFile('full');\n\
    # $this->assertTrue($container->hasDefinition('translator.default'), '->registerTranslatorConfiguration()\
    \ loads translation.php');\n# $this->assertEquals('translator.default', (string)\
    \ $container->getAlias('translator'), '->registerTranslatorConfiguration() redefines\
    \ translator service from identity to real translator');\n# $options = $container->getDefinition('translator.default')->getArgument(4);\n\
    # \n# $this->assertArrayHasKey('cache_dir', $options);\n# $this->assertSame($container->getParameter('kernel.cache_dir').'/translations',\
    \ $options['cache_dir']);\n# \n# $files = array_map('realpath', $options['resource_files']['en']);\n\
    # $ref = new \\ReflectionClass(Validation::class);\n# $this->assertContains(\n\
    # strtr(\\dirname($ref->getFileName()).'/Resources/translations/validators.en.xlf',\
    \ '/', \\DIRECTORY_SEPARATOR),\n# $files,\n# '->registerTranslatorConfiguration()\
    \ finds Validator translation resources'\n# );\n# $ref = new \\ReflectionClass(Form::class);\n\
    # $this->assertContains(\n# strtr(\\dirname($ref->getFileName()).'/Resources/translations/validators.en.xlf',\
    \ '/', \\DIRECTORY_SEPARATOR),\n# $files,\n# '->registerTranslatorConfiguration()\
    \ finds Form translation resources'\n# );\n# $ref = new \\ReflectionClass(AuthenticationEvents::class);\n\
    # $this->assertContains(\n# strtr(\\dirname($ref->getFileName()).'/Resources/translations/security.en.xlf',\
    \ '/', \\DIRECTORY_SEPARATOR),\n# $files,\n# '->registerTranslatorConfiguration()\
    \ finds Security translation resources'\n# );\n# $this->assertContains(\n# strtr(__DIR__.'/Fixtures/translations/test_paths.en.yml',\
    \ '/', \\DIRECTORY_SEPARATOR),\n# $files,\n# '->registerTranslatorConfiguration()\
    \ finds translation resources in custom paths'\n# );\n# $this->assertContains(\n\
    # strtr(__DIR__.'/translations/test_default.en.xlf', '/', \\DIRECTORY_SEPARATOR),\n\
    # $files,\n# '->registerTranslatorConfiguration() finds translation resources\
    \ in default path'\n# );\n# $this->assertContains(\n# strtr(__DIR__.'/Fixtures/translations/domain.with.dots.en.yml',\
    \ '/', \\DIRECTORY_SEPARATOR),\n# $files,\n# '->registerTranslatorConfiguration()\
    \ finds translation resources with dots in domain'\n# );\n# $this->assertContains(strtr(__DIR__.'/translations/security.en.yaml',\
    \ '/', \\DIRECTORY_SEPARATOR), $files);\n# \n# $positionOverridingTranslationFile\
    \ = array_search(strtr(realpath(__DIR__.'/translations/security.en.yaml'), '/',\
    \ \\DIRECTORY_SEPARATOR), $files);\n# \n# if (false !== $positionCoreTranslationFile\
    \ = array_search(strtr(realpath(__DIR__.'/../../../../Component/Security/Core/Resources/translations/security.en.xlf'),\
    \ '/', \\DIRECTORY_SEPARATOR), $files)) {\n# $this->assertContains(strtr(realpath(__DIR__.'/../../../../Component/Security/Core/Resources/translations/security.en.xlf'),\
    \ '/', \\DIRECTORY_SEPARATOR), $files);\n# } else {\n# $this->assertContains(strtr(realpath(__DIR__.'/../../vendor/symfony/security-core/Resources/translations/security.en.xlf'),\
    \ '/', \\DIRECTORY_SEPARATOR), $files);\n# \n# $positionCoreTranslationFile =\
    \ array_search(strtr(realpath(__DIR__.'/../../vendor/symfony/security-core/Resources/translations/security.en.xlf'),\
    \ '/', \\DIRECTORY_SEPARATOR), $files);\n# }\n# \n# $this->assertGreaterThan($positionCoreTranslationFile,\
    \ $positionOverridingTranslationFile);\n# \n# $calls = $container->getDefinition('translator.default')->getMethodCalls();\n\
    # $this->assertEquals(['fr'], $calls[1][1][0]);\n# \n# $nonExistingDirectories\
    \ = array_filter(\n# $options['scanned_directories'],\n# fn ($directory) => !file_exists($directory)\n\
    # );\n# \n# $this->assertNotEmpty($nonExistingDirectories, 'FrameworkBundle should\
    \ pass non existing directories to Translator');\n# \n# $this->assertSame('Fixtures/translations',\
    \ $options['cache_vary']['scanned_directories'][3]);\n# }\n# \n# public function\
    \ testTranslatorMultipleFallbacks()\n# {\n# $container = $this->createContainerFromFile('translator_fallbacks');\n\
    # \n# $calls = $container->getDefinition('translator.default')->getMethodCalls();\n\
    # $this->assertEquals(['en', 'fr'], $calls[1][1][0]);\n# }\n# \n# public function\
    \ testTranslatorCacheDirDisabled()\n# {\n# $container = $this->createContainerFromFile('translator_cache_dir_disabled');\n\
    # $options = $container->getDefinition('translator.default')->getArgument(4);\n\
    # $this->assertNull($options['cache_dir']);\n# }\n# \n# public function testValidation()\n\
    # {\n# $container = $this->createContainerFromFile('full');\n# $projectDir = $container->getParameter('kernel.project_dir');\n\
    # \n# $ref = new \\ReflectionClass(Form::class);\n# $xmlMappings = [\n# \\dirname($ref->getFileName()).'/Resources/config/validation.xml',\n\
    # strtr($projectDir.'/config/validator/foo.xml', '/', \\DIRECTORY_SEPARATOR),\n\
    # ];\n# \n# $calls = $container->getDefinition('validator.builder')->getMethodCalls();\n\
    # \n# $annotations = !class_exists(FullStack::class);\n# \n# $this->assertCount($annotations\
    \ ? 8 : 7, $calls);\n# $this->assertSame('setConstraintValidatorFactory', $calls[0][0]);\n\
    # $this->assertEquals([new Reference('validator.validator_factory')], $calls[0][1]);\n\
    # $this->assertSame('setGroupProviderLocator', $calls[1][0]);\n# $this->assertInstanceOf(ServiceLocatorArgument::class,\
    \ $calls[1][1][0]);\n# $this->assertSame('setTranslator', $calls[2][0]);\n# $this->assertEquals([new\
    \ Reference('translator', ContainerBuilder::IGNORE_ON_INVALID_REFERENCE)], $calls[2][1]);\n\
    # $this->assertSame('setTranslationDomain', $calls[3][0]);\n# $this->assertSame(['%validator.translation_domain%'],\
    \ $calls[3][1]);\n# $this->assertSame('addXmlMappings', $calls[4][0]);\n# $this->assertSame([$xmlMappings],\
    \ $calls[4][1]);\n# $i = 4;\n# if ($annotations) {\n# $this->assertSame('enableAttributeMapping',\
    \ $calls[++$i][0]);\n# }\n# $this->assertSame('addMethodMapping', $calls[++$i][0]);\n\
    # $this->assertSame(['loadValidatorMetadata'], $calls[$i][1]);\n# $this->assertSame('setMappingCache',\
    \ $calls[++$i][0]);\n# $this->assertEquals([new Reference('validator.mapping.cache.adapter')],\
    \ $calls[$i][1]);\n# }\n# \n# public function testValidationService()\n# {\n#\
    \ $container = $this->createContainerFromFile('validation_attributes', ['kernel.charset'\
    \ => 'UTF-8'], false);\n# \n# $this->assertInstanceOf(ValidatorInterface::class,\
    \ $container->get('validator.alias'));\n# }\n# \n# public function testAnnotations()\n\
    # {\n# $this->expectException(InvalidConfigurationException::class);\n# $this->expectExceptionMessage('Invalid\
    \ configuration for path \"framework.annotations\": Enabling the doctrine/annotations\
    \ integration is not supported anymore.');\n# \n# $this->createContainerFromClosure(function\
    \ (ContainerBuilder $container) {\n# $container->loadFromExtension('framework',\
    \ [\n# 'annotations' => true,\n# ]);\n# });\n# }\n# \n# public function testFileLinkFormat()\n\
    # {\n# if (\\ini_get('xdebug.file_link_format') || get_cfg_var('xdebug.file_link_format'))\
    \ {\n# $this->markTestSkipped('A custom file_link_format is defined.');\n# }\n\
    # \n# $container = $this->createContainerFromFile('full');\n# \n# $this->assertEquals('file%link%format',\
    \ $container->getParameter('debug.file_link_format'));\n# }\n# \n# public function\
    \ testValidationAttributes()\n# {\n# $container = $this->createContainerFromFile('validation_attributes');\n\
    # \n# $calls = $container->getDefinition('validator.builder')->getMethodCalls();\n\
    # \n# $this->assertCount(8, $calls);\n# $this->assertSame('enableAttributeMapping',\
    \ $calls[5][0]);\n# $this->assertSame('addMethodMapping', $calls[6][0]);\n# $this->assertSame(['loadValidatorMetadata'],\
    \ $calls[6][1]);\n# $this->assertSame('setMappingCache', $calls[7][0]);\n# $this->assertEquals([new\
    \ Reference('validator.mapping.cache.adapter')], $calls[7][1]);\n# // no cache\
    \ this time\n# }\n# \n# public function testValidationPaths()\n# {\n# require_once\
    \ __DIR__.'/Fixtures/TestBundle/TestBundle.php';\n# \n# $container = $this->createContainerFromFile('validation_attributes',\
    \ [\n# 'kernel.bundles' => ['TestBundle' => 'Symfony\\\\Bundle\\\\FrameworkBundle\\\
    \\Tests\\\\TestBundle'],\n# 'kernel.bundles_metadata' => ['TestBundle' => ['namespace'\
    \ => 'Symfony\\\\Bundle\\\\FrameworkBundle\\\\Tests', 'path' => __DIR__.'/Fixtures/TestBundle']],\n\
    # ]);\n# \n# $calls = $container->getDefinition('validator.builder')->getMethodCalls();\n\
    # \n# $this->assertCount(9, $calls);\n# $this->assertSame('addXmlMappings', $calls[4][0]);\n\
    # $this->assertSame('addYamlMappings', $calls[5][0]);\n# $this->assertSame('enableAttributeMapping',\
    \ $calls[6][0]);\n# $this->assertSame('addMethodMapping', $calls[7][0]);\n# $this->assertSame(['loadValidatorMetadata'],\
    \ $calls[7][1]);\n# $this->assertSame('setMappingCache', $calls[8][0]);\n# $this->assertEquals([new\
    \ Reference('validator.mapping.cache.adapter')], $calls[8][1]);\n# \n# $xmlMappings\
    \ = $calls[4][1][0];\n# $this->assertCount(3, $xmlMappings);\n# try {\n# // Testing\
    \ symfony/symfony\n# $this->assertStringEndsWith('Component'.\\DIRECTORY_SEPARATOR.'Form/Resources/config/validation.xml',\
    \ $xmlMappings[0]);\n# } catch (\\Exception $e) {\n# // Testing symfony/framework-bundle\
    \ with deps=high\n# $this->assertStringEndsWith('symfony'.\\DIRECTORY_SEPARATOR.'form/Resources/config/validation.xml',\
    \ $xmlMappings[0]);\n# }\n# $this->assertStringEndsWith('TestBundle/Resources/config/validation.xml',\
    \ $xmlMappings[1]);\n# \n# $yamlMappings = $calls[5][1][0];\n# $this->assertCount(1,\
    \ $yamlMappings);\n# $this->assertStringEndsWith('TestBundle/Resources/config/validation.yml',\
    \ $yamlMappings[0]);\n# }\n# \n# public function testValidationPathsUsingCustomBundlePath()\n\
    # {\n# require_once __DIR__.'/Fixtures/CustomPathBundle/src/CustomPathBundle.php';\n\
    # \n# $container = $this->createContainerFromFile('validation_attributes', [\n\
    # 'kernel.bundles' => ['CustomPathBundle' => 'Symfony\\\\Bundle\\\\FrameworkBundle\\\
    \\Tests\\\\CustomPathBundle'],\n# 'kernel.bundles_metadata' => ['TestBundle' =>\
    \ ['namespace' => 'Symfony\\\\Bundle\\\\FrameworkBundle\\\\Tests', 'path' => __DIR__.'/Fixtures/CustomPathBundle']],\n\
    # ]);\n# \n# $calls = $container->getDefinition('validator.builder')->getMethodCalls();\n\
    # $xmlMappings = $calls[4][1][0];\n# $this->assertCount(3, $xmlMappings);\n# \n\
    # try {\n# // Testing symfony/symfony\n# $this->assertStringEndsWith('Component'.\\\
    DIRECTORY_SEPARATOR.'Form/Resources/config/validation.xml', $xmlMappings[0]);\n\
    # } catch (\\Exception $e) {\n# // Testing symfony/framework-bundle with deps=high\n\
    # $this->assertStringEndsWith('symfony'.\\DIRECTORY_SEPARATOR.'form/Resources/config/validation.xml',\
    \ $xmlMappings[0]);\n# }\n# $this->assertStringEndsWith('CustomPathBundle/Resources/config/validation.xml',\
    \ $xmlMappings[1]);\n# \n# $yamlMappings = $calls[5][1][0];\n# $this->assertCount(1,\
    \ $yamlMappings);\n# $this->assertStringEndsWith('CustomPathBundle/Resources/config/validation.yml',\
    \ $yamlMappings[0]);\n# }\n# \n# public function testValidationNoStaticMethod()\n\
    # {\n# $container = $this->createContainerFromFile('validation_no_static_method');\n\
    # \n# $calls = $container->getDefinition('validator.builder')->getMethodCalls();\n\
    # \n# $annotations = !class_exists(FullStack::class);\n# \n# $this->assertCount($annotations\
    \ ? 7 : 6, $calls);\n# $this->assertSame('addXmlMappings', $calls[4][0]);\n# $i\
    \ = 4;\n# if ($annotations) {\n# $this->assertSame('enableAttributeMapping', $calls[++$i][0]);\n\
    # }\n# $this->assertSame('setMappingCache', $calls[++$i][0]);\n# $this->assertEquals([new\
    \ Reference('validator.mapping.cache.adapter')], $calls[$i][1]);\n# // no cache,\
    \ no annotations, no static methods\n# }\n# \n# public function testEmailValidationModeIsPassedToEmailValidator()\n\
    # {\n# $container = $this->createContainerFromFile('validation_email_validation_mode');\n\
    # \n# $this->assertSame('html5', $container->getDefinition('validator.email')->getArgument(0));\n\
    # }\n# \n# public function testValidationTranslationDomain()\n# {\n# $container\
    \ = $this->createContainerFromFile('validation_translation_domain');\n# \n# $this->assertSame('messages',\
    \ $container->getParameter('validator.translation_domain'));\n# }\n# \n# public\
    \ function testValidationMapping()\n# {\n# $container = $this->createContainerFromFile('validation_mapping');\n\
    # \n# $calls = $container->getDefinition('validator.builder')->getMethodCalls();\n\
    # \n# $this->assertSame('addXmlMappings', $calls[4][0]);\n# $this->assertCount(3,\
    \ $calls[4][1][0]);\n# \n# $this->assertSame('addYamlMappings', $calls[5][0]);\n\
    # $this->assertCount(3, $calls[5][1][0]);\n# $this->assertStringContainsString('foo.yml',\
    \ $calls[5][1][0][0]);\n# $this->assertStringContainsString('validation.yml',\
    \ $calls[5][1][0][1]);\n# $this->assertStringContainsString('validation.yaml',\
    \ $calls[5][1][0][2]);\n# }\n# \n# public function testValidationAutoMapping()\n\
    # {\n# $container = $this->createContainerFromFile('validation_auto_mapping');\n\
    # $parameter = [\n# 'App\\\\' => ['services' => ['foo', 'bar']],\n# 'Symfony\\\
    \\' => ['services' => ['a', 'b']],\n# 'Foo\\\\' => ['services' => []],\n# ];\n\
    # \n# $this->assertSame($parameter, $container->getParameter('validator.auto_mapping'));\n\
    # $this->assertTrue($container->hasDefinition('validator.property_info_loader'));\n\
    # }\n# \n# public function testFormsCanBeEnabledWithoutCsrfProtection()\n# {\n\
    # $container = $this->createContainerFromFile('form_no_csrf');\n# \n# $this->assertFalse($container->getParameter('form.type_extension.csrf.enabled'));\n\
    # }\n# \n# public function testStopwatchEnabledWithDebugModeEnabled()\n# {\n#\
    \ $container = $this->createContainerFromFile('default_config', [\n# 'kernel.container_class'\
    \ => 'foo',\n# 'kernel.debug' => true,\n# ]);\n# \n# $this->assertTrue($container->has('debug.stopwatch'));\n\
    # }\n# \n# public function testStopwatchEnabledWithDebugModeDisabled()\n# {\n\
    # $container = $this->createContainerFromFile('default_config', [\n# 'kernel.container_class'\
    \ => 'foo',\n# ]);\n# \n# $this->assertTrue($container->has('debug.stopwatch'));\n\
    # }\n# \n# public function testSerializerDisabled()\n# {\n# $container = $this->createContainerFromFile('default_config');\n\
    # $this->assertSame(!class_exists(FullStack::class) && class_exists(Serializer::class),\
    \ $container->has('serializer'));\n# }\n# \n# public function testSerializerEnabled()\n\
    # {\n# $container = $this->createContainerFromFile('full');\n# $this->assertTrue($container->has('serializer'));\n\
    # \n# $argument = $container->getDefinition('serializer.mapping.chain_loader')->getArgument(0);\n\
    # \n# $this->assertCount(2, $argument);\n# $this->assertEquals(AttributeLoader::class,\
    \ $argument[0]->getClass());\n# $this->assertEquals(new Reference('serializer.name_converter.camel_case_to_snake_case'),\
    \ $container->getDefinition('serializer.name_converter.metadata_aware')->getArgument(1));\n\
    # $this->assertEquals(new Reference('property_info', ContainerBuilder::IGNORE_ON_INVALID_REFERENCE),\
    \ $container->getDefinition('serializer.normalizer.object')->getArgument(3));\n\
    # $this->assertArrayHasKey('circular_reference_handler', $container->getDefinition('serializer.normalizer.object')->getArgument(6));\n\
    # $this->assertArrayHasKey('max_depth_handler', $container->getDefinition('serializer.normalizer.object')->getArgument(6));\n\
    # $this->assertEquals($container->getDefinition('serializer.normalizer.object')->getArgument(6)['max_depth_handler'],\
    \ new Reference('my.max.depth.handler'));\n# }\n# \n# public function testSerializerWithoutTranslator()\n\
    # {\n# $container = $this->createContainerFromFile('serializer_without_translator');\n\
    # $this->assertFalse($container->hasDefinition('serializer.normalizer.translatable'));\n\
    # }\n# \n# public function testRegisterSerializerExtractor()\n# {\n# $container\
    \ = $this->createContainerFromFile('full');\n# \n# $serializerExtractorDefinition\
    \ = $container->getDefinition('property_info.serializer_extractor');\n# \n# $this->assertEquals('serializer.mapping.class_metadata_factory',\
    \ $serializerExtractorDefinition->getArgument(0)->__toString());\n# $this->assertTrue(!$serializerExtractorDefinition->isPublic()\
    \ || $serializerExtractorDefinition->isPrivate());\n# $tag = $serializerExtractorDefinition->getTag('property_info.list_extractor');\n\
    # $this->assertEquals(['priority' => -999], $tag[0]);\n# }\n# \n# public function\
    \ testDataUriNormalizerRegistered()\n# {\n# $container = $this->createContainerFromFile('full');\n\
    # \n# $definition = $container->getDefinition('serializer.normalizer.data_uri');\n\
    # $tag = $definition->getTag('serializer.normalizer');\n# \n# $this->assertEquals(DataUriNormalizer::class,\
    \ $definition->getClass());\n# $this->assertEquals(-920, $tag[0]['priority']);\n\
    # }\n# \n# public function testDateIntervalNormalizerRegistered()\n# {\n# $container\
    \ = $this->createContainerFromFile('full');\n# \n# $definition = $container->getDefinition('serializer.normalizer.dateinterval');\n\
    # $tag = $definition->getTag('serializer.normalizer');\n# \n# $this->assertEquals(DateIntervalNormalizer::class,\
    \ $definition->getClass());\n# $this->assertEquals(-915, $tag[0]['priority']);\n\
    # }\n# \n# public function testDateTimeNormalizerRegistered()\n# {\n# $container\
    \ = $this->createContainerFromFile('full');\n# \n# $definition = $container->getDefinition('serializer.normalizer.datetime');\n\
    # $tag = $definition->getTag('serializer.normalizer');\n# \n# $this->assertEquals(DateTimeNormalizer::class,\
    \ $definition->getClass());\n# $this->assertEquals(-910, $tag[0]['priority']);\n\
    # }\n# \n# public function testFormErrorNormalizerRegistred()\n# {\n# $container\
    \ = $this->createContainerFromFile('full');\n# \n# $definition = $container->getDefinition('serializer.normalizer.form_error');\n\
    # $tag = $definition->getTag('serializer.normalizer');\n# \n# $this->assertEquals(FormErrorNormalizer::class,\
    \ $definition->getClass());\n# $this->assertEquals(-915, $tag[0]['priority']);\n\
    # }\n# \n# public function testJsonSerializableNormalizerRegistered()\n# {\n#\
    \ $container = $this->createContainerFromFile('full');\n# \n# $definition = $container->getDefinition('serializer.normalizer.json_serializable');\n\
    # $tag = $definition->getTag('serializer.normalizer');\n# \n# $this->assertEquals(JsonSerializableNormalizer::class,\
    \ $definition->getClass());\n# $this->assertEquals(-950, $tag[0]['priority']);\n\
    # }\n# \n# public function testObjectNormalizerRegistered()\n# {\n# $container\
    \ = $this->createContainerFromFile('full');\n# \n# $definition = $container->getDefinition('serializer.normalizer.object');\n\
    # $tag = $definition->getTag('serializer.normalizer');\n# \n# $this->assertEquals(ObjectNormalizer::class,\
    \ $definition->getClass());\n# $this->assertEquals(-1000, $tag[0]['priority']);\n\
    # }\n# \n# public function testConstraintViolationListNormalizerRegistered()\n\
    # {\n# $container = $this->createContainerFromFile('full');\n# \n# $definition\
    \ = $container->getDefinition('serializer.normalizer.constraint_violation_list');\n\
    # $tag = $definition->getTag('serializer.normalizer');\n# \n# $this->assertEquals(ConstraintViolationListNormalizer::class,\
    \ $definition->getClass());\n# $this->assertEquals(-915, $tag[0]['priority']);\n\
    # $this->assertEquals(new Reference('serializer.name_converter.metadata_aware'),\
    \ $definition->getArgument(1));\n# }\n# \n# public function testTranslatableNormalizerRegistered()\n\
    # {\n# $container = $this->createContainerFromFile('full');\n# \n# $definition\
    \ = $container->getDefinition('serializer.normalizer.translatable');\n# $tag =\
    \ $definition->getTag('serializer.normalizer');\n# \n# $this->assertSame(TranslatableNormalizer::class,\
    \ $definition->getClass());\n# $this->assertSame(-920, $tag[0]['priority']);\n\
    # $this->assertEquals(new Reference('translator'), $definition->getArgument('$translator'));\n\
    # }\n# \n# /**\n# * @see https://github.com/symfony/symfony/issues/54478"
- name: testSerializerCacheActivated
  visibility: public
  parameters: []
  comment: null
- name: testSerializerCacheUsedWithoutAnnotationsAndMappingFiles
  visibility: public
  parameters: []
  comment: null
- name: testSerializerCacheUsedWithoutAnnotationsAndMappingFilesNoDebug
  visibility: public
  parameters: []
  comment: null
- name: testSerializerCacheNotActivatedWithAnnotations
  visibility: public
  parameters: []
  comment: null
- name: testSerializerMapping
  visibility: public
  parameters: []
  comment: null
- name: testSerializerServiceIsRegisteredWhenEnabled
  visibility: public
  parameters: []
  comment: null
- name: testSerializerServiceIsNotRegisteredWhenDisabled
  visibility: public
  parameters: []
  comment: null
- name: testTypeInfoEnabled
  visibility: public
  parameters: []
  comment: null
- name: testPropertyInfoEnabled
  visibility: public
  parameters: []
  comment: null
- name: testPropertyInfoCacheActivated
  visibility: public
  parameters: []
  comment: null
- name: testPropertyInfoCacheDisabled
  visibility: public
  parameters: []
  comment: null
- name: testEventDispatcherService
  visibility: public
  parameters: []
  comment: null
- name: testCacheDefaultRedisProvider
  visibility: public
  parameters: []
  comment: null
- name: testCachePoolServices
  visibility: public
  parameters: []
  comment: null
- name: testRedisTagAwareAdapter
  visibility: public
  parameters: []
  comment: null
- name: testAppRedisTagAwareAdapter
  visibility: public
  parameters:
  - name: configFile
  comment: '# * @dataProvider appRedisTagAwareConfigProvider'
- name: appRedisTagAwareConfigProvider
  visibility: public
  parameters: []
  comment: null
- name: testCacheTaggableTagAppliedToPools
  visibility: public
  parameters: []
  comment: null
- name: testCacheTaggableTagAppliedToRedisAwareAppPool
  visibility: public
  parameters:
  - name: configFile
  comment: '# * @dataProvider appRedisTagAwareConfigProvider'
- name: testCachePoolInvalidateTagsCommandRegistered
  visibility: public
  parameters: []
  comment: null
- name: testRemovesResourceCheckerConfigCacheFactoryArgumentOnlyIfNoDebug
  visibility: public
  parameters: []
  comment: null
- name: testLoggerAwareRegistration
  visibility: public
  parameters: []
  comment: null
- name: testSessionCookieSecureAuto
  visibility: public
  parameters: []
  comment: null
- name: testRobotsTagListenerIsRegisteredInDebugMode
  visibility: public
  parameters: []
  comment: null
- name: testHttpClientDefaultOptions
  visibility: public
  parameters: []
  comment: null
- name: testScopedHttpClientWithoutQueryOption
  visibility: public
  parameters: []
  comment: null
- name: testHttpClientOverrideDefaultOptions
  visibility: public
  parameters: []
  comment: null
- name: testHttpClientRetry
  visibility: public
  parameters: []
  comment: null
- name: testHttpClientWithQueryParameterKey
  visibility: public
  parameters: []
  comment: null
- name: testHttpClientFullDefaultOptions
  visibility: public
  parameters: []
  comment: null
- name: testHttpClientRateLimiter
  visibility: public
  parameters: []
  comment: null
- name: provideMailer
  visibility: public
  parameters: []
  comment: null
- name: testMailer
  visibility: public
  parameters:
  - name: configFile
  - name: expectedTransports
  - name: expectedRecipients
  - name: expectedAllowedRecipients
  comment: '# * @dataProvider provideMailer'
- name: testMailerWithDisabledMessageBus
  visibility: public
  parameters: []
  comment: null
- name: testMailerWithSpecificMessageBus
  visibility: public
  parameters: []
  comment: null
- name: testHttpClientMockResponseFactory
  visibility: public
  parameters: []
  comment: null
- name: testRegisterParameterCollectingBehaviorDescribingTags
  visibility: public
  parameters: []
  comment: null
- name: testNotifierWithoutMailer
  visibility: public
  parameters: []
  comment: null
- name: testNotifierWithoutMessenger
  visibility: public
  parameters: []
  comment: null
- name: testNotifierWithMailerAndMessenger
  visibility: public
  parameters: []
  comment: null
- name: testNotifierWithoutTransports
  visibility: public
  parameters: []
  comment: null
- name: testIfNotifierTransportsAreKnownByFrameworkExtension
  visibility: public
  parameters: []
  comment: null
- name: testLocaleSwitcherServiceRegistered
  visibility: public
  parameters: []
  comment: null
- name: testHtmlSanitizer
  visibility: public
  parameters: []
  comment: null
- name: testHtmlSanitizerDefaultNullAllowedLinkMediaHost
  visibility: public
  parameters: []
  comment: null
- name: testHtmlSanitizerDefaultConfig
  visibility: public
  parameters: []
  comment: null
- name: testNotifierWithDisabledMessageBus
  visibility: public
  parameters: []
  comment: null
- name: testNotifierWithSpecificMessageBus
  visibility: public
  parameters: []
  comment: null
- name: testTrustedProxiesWithPrivateRanges
  visibility: public
  parameters: []
  comment: null
- name: testWebhook
  visibility: public
  parameters: []
  comment: null
- name: testWebhookWithoutSerializer
  visibility: public
  parameters: []
  comment: null
- name: testAssetMapperWithoutAssets
  visibility: public
  parameters: []
  comment: null
- name: createContainer
  visibility: protected
  parameters:
  - name: data
    default: '[]'
  comment: null
- name: createContainerFromFile
  visibility: protected
  parameters:
  - name: file
  - name: data
    default: '[]'
  - name: resetCompilerPasses
    default: 'true'
  - name: compile
    default: 'true'
  - name: extension
    default: 'null'
  comment: null
- name: createContainerFromClosure
  visibility: protected
  parameters:
  - name: closure
  - name: data
    default: '[]'
  comment: null
- name: assertPathPackage
  visibility: private
  parameters:
  - name: container
  - name: package
  - name: basePath
  - name: version
  - name: format
  comment: null
- name: assertUrlPackage
  visibility: private
  parameters:
  - name: container
  - name: package
  - name: baseUrls
  - name: version
  - name: format
  comment: null
- name: assertVersionStrategy
  visibility: private
  parameters:
  - name: container
  - name: reference
  - name: version
  - name: format
  comment: null
- name: assertCachePoolServiceDefinitionIsCreated
  visibility: private
  parameters:
  - name: container
  - name: id
  - name: adapter
  - name: defaultLifetime
  comment: null
traits:
- Psr\Cache\CacheItemPoolInterface
- Psr\Log\LoggerAwareInterface
- Symfony\Bundle\FrameworkBundle\DependencyInjection\FrameworkExtension
- Symfony\Bundle\FrameworkBundle\FrameworkBundle
- Symfony\Bundle\FrameworkBundle\Tests\Fixtures\Messenger\DummyMessage
- Symfony\Bundle\FrameworkBundle\Tests\TestCase
- Symfony\Bundle\FullStack
- Symfony\Component\Cache\Adapter\AdapterInterface
- Symfony\Component\Cache\Adapter\ApcuAdapter
- Symfony\Component\Cache\Adapter\ArrayAdapter
- Symfony\Component\Cache\Adapter\ChainAdapter
- Symfony\Component\Cache\Adapter\FilesystemAdapter
- Symfony\Component\Cache\Adapter\ProxyAdapter
- Symfony\Component\Cache\Adapter\RedisAdapter
- Symfony\Component\Cache\Adapter\RedisTagAwareAdapter
- Symfony\Component\Cache\Adapter\TagAwareAdapter
- Symfony\Component\Cache\DependencyInjection\CachePoolPass
- Symfony\Component\Config\Definition\Exception\InvalidConfigurationException
- Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument
- Symfony\Component\DependencyInjection\Argument\ServiceLocatorArgument
- Symfony\Component\DependencyInjection\Argument\TaggedIteratorArgument
- Symfony\Component\DependencyInjection\ChildDefinition
- Symfony\Component\DependencyInjection\Compiler\ResolveInstanceofConditionalsPass
- Symfony\Component\DependencyInjection\Compiler\ResolveTaggedIteratorArgumentPass
- Symfony\Component\DependencyInjection\ContainerBuilder
- Symfony\Component\DependencyInjection\ContainerInterface
- Symfony\Component\DependencyInjection\Definition
- Symfony\Component\DependencyInjection\Exception\LogicException
- Symfony\Component\DependencyInjection\Loader\ClosureLoader
- Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator
- Symfony\Component\DependencyInjection\ParameterBag\EnvPlaceholderParameterBag
- Symfony\Component\DependencyInjection\Reference
- Symfony\Component\EventDispatcher\EventDispatcherInterface
- Symfony\Component\Finder\Finder
- Symfony\Component\Form\Form
- Symfony\Component\HtmlSanitizer\HtmlSanitizer
- Symfony\Component\HtmlSanitizer\HtmlSanitizerConfig
- Symfony\Component\HtmlSanitizer\HtmlSanitizerInterface
- Symfony\Component\HttpClient\MockHttpClient
- Symfony\Component\HttpClient\RetryableHttpClient
- Symfony\Component\HttpClient\ScopingHttpClient
- Symfony\Component\HttpClient\ThrottlingHttpClient
- Symfony\Component\HttpFoundation\IpUtils
- Symfony\Component\HttpKernel\DependencyInjection\LoggerPass
- Symfony\Component\HttpKernel\Fragment\FragmentUriGeneratorInterface
- Symfony\Component\Messenger\Bridge\AmazonSqs\Transport\AmazonSqsTransportFactory
- Symfony\Component\Messenger\Bridge\Amqp\Transport\AmqpTransportFactory
- Symfony\Component\Messenger\Bridge\Beanstalkd\Transport\BeanstalkdTransportFactory
- Symfony\Component\Messenger\Bridge\Redis\Transport\RedisTransportFactory
- Symfony\Component\Messenger\Transport\TransportFactory
- Symfony\Component\Notifier\ChatterInterface
- Symfony\Component\Notifier\TexterInterface
- Symfony\Component\PropertyAccess\PropertyAccessor
- Symfony\Component\Security\Core\AuthenticationEvents
- Symfony\Component\Serializer\Mapping\Loader\AttributeLoader
- Symfony\Component\Serializer\Mapping\Loader\XmlFileLoader
- Symfony\Component\Serializer\Mapping\Loader\YamlFileLoader
- Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer
- Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer
- Symfony\Component\Serializer\Normalizer\DataUriNormalizer
- Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer
- Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
- Symfony\Component\Serializer\Normalizer\FormErrorNormalizer
- Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer
- Symfony\Component\Serializer\Normalizer\ObjectNormalizer
- Symfony\Component\Serializer\Normalizer\TranslatableNormalizer
- Symfony\Component\Serializer\Serializer
- Symfony\Component\Translation\DependencyInjection\TranslatorPass
- Symfony\Component\Translation\LocaleSwitcher
- Symfony\Component\Validator\DependencyInjection\AddConstraintValidatorsPass
- Symfony\Component\Validator\Validation
- Symfony\Component\Validator\Validator\ValidatorInterface
- Symfony\Component\Webhook\Client\RequestParser
- Symfony\Component\Webhook\Controller\WebhookController
- Symfony\Component\Workflow\Exception\InvalidDefinitionException
- Symfony\Component\Workflow\Metadata\InMemoryMetadataStore
- Symfony\Component\Workflow\WorkflowEvents
- Symfony\Contracts\Cache\CacheInterface
- Symfony\Contracts\Cache\TagAwareCacheInterface
interfaces: []
