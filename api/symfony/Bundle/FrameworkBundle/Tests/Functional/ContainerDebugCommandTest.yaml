name: ContainerDebugCommandTest
class_comment: '# * @group functional'
dependencies:
- name: Application
  type: class
  source: Symfony\Bundle\FrameworkBundle\Console\Application
- name: BackslashClass
  type: class
  source: Symfony\Bundle\FrameworkBundle\Tests\Fixtures\BackslashClass
- name: ContainerExcluded
  type: class
  source: Symfony\Bundle\FrameworkBundle\Tests\Fixtures\ContainerExcluded
- name: ApplicationTester
  type: class
  source: Symfony\Component\Console\Tester\ApplicationTester
- name: CommandCompletionTester
  type: class
  source: Symfony\Component\Console\Tester\CommandCompletionTester
- name: HttpKernelInterface
  type: class
  source: Symfony\Component\HttpKernel\HttpKernelInterface
properties: []
methods:
- name: testIgnoreBackslashWhenFindingService
  visibility: public
  parameters:
  - name: validServiceId
  comment: "# * @group functional\n# */\n# class ContainerDebugCommandTest extends\
    \ AbstractWebTestCase\n# {\n# public function testDumpContainerIfNotExists()\n\
    # {\n# static::bootKernel(['test_case' => 'ContainerDebug', 'root_config' => 'config.yml',\
    \ 'debug' => true]);\n# \n# $application = new Application(static::$kernel);\n\
    # $application->setAutoExit(false);\n# \n# @unlink(static::getContainer()->getParameter('debug.container.dump'));\n\
    # \n# $tester = new ApplicationTester($application);\n# $tester->run(['command'\
    \ => 'debug:container']);\n# \n# $this->assertFileExists(static::getContainer()->getParameter('debug.container.dump'));\n\
    # }\n# \n# public function testNoDebug()\n# {\n# static::bootKernel(['test_case'\
    \ => 'ContainerDebug', 'root_config' => 'config.yml', 'debug' => false]);\n# \n\
    # $application = new Application(static::$kernel);\n# $application->setAutoExit(false);\n\
    # \n# $tester = new ApplicationTester($application);\n# $tester->run(['command'\
    \ => 'debug:container']);\n# \n# $this->assertStringContainsString('public', $tester->getDisplay());\n\
    # }\n# \n# public function testNoDumpedXML()\n# {\n# static::bootKernel(['test_case'\
    \ => 'ContainerDebug', 'root_config' => 'config.yml', 'debug' => true, 'debug.container.dump'\
    \ => false]);\n# \n# $application = new Application(static::$kernel);\n# $application->setAutoExit(false);\n\
    # \n# $tester = new ApplicationTester($application);\n# $tester->run(['command'\
    \ => 'debug:container']);\n# \n# $this->assertStringContainsString('public', $tester->getDisplay());\n\
    # }\n# \n# public function testPrivateAlias()\n# {\n# static::bootKernel(['test_case'\
    \ => 'ContainerDebug', 'root_config' => 'config.yml']);\n# \n# $application =\
    \ new Application(static::$kernel);\n# $application->setAutoExit(false);\n# \n\
    # $tester = new ApplicationTester($application);\n# $tester->run(['command' =>\
    \ 'debug:container', '--show-hidden' => true]);\n# $this->assertStringNotContainsString('public',\
    \ $tester->getDisplay());\n# $this->assertStringNotContainsString('private_alias',\
    \ $tester->getDisplay());\n# \n# $tester->run(['command' => 'debug:container']);\n\
    # $this->assertStringContainsString('public', $tester->getDisplay());\n# $this->assertStringContainsString('private_alias',\
    \ $tester->getDisplay());\n# \n# $tester->run(['command' => 'debug:container',\
    \ 'name' => 'private_alias']);\n# $this->assertStringContainsString('The \"private_alias\"\
    \ service or alias has been removed', $tester->getDisplay());\n# }\n# \n# public\
    \ function testDeprecatedServiceAndAlias()\n# {\n# static::bootKernel(['test_case'\
    \ => 'ContainerDebug', 'root_config' => 'config.yml']);\n# \n# $application =\
    \ new Application(static::$kernel);\n# $application->setAutoExit(false);\n# \n\
    # $tester = new ApplicationTester($application);\n# \n# $tester->run(['command'\
    \ => 'debug:container', 'name' => 'deprecated', '--format' => 'txt']);\n# $this->assertStringContainsString('[WARNING]\
    \ The \"deprecated\" service is deprecated since foo/bar 1.9 and will be removed\
    \ in 2.0', $tester->getDisplay());\n# \n# $tester->run(['command' => 'debug:container',\
    \ 'name' => 'deprecated_alias', '--format' => 'txt']);\n# $this->assertStringContainsString('[WARNING]\
    \ The \"deprecated_alias\" alias is deprecated since foo/bar 1.9 and will be removed\
    \ in 2.0', $tester->getDisplay());\n# }\n# \n# public function testExcludedService()\n\
    # {\n# static::bootKernel(['test_case' => 'ContainerDebug', 'root_config' => 'config.yml']);\n\
    # \n# $application = new Application(static::$kernel);\n# $application->setAutoExit(false);\n\
    # \n# $tester = new ApplicationTester($application);\n# \n# $tester->run(['command'\
    \ => 'debug:container']);\n# $this->assertStringNotContainsString(ContainerExcluded::class,\
    \ $tester->getDisplay());\n# }\n# \n# /**\n# * @dataProvider provideIgnoreBackslashWhenFindingService"
- name: testTagsPartialSearch
  visibility: public
  parameters: []
  comment: null
- name: testDescribeEnvVars
  visibility: public
  parameters: []
  comment: null
- name: testDescribeEnvVar
  visibility: public
  parameters: []
  comment: null
- name: testGetDeprecation
  visibility: public
  parameters: []
  comment: null
- name: testGetDeprecationNone
  visibility: public
  parameters: []
  comment: null
- name: testGetDeprecationNoFile
  visibility: public
  parameters: []
  comment: null
- name: provideIgnoreBackslashWhenFindingService
  visibility: public
  parameters: []
  comment: null
- name: testComplete
  visibility: public
  parameters:
  - name: input
  - name: expectedSuggestions
  - name: notExpectedSuggestions
    default: '[]'
  comment: '# * @dataProvider provideCompletionSuggestions'
- name: provideCompletionSuggestions
  visibility: public
  parameters: []
  comment: null
traits:
- Symfony\Bundle\FrameworkBundle\Console\Application
- Symfony\Bundle\FrameworkBundle\Tests\Fixtures\BackslashClass
- Symfony\Bundle\FrameworkBundle\Tests\Fixtures\ContainerExcluded
- Symfony\Component\Console\Tester\ApplicationTester
- Symfony\Component\Console\Tester\CommandCompletionTester
- Symfony\Component\HttpKernel\HttpKernelInterface
interfaces: []
