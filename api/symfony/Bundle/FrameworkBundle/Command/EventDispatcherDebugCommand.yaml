name: EventDispatcherDebugCommand
class_comment: null
dependencies:
- name: ContainerInterface
  type: class
  source: Psr\Container\ContainerInterface
- name: DescriptorHelper
  type: class
  source: Symfony\Bundle\FrameworkBundle\Console\Helper\DescriptorHelper
- name: AsCommand
  type: class
  source: Symfony\Component\Console\Attribute\AsCommand
- name: Command
  type: class
  source: Symfony\Component\Console\Command\Command
- name: CompletionInput
  type: class
  source: Symfony\Component\Console\Completion\CompletionInput
- name: CompletionSuggestions
  type: class
  source: Symfony\Component\Console\Completion\CompletionSuggestions
- name: InputArgument
  type: class
  source: Symfony\Component\Console\Input\InputArgument
- name: InputInterface
  type: class
  source: Symfony\Component\Console\Input\InputInterface
- name: InputOption
  type: class
  source: Symfony\Component\Console\Input\InputOption
- name: OutputInterface
  type: class
  source: Symfony\Component\Console\Output\OutputInterface
- name: SymfonyStyle
  type: class
  source: Symfony\Component\Console\Style\SymfonyStyle
- name: EventDispatcherInterface
  type: class
  source: Symfony\Component\EventDispatcher\EventDispatcherInterface
- name: ServiceProviderInterface
  type: class
  source: Symfony\Contracts\Service\ServiceProviderInterface
properties: []
methods:
- name: execute
  visibility: protected
  parameters:
  - name: input
  - name: output
  comment: "# * A console command for retrieving information about event dispatcher.\n\
    # *\n# * @author Matthieu Auger <mail@matthieuauger.com>\n# *\n# * @final\n# */\n\
    # #[AsCommand(name: 'debug:event-dispatcher', description: 'Display configured\
    \ listeners for an application')]\n# class EventDispatcherDebugCommand extends\
    \ Command\n# {\n# private const DEFAULT_DISPATCHER = 'event_dispatcher';\n# \n\
    # public function __construct(\n# private ContainerInterface $dispatchers,\n#\
    \ ) {\n# parent::__construct();\n# }\n# \n# protected function configure(): void\n\
    # {\n# $this\n# ->setDefinition([\n# new InputArgument('event', InputArgument::OPTIONAL,\
    \ 'An event name or a part of the event name'),\n# new InputOption('dispatcher',\
    \ null, InputOption::VALUE_REQUIRED, 'To view events of a specific event dispatcher',\
    \ self::DEFAULT_DISPATCHER),\n# new InputOption('format', null, InputOption::VALUE_REQUIRED,\
    \ \\sprintf('The output format (\"%s\")', implode('\", \"', $this->getAvailableFormatOptions())),\
    \ 'txt'),\n# new InputOption('raw', null, InputOption::VALUE_NONE, 'To output\
    \ raw description'),\n# ])\n# ->setHelp(<<<'EOF'\n# The <info>%command.name%</info>\
    \ command displays all configured listeners:\n# \n# <info>php %command.full_name%</info>\n\
    # \n# To get specific listeners for an event, specify its name:\n# \n# <info>php\
    \ %command.full_name% kernel.request</info>\n# \n# The <info>--format</info> option\
    \ specifies the format of the command output:\n# \n# <info>php %command.full_name%\
    \ --format=json</info>\n# EOF\n# )\n# ;\n# }\n# \n# /**\n# * @throws \\LogicException"
- name: complete
  visibility: public
  parameters:
  - name: input
  - name: suggestions
  comment: null
- name: searchForEvent
  visibility: private
  parameters:
  - name: dispatcher
  - name: needle
  comment: null
- name: getAvailableFormatOptions
  visibility: private
  parameters: []
  comment: '# @return string[]'
traits:
- Psr\Container\ContainerInterface
- Symfony\Bundle\FrameworkBundle\Console\Helper\DescriptorHelper
- Symfony\Component\Console\Attribute\AsCommand
- Symfony\Component\Console\Command\Command
- Symfony\Component\Console\Completion\CompletionInput
- Symfony\Component\Console\Completion\CompletionSuggestions
- Symfony\Component\Console\Input\InputArgument
- Symfony\Component\Console\Input\InputInterface
- Symfony\Component\Console\Input\InputOption
- Symfony\Component\Console\Output\OutputInterface
- Symfony\Component\Console\Style\SymfonyStyle
- Symfony\Component\EventDispatcher\EventDispatcherInterface
- Symfony\Contracts\Service\ServiceProviderInterface
interfaces: []
