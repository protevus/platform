name: Str
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: JsonException
  type: class
  source: JsonException
- name: Environment
  type: class
  source: League\CommonMark\Environment\Environment
- name: GithubFlavoredMarkdownExtension
  type: class
  source: League\CommonMark\Extension\GithubFlavoredMarkdownExtension
- name: InlinesOnlyExtension
  type: class
  source: League\CommonMark\Extension\InlinesOnly\InlinesOnlyExtension
- name: GithubFlavoredMarkdownConverter
  type: class
  source: League\CommonMark\GithubFlavoredMarkdownConverter
- name: MarkdownConverter
  type: class
  source: League\CommonMark\MarkdownConverter
- name: TimestampFirstCombCodec
  type: class
  source: Ramsey\Uuid\Codec\TimestampFirstCombCodec
- name: CombGenerator
  type: class
  source: Ramsey\Uuid\Generator\CombGenerator
- name: Uuid
  type: class
  source: Ramsey\Uuid\Uuid
- name: UuidFactory
  type: class
  source: Ramsey\Uuid\UuidFactory
- name: Ulid
  type: class
  source: Symfony\Component\Uid\Ulid
- name: Throwable
  type: class
  source: Throwable
- name: Traversable
  type: class
  source: Traversable
- name: ASCII
  type: class
  source: voku\helper\ASCII
- name: Macroable
  type: class
  source: Macroable
properties:
- name: snakeCache
  visibility: protected
  comment: '# * The cache of snake-cased words.

    # *

    # * @var array'
- name: camelCache
  visibility: protected
  comment: '# * The cache of camel-cased words.

    # *

    # * @var array'
- name: studlyCache
  visibility: protected
  comment: '# * The cache of studly-cased words.

    # *

    # * @var array'
- name: uuidFactory
  visibility: protected
  comment: '# * The callback that should be used to generate UUIDs.

    # *

    # * @var callable|null'
- name: ulidFactory
  visibility: protected
  comment: '# * The callback that should be used to generate ULIDs.

    # *

    # * @var callable|null'
- name: randomStringFactory
  visibility: protected
  comment: '# * The callback that should be used to generate random strings.

    # *

    # * @var callable|null'
methods:
- name: of
  visibility: public
  parameters:
  - name: string
  comment: "# * The cache of snake-cased words.\n# *\n# * @var array\n# */\n# protected\
    \ static $snakeCache = [];\n# \n# /**\n# * The cache of camel-cased words.\n#\
    \ *\n# * @var array\n# */\n# protected static $camelCache = [];\n# \n# /**\n#\
    \ * The cache of studly-cased words.\n# *\n# * @var array\n# */\n# protected static\
    \ $studlyCache = [];\n# \n# /**\n# * The callback that should be used to generate\
    \ UUIDs.\n# *\n# * @var callable|null\n# */\n# protected static $uuidFactory;\n\
    # \n# /**\n# * The callback that should be used to generate ULIDs.\n# *\n# * @var\
    \ callable|null\n# */\n# protected static $ulidFactory;\n# \n# /**\n# * The callback\
    \ that should be used to generate random strings.\n# *\n# * @var callable|null\n\
    # */\n# protected static $randomStringFactory;\n# \n# /**\n# * Get a new stringable\
    \ object from the given string.\n# *\n# * @param  string  $string\n# * @return\
    \ \\Illuminate\\Support\\Stringable"
- name: after
  visibility: public
  parameters:
  - name: subject
  - name: search
  comment: '# * Return the remainder of a string after the first occurrence of a given
    value.

    # *

    # * @param  string  $subject

    # * @param  string  $search

    # * @return string'
- name: afterLast
  visibility: public
  parameters:
  - name: subject
  - name: search
  comment: '# * Return the remainder of a string after the last occurrence of a given
    value.

    # *

    # * @param  string  $subject

    # * @param  string  $search

    # * @return string'
- name: ascii
  visibility: public
  parameters:
  - name: value
  - name: language
    default: '''en'''
  comment: '# * Transliterate a UTF-8 value to ASCII.

    # *

    # * @param  string  $value

    # * @param  string  $language

    # * @return string'
- name: transliterate
  visibility: public
  parameters:
  - name: string
  - name: unknown
    default: '''?'''
  - name: strict
    default: 'false'
  comment: '# * Transliterate a string to its closest ASCII representation.

    # *

    # * @param  string  $string

    # * @param  string|null  $unknown

    # * @param  bool|null  $strict

    # * @return string'
- name: before
  visibility: public
  parameters:
  - name: subject
  - name: search
  comment: '# * Get the portion of a string before the first occurrence of a given
    value.

    # *

    # * @param  string  $subject

    # * @param  string  $search

    # * @return string'
- name: beforeLast
  visibility: public
  parameters:
  - name: subject
  - name: search
  comment: '# * Get the portion of a string before the last occurrence of a given
    value.

    # *

    # * @param  string  $subject

    # * @param  string  $search

    # * @return string'
- name: between
  visibility: public
  parameters:
  - name: subject
  - name: from
  - name: to
  comment: '# * Get the portion of a string between two given values.

    # *

    # * @param  string  $subject

    # * @param  string  $from

    # * @param  string  $to

    # * @return string'
- name: betweenFirst
  visibility: public
  parameters:
  - name: subject
  - name: from
  - name: to
  comment: '# * Get the smallest possible portion of a string between two given values.

    # *

    # * @param  string  $subject

    # * @param  string  $from

    # * @param  string  $to

    # * @return string'
- name: camel
  visibility: public
  parameters:
  - name: value
  comment: '# * Convert a value to camel case.

    # *

    # * @param  string  $value

    # * @return string'
- name: charAt
  visibility: public
  parameters:
  - name: subject
  - name: index
  comment: '# * Get the character at the specified index.

    # *

    # * @param  string  $subject

    # * @param  int  $index

    # * @return string|false'
- name: chopStart
  visibility: public
  parameters:
  - name: subject
  - name: needle
  comment: '# * Remove the given string(s) if it exists at the start of the haystack.

    # *

    # * @param  string  $subject

    # * @param  string|array  $needle

    # * @return string'
- name: chopEnd
  visibility: public
  parameters:
  - name: subject
  - name: needle
  comment: '# * Remove the given string(s) if it exists at the end of the haystack.

    # *

    # * @param  string  $subject

    # * @param  string|array  $needle

    # * @return string'
- name: contains
  visibility: public
  parameters:
  - name: haystack
  - name: needles
  - name: ignoreCase
    default: 'false'
  comment: '# * Determine if a given string contains a given substring.

    # *

    # * @param  string  $haystack

    # * @param  string|iterable<string>  $needles

    # * @param  bool  $ignoreCase

    # * @return bool'
- name: containsAll
  visibility: public
  parameters:
  - name: haystack
  - name: needles
  - name: ignoreCase
    default: 'false'
  comment: '# * Determine if a given string contains all array values.

    # *

    # * @param  string  $haystack

    # * @param  iterable<string>  $needles

    # * @param  bool  $ignoreCase

    # * @return bool'
- name: convertCase
  visibility: public
  parameters:
  - name: string
  - name: mode
    default: MB_CASE_FOLD
  - name: encoding
    default: '''UTF-8'''
  comment: '# * Convert the case of a string.

    # *

    # * @param  string  $string

    # * @param  int  $mode

    # * @param  string|null  $encoding

    # * @return string'
- name: endsWith
  visibility: public
  parameters:
  - name: haystack
  - name: needles
  comment: '# * Determine if a given string ends with a given substring.

    # *

    # * @param  string  $haystack

    # * @param  string|iterable<string>  $needles

    # * @return bool'
- name: excerpt
  visibility: public
  parameters:
  - name: text
  - name: phrase
    default: ''''''
  - name: options
    default: '[]'
  comment: '# * Extracts an excerpt from text that matches the first instance of a
    phrase.

    # *

    # * @param  string  $text

    # * @param  string  $phrase

    # * @param  array  $options

    # * @return string|null'
- name: finish
  visibility: public
  parameters:
  - name: value
  - name: cap
  comment: '# * Cap a string with a single instance of a given value.

    # *

    # * @param  string  $value

    # * @param  string  $cap

    # * @return string'
- name: wrap
  visibility: public
  parameters:
  - name: value
  - name: before
  - name: after
    default: 'null'
  comment: '# * Wrap the string with the given strings.

    # *

    # * @param  string  $value

    # * @param  string  $before

    # * @param  string|null  $after

    # * @return string'
- name: unwrap
  visibility: public
  parameters:
  - name: value
  - name: before
  - name: after
    default: 'null'
  comment: '# * Unwrap the string with the given strings.

    # *

    # * @param  string  $value

    # * @param  string  $before

    # * @param  string|null  $after

    # * @return string'
- name: is
  visibility: public
  parameters:
  - name: pattern
  - name: value
  comment: '# * Determine if a given string matches a given pattern.

    # *

    # * @param  string|iterable<string>  $pattern

    # * @param  string  $value

    # * @return bool'
- name: isAscii
  visibility: public
  parameters:
  - name: value
  comment: '# * Determine if a given string is 7 bit ASCII.

    # *

    # * @param  string  $value

    # * @return bool'
- name: isJson
  visibility: public
  parameters:
  - name: value
  comment: '# * Determine if a given value is valid JSON.

    # *

    # * @param  mixed  $value

    # * @return bool'
- name: isUrl
  visibility: public
  parameters:
  - name: value
  - name: protocols
    default: '[]'
  comment: '# * Determine if a given value is a valid URL.

    # *

    # * @param  mixed  $value

    # * @param  array  $protocols

    # * @return bool'
- name: isUuid
  visibility: public
  parameters:
  - name: value
  comment: '# * Determine if a given value is a valid UUID.

    # *

    # * @param  mixed  $value

    # * @return bool'
- name: isUlid
  visibility: public
  parameters:
  - name: value
  comment: '# * Determine if a given value is a valid ULID.

    # *

    # * @param  mixed  $value

    # * @return bool'
- name: kebab
  visibility: public
  parameters:
  - name: value
  comment: '# * Convert a string to kebab case.

    # *

    # * @param  string  $value

    # * @return string'
- name: length
  visibility: public
  parameters:
  - name: value
  - name: encoding
    default: 'null'
  comment: '# * Return the length of the given string.

    # *

    # * @param  string  $value

    # * @param  string|null  $encoding

    # * @return int'
- name: limit
  visibility: public
  parameters:
  - name: value
  - name: limit
    default: '100'
  - name: end
    default: '''...'''
  comment: '# * Limit the number of characters in a string.

    # *

    # * @param  string  $value

    # * @param  int  $limit

    # * @param  string  $end

    # * @return string'
- name: lower
  visibility: public
  parameters:
  - name: value
  comment: '# * Convert the given string to lower-case.

    # *

    # * @param  string  $value

    # * @return string'
- name: words
  visibility: public
  parameters:
  - name: value
  - name: words
    default: '100'
  - name: end
    default: '''...'''
  comment: '# * Limit the number of words in a string.

    # *

    # * @param  string  $value

    # * @param  int  $words

    # * @param  string  $end

    # * @return string'
- name: markdown
  visibility: public
  parameters:
  - name: string
  - name: options
    default: '[]'
  - name: extensions
    default: '[]'
  comment: '# * Converts GitHub flavored Markdown into HTML.

    # *

    # * @param  string  $string

    # * @param  array  $options

    # * @param  array  $extensions

    # * @return string'
- name: inlineMarkdown
  visibility: public
  parameters:
  - name: string
  - name: options
    default: '[]'
  comment: '# * Converts inline Markdown into HTML.

    # *

    # * @param  string  $string

    # * @param  array  $options

    # * @return string'
- name: mask
  visibility: public
  parameters:
  - name: string
  - name: character
  - name: index
  - name: length
    default: 'null'
  - name: encoding
    default: '''UTF-8'''
  comment: '# * Masks a portion of a string with a repeated character.

    # *

    # * @param  string  $string

    # * @param  string  $character

    # * @param  int  $index

    # * @param  int|null  $length

    # * @param  string  $encoding

    # * @return string'
- name: match
  visibility: public
  parameters:
  - name: pattern
  - name: subject
  comment: '# * Get the string matching the given pattern.

    # *

    # * @param  string  $pattern

    # * @param  string  $subject

    # * @return string'
- name: isMatch
  visibility: public
  parameters:
  - name: pattern
  - name: value
  comment: '# * Determine if a given string matches a given pattern.

    # *

    # * @param  string|iterable<string>  $pattern

    # * @param  string  $value

    # * @return bool'
- name: matchAll
  visibility: public
  parameters:
  - name: pattern
  - name: subject
  comment: '# * Get the string matching the given pattern.

    # *

    # * @param  string  $pattern

    # * @param  string  $subject

    # * @return \Illuminate\Support\Collection'
- name: numbers
  visibility: public
  parameters:
  - name: value
  comment: '# * Remove all non-numeric characters from a string.

    # *

    # * @param  string  $value

    # * @return string'
- name: padBoth
  visibility: public
  parameters:
  - name: value
  - name: length
  - name: pad
    default: ''' '''
  comment: '# * Pad both sides of a string with another.

    # *

    # * @param  string  $value

    # * @param  int  $length

    # * @param  string  $pad

    # * @return string'
- name: padLeft
  visibility: public
  parameters:
  - name: value
  - name: length
  - name: pad
    default: ''' '''
  comment: '# * Pad the left side of a string with another.

    # *

    # * @param  string  $value

    # * @param  int  $length

    # * @param  string  $pad

    # * @return string'
- name: padRight
  visibility: public
  parameters:
  - name: value
  - name: length
  - name: pad
    default: ''' '''
  comment: '# * Pad the right side of a string with another.

    # *

    # * @param  string  $value

    # * @param  int  $length

    # * @param  string  $pad

    # * @return string'
- name: parseCallback
  visibility: public
  parameters:
  - name: callback
  - name: default
    default: 'null'
  comment: '# * Parse a Class[@]method style callback into class and method.

    # *

    # * @param  string  $callback

    # * @param  string|null  $default

    # * @return array<int, string|null>'
- name: plural
  visibility: public
  parameters:
  - name: value
  - name: count
    default: '2'
  comment: '# * Get the plural form of an English word.

    # *

    # * @param  string  $value

    # * @param  int|array|\Countable  $count

    # * @return string'
- name: pluralStudly
  visibility: public
  parameters:
  - name: value
  - name: count
    default: '2'
  comment: '# * Pluralize the last word of an English, studly caps case string.

    # *

    # * @param  string  $value

    # * @param  int|array|\Countable  $count

    # * @return string'
- name: password
  visibility: public
  parameters:
  - name: length
    default: '32'
  - name: letters
    default: 'true'
  - name: numbers
    default: 'true'
  - name: symbols
    default: 'true'
  - name: spaces
    default: 'false'
  comment: '# * Generate a random, secure password.

    # *

    # * @param  int  $length

    # * @param  bool  $letters

    # * @param  bool  $numbers

    # * @param  bool  $symbols

    # * @param  bool  $spaces

    # * @return string'
- name: position
  visibility: public
  parameters:
  - name: haystack
  - name: needle
  - name: offset
    default: '0'
  - name: encoding
    default: 'null'
  comment: '# * Find the multi-byte safe position of the first occurrence of a given
    substring in a string.

    # *

    # * @param  string  $haystack

    # * @param  string  $needle

    # * @param  int  $offset

    # * @param  string|null  $encoding

    # * @return int|false'
- name: random
  visibility: public
  parameters:
  - name: length
    default: '16'
  comment: '# * Generate a more truly "random" alpha-numeric string.

    # *

    # * @param  int  $length

    # * @return string'
- name: createRandomStringsUsing
  visibility: public
  parameters:
  - name: factory
    default: 'null'
  comment: '# * Set the callable that will be used to generate random strings.

    # *

    # * @param  callable|null  $factory

    # * @return void'
- name: createRandomStringsUsingSequence
  visibility: public
  parameters:
  - name: sequence
  - name: whenMissing
    default: 'null'
  comment: '# * Set the sequence that will be used to generate random strings.

    # *

    # * @param  array  $sequence

    # * @param  callable|null  $whenMissing

    # * @return void'
- name: createRandomStringsNormally
  visibility: public
  parameters: []
  comment: '# * Indicate that random strings should be created normally and not using
    a custom factory.

    # *

    # * @return void'
- name: repeat
  visibility: public
  parameters:
  - name: string
  - name: times
  comment: '# * Repeat the given string.

    # *

    # * @param  string  $string

    # * @param  int  $times

    # * @return string'
- name: replaceArray
  visibility: public
  parameters:
  - name: search
  - name: replace
  - name: subject
  comment: '# * Replace a given value in the string sequentially with an array.

    # *

    # * @param  string  $search

    # * @param  iterable<string>  $replace

    # * @param  string  $subject

    # * @return string'
- name: toStringOr
  visibility: private
  parameters:
  - name: value
  - name: fallback
  comment: '# * Convert the given value to a string or return the given fallback on
    failure.

    # *

    # * @param  mixed  $value

    # * @param  string  $fallback

    # * @return string'
- name: replace
  visibility: public
  parameters:
  - name: search
  - name: replace
  - name: subject
  - name: caseSensitive
    default: 'true'
  comment: '# * Replace the given value in the given string.

    # *

    # * @param  string|iterable<string>  $search

    # * @param  string|iterable<string>  $replace

    # * @param  string|iterable<string>  $subject

    # * @param  bool  $caseSensitive

    # * @return string|string[]'
- name: replaceFirst
  visibility: public
  parameters:
  - name: search
  - name: replace
  - name: subject
  comment: '# * Replace the first occurrence of a given value in the string.

    # *

    # * @param  string  $search

    # * @param  string  $replace

    # * @param  string  $subject

    # * @return string'
- name: replaceStart
  visibility: public
  parameters:
  - name: search
  - name: replace
  - name: subject
  comment: '# * Replace the first occurrence of the given value if it appears at the
    start of the string.

    # *

    # * @param  string  $search

    # * @param  string  $replace

    # * @param  string  $subject

    # * @return string'
- name: replaceLast
  visibility: public
  parameters:
  - name: search
  - name: replace
  - name: subject
  comment: '# * Replace the last occurrence of a given value in the string.

    # *

    # * @param  string  $search

    # * @param  string  $replace

    # * @param  string  $subject

    # * @return string'
- name: replaceEnd
  visibility: public
  parameters:
  - name: search
  - name: replace
  - name: subject
  comment: '# * Replace the last occurrence of a given value if it appears at the
    end of the string.

    # *

    # * @param  string  $search

    # * @param  string  $replace

    # * @param  string  $subject

    # * @return string'
- name: replaceMatches
  visibility: public
  parameters:
  - name: pattern
  - name: replace
  - name: subject
  - name: limit
    default: '-1'
  comment: '# * Replace the patterns matching the given regular expression.

    # *

    # * @param  array|string  $pattern

    # * @param  \Closure|string[]|string  $replace

    # * @param  array|string  $subject

    # * @param  int  $limit

    # * @return string|string[]|null'
- name: remove
  visibility: public
  parameters:
  - name: search
  - name: subject
  - name: caseSensitive
    default: 'true'
  comment: '# * Remove any occurrence of the given string in the subject.

    # *

    # * @param  string|iterable<string>  $search

    # * @param  string|iterable<string>  $subject

    # * @param  bool  $caseSensitive

    # * @return string'
- name: reverse
  visibility: public
  parameters:
  - name: value
  comment: '# * Reverse the given string.

    # *

    # * @param  string  $value

    # * @return string'
- name: start
  visibility: public
  parameters:
  - name: value
  - name: prefix
  comment: '# * Begin a string with a single instance of a given value.

    # *

    # * @param  string  $value

    # * @param  string  $prefix

    # * @return string'
- name: upper
  visibility: public
  parameters:
  - name: value
  comment: '# * Convert the given string to upper-case.

    # *

    # * @param  string  $value

    # * @return string'
- name: title
  visibility: public
  parameters:
  - name: value
  comment: '# * Convert the given string to proper case.

    # *

    # * @param  string  $value

    # * @return string'
- name: headline
  visibility: public
  parameters:
  - name: value
  comment: '# * Convert the given string to proper case for each word.

    # *

    # * @param  string  $value

    # * @return string'
- name: apa
  visibility: public
  parameters:
  - name: value
  comment: '# * Convert the given string to APA-style title case.

    # *

    # * See: https://apastyle.apa.org/style-grammar-guidelines/capitalization/title-case

    # *

    # * @param  string  $value

    # * @return string'
- name: singular
  visibility: public
  parameters:
  - name: value
  comment: '# * Get the singular form of an English word.

    # *

    # * @param  string  $value

    # * @return string'
- name: slug
  visibility: public
  parameters:
  - name: title
  - name: separator
    default: '''-'''
  - name: language
    default: '''en'''
  - name: dictionary
    default: '[''@'''
  comment: '# * Generate a URL friendly "slug" from a given string.

    # *

    # * @param  string  $title

    # * @param  string  $separator

    # * @param  string|null  $language

    # * @param  array<string, string>  $dictionary

    # * @return string'
- name: snake
  visibility: public
  parameters:
  - name: value
  - name: delimiter
    default: '''_'''
  comment: '# * Convert a string to snake case.

    # *

    # * @param  string  $value

    # * @param  string  $delimiter

    # * @return string'
- name: trim
  visibility: public
  parameters:
  - name: value
  - name: charlist
    default: 'null'
  comment: '# * Remove all whitespace from both ends of a string.

    # *

    # * @param  string  $value

    # * @param  string|null  $charlist

    # * @return string'
- name: ltrim
  visibility: public
  parameters:
  - name: value
  - name: charlist
    default: 'null'
  comment: '# * Remove all whitespace from the beginning of a string.

    # *

    # * @param  string  $value

    # * @param  string|null  $charlist

    # * @return string'
- name: rtrim
  visibility: public
  parameters:
  - name: value
  - name: charlist
    default: 'null'
  comment: '# * Remove all whitespace from the end of a string.

    # *

    # * @param  string  $value

    # * @param  string|null  $charlist

    # * @return string'
- name: squish
  visibility: public
  parameters:
  - name: value
  comment: '# * Remove all "extra" blank space from the given string.

    # *

    # * @param  string  $value

    # * @return string'
- name: startsWith
  visibility: public
  parameters:
  - name: haystack
  - name: needles
  comment: '# * Determine if a given string starts with a given substring.

    # *

    # * @param  string  $haystack

    # * @param  string|iterable<string>  $needles

    # * @return bool'
- name: studly
  visibility: public
  parameters:
  - name: value
  comment: '# * Convert a value to studly caps case.

    # *

    # * @param  string  $value

    # * @return string'
- name: substr
  visibility: public
  parameters:
  - name: string
  - name: start
  - name: length
    default: 'null'
  - name: encoding
    default: '''UTF-8'''
  comment: '# * Returns the portion of the string specified by the start and length
    parameters.

    # *

    # * @param  string  $string

    # * @param  int  $start

    # * @param  int|null  $length

    # * @param  string  $encoding

    # * @return string'
- name: substrCount
  visibility: public
  parameters:
  - name: haystack
  - name: needle
  - name: offset
    default: '0'
  - name: length
    default: 'null'
  comment: '# * Returns the number of substring occurrences.

    # *

    # * @param  string  $haystack

    # * @param  string  $needle

    # * @param  int  $offset

    # * @param  int|null  $length

    # * @return int'
- name: substrReplace
  visibility: public
  parameters:
  - name: string
  - name: replace
  - name: offset
    default: '0'
  - name: length
    default: 'null'
  comment: '# * Replace text within a portion of a string.

    # *

    # * @param  string|string[]  $string

    # * @param  string|string[]  $replace

    # * @param  int|int[]  $offset

    # * @param  int|int[]|null  $length

    # * @return string|string[]'
- name: swap
  visibility: public
  parameters:
  - name: map
  - name: subject
  comment: '# * Swap multiple keywords in a string with other keywords.

    # *

    # * @param  array  $map

    # * @param  string  $subject

    # * @return string'
- name: take
  visibility: public
  parameters:
  - name: string
  - name: limit
  comment: '# * Take the first or last {$limit} characters of a string.

    # *

    # * @param  string  $string

    # * @param  int  $limit

    # * @return string'
- name: toBase64
  visibility: public
  parameters:
  - name: string
  comment: '# * Convert the given string to Base64 encoding.

    # *

    # * @param  string  $string

    # * @return string'
- name: fromBase64
  visibility: public
  parameters:
  - name: string
  - name: strict
    default: 'false'
  comment: '# * Decode the given Base64 encoded string.

    # *

    # * @param  string  $string

    # * @param  bool  $strict

    # * @return string|false'
- name: lcfirst
  visibility: public
  parameters:
  - name: string
  comment: '# * Make a string''s first character lowercase.

    # *

    # * @param  string  $string

    # * @return string'
- name: ucfirst
  visibility: public
  parameters:
  - name: string
  comment: '# * Make a string''s first character uppercase.

    # *

    # * @param  string  $string

    # * @return string'
- name: ucsplit
  visibility: public
  parameters:
  - name: string
  comment: '# * Split a string into pieces by uppercase characters.

    # *

    # * @param  string  $string

    # * @return string[]'
- name: wordCount
  visibility: public
  parameters:
  - name: string
  - name: characters
    default: 'null'
  comment: '# * Get the number of words a string contains.

    # *

    # * @param  string  $string

    # * @param  string|null  $characters

    # * @return int'
- name: wordWrap
  visibility: public
  parameters:
  - name: string
  - name: characters
    default: '75'
  - name: break
    default: '"\n"'
  - name: cutLongWords
    default: 'false'
  comment: '# * Wrap a string to a given number of characters.

    # *

    # * @param  string  $string

    # * @param  int  $characters

    # * @param  string  $break

    # * @param  bool  $cutLongWords

    # * @return string'
- name: uuid
  visibility: public
  parameters: []
  comment: '# * Generate a UUID (version 4).

    # *

    # * @return \Ramsey\Uuid\UuidInterface'
- name: orderedUuid
  visibility: public
  parameters: []
  comment: '# * Generate a time-ordered UUID.

    # *

    # * @return \Ramsey\Uuid\UuidInterface'
- name: createUuidsUsing
  visibility: public
  parameters:
  - name: factory
    default: 'null'
  comment: '# * Set the callable that will be used to generate UUIDs.

    # *

    # * @param  callable|null  $factory

    # * @return void'
- name: createUuidsUsingSequence
  visibility: public
  parameters:
  - name: sequence
  - name: whenMissing
    default: 'null'
  comment: '# * Set the sequence that will be used to generate UUIDs.

    # *

    # * @param  array  $sequence

    # * @param  callable|null  $whenMissing

    # * @return void'
- name: freezeUuids
  visibility: public
  parameters:
  - name: callback
    default: 'null'
  comment: '# * Always return the same UUID when generating new UUIDs.

    # *

    # * @param  \Closure|null  $callback

    # * @return \Ramsey\Uuid\UuidInterface'
- name: createUuidsNormally
  visibility: public
  parameters: []
  comment: '# * Indicate that UUIDs should be created normally and not using a custom
    factory.

    # *

    # * @return void'
- name: ulid
  visibility: public
  parameters:
  - name: time
    default: 'null'
  comment: '# * Generate a ULID.

    # *

    # * @param  \DateTimeInterface|null  $time

    # * @return \Symfony\Component\Uid\Ulid'
- name: createUlidsNormally
  visibility: public
  parameters: []
  comment: '# * Indicate that ULIDs should be created normally and not using a custom
    factory.

    # *

    # * @return void'
- name: createUlidsUsing
  visibility: public
  parameters:
  - name: factory
    default: 'null'
  comment: '# * Set the callable that will be used to generate ULIDs.

    # *

    # * @param  callable|null  $factory

    # * @return void'
- name: createUlidsUsingSequence
  visibility: public
  parameters:
  - name: sequence
  - name: whenMissing
    default: 'null'
  comment: '# * Set the sequence that will be used to generate ULIDs.

    # *

    # * @param  array  $sequence

    # * @param  callable|null  $whenMissing

    # * @return void'
- name: freezeUlids
  visibility: public
  parameters:
  - name: callback
    default: 'null'
  comment: '# * Always return the same ULID when generating new ULIDs.

    # *

    # * @param  Closure|null  $callback

    # * @return Ulid'
- name: flushCache
  visibility: public
  parameters: []
  comment: '# * Remove all strings from the casing caches.

    # *

    # * @return void'
traits:
- Closure
- Illuminate\Support\Traits\Macroable
- JsonException
- League\CommonMark\Environment\Environment
- League\CommonMark\Extension\GithubFlavoredMarkdownExtension
- League\CommonMark\Extension\InlinesOnly\InlinesOnlyExtension
- League\CommonMark\GithubFlavoredMarkdownConverter
- League\CommonMark\MarkdownConverter
- Ramsey\Uuid\Codec\TimestampFirstCombCodec
- Ramsey\Uuid\Generator\CombGenerator
- Ramsey\Uuid\Uuid
- Ramsey\Uuid\UuidFactory
- Symfony\Component\Uid\Ulid
- Throwable
- Traversable
- voku\helper\ASCII
- Macroable
interfaces: []
