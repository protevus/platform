name: Date
class_comment: '# * @see https://carbon.nesbot.com/docs/

  # * @see https://github.com/briannesbitt/Carbon/blob/master/src/Carbon/Factory.php

  # *

  # * @method static mixed use(mixed $handler)

  # * @method static void useDefault()

  # * @method static void useCallable(callable $callable)

  # * @method static void useClass(string $dateClass)

  # * @method static void useFactory(object $factory)

  # * @method static \Illuminate\Support\Carbon create($year = 0, $month = 1, $day
  = 1, $hour = 0, $minute = 0, $second = 0, $tz = null)

  # * @method static \Illuminate\Support\Carbon createFromDate($year = null, $month
  = null, $day = null, $tz = null)

  # * @method static \Illuminate\Support\Carbon|false createFromFormat($format, $time,
  $tz = null)

  # * @method static \Illuminate\Support\Carbon createFromTime($hour = 0, $minute
  = 0, $second = 0, $tz = null)

  # * @method static \Illuminate\Support\Carbon createFromTimeString($time, $tz =
  null)

  # * @method static \Illuminate\Support\Carbon createFromTimestamp($timestamp, $tz
  = null)

  # * @method static \Illuminate\Support\Carbon createFromTimestampMs($timestamp,
  $tz = null)

  # * @method static \Illuminate\Support\Carbon createFromTimestampUTC($timestamp)

  # * @method static \Illuminate\Support\Carbon createMidnightDate($year = null, $month
  = null, $day = null, $tz = null)

  # * @method static \Illuminate\Support\Carbon|false createSafe($year = null, $month
  = null, $day = null, $hour = null, $minute = null, $second = null, $tz = null)

  # * @method static void disableHumanDiffOption($humanDiffOption)

  # * @method static void enableHumanDiffOption($humanDiffOption)

  # * @method static mixed executeWithLocale($locale, $func)

  # * @method static \Illuminate\Support\Carbon fromSerialized($value)

  # * @method static array getAvailableLocales()

  # * @method static array getDays()

  # * @method static int getHumanDiffOptions()

  # * @method static array getIsoUnits()

  # * @method static array getLastErrors()

  # * @method static string getLocale()

  # * @method static int getMidDayAt()

  # * @method static \Illuminate\Support\Carbon|null getTestNow()

  # * @method static \Symfony\Component\Translation\TranslatorInterface getTranslator()

  # * @method static int getWeekEndsAt()

  # * @method static int getWeekStartsAt()

  # * @method static array getWeekendDays()

  # * @method static bool hasFormat($date, $format)

  # * @method static bool hasMacro($name)

  # * @method static bool hasRelativeKeywords($time)

  # * @method static bool hasTestNow()

  # * @method static \Illuminate\Support\Carbon instance($date)

  # * @method static bool isImmutable()

  # * @method static bool isModifiableUnit($unit)

  # * @method static bool isMutable()

  # * @method static bool isStrictModeEnabled()

  # * @method static bool localeHasDiffOneDayWords($locale)

  # * @method static bool localeHasDiffSyntax($locale)

  # * @method static bool localeHasDiffTwoDayWords($locale)

  # * @method static bool localeHasPeriodSyntax($locale)

  # * @method static bool localeHasShortUnits($locale)

  # * @method static void macro($name, $macro)

  # * @method static \Illuminate\Support\Carbon|null make($var)

  # * @method static \Illuminate\Support\Carbon maxValue()

  # * @method static \Illuminate\Support\Carbon minValue()

  # * @method static void mixin($mixin)

  # * @method static \Illuminate\Support\Carbon now($tz = null)

  # * @method static \Illuminate\Support\Carbon parse($time = null, $tz = null)

  # * @method static string pluralUnit(string $unit)

  # * @method static void resetMonthsOverflow()

  # * @method static void resetToStringFormat()

  # * @method static void resetYearsOverflow()

  # * @method static void serializeUsing($callback)

  # * @method static void setHumanDiffOptions($humanDiffOptions)

  # * @method static bool setLocale($locale)

  # * @method static void setMidDayAt($hour)

  # * @method static void setTestNow($testNow = null)

  # * @method static void setToStringFormat($format)

  # * @method static void setTranslator(\Symfony\Component\Translation\TranslatorInterface
  $translator)

  # * @method static void setUtf8($utf8)

  # * @method static void setWeekEndsAt($day)

  # * @method static void setWeekStartsAt($day)

  # * @method static void setWeekendDays($days)

  # * @method static bool shouldOverflowMonths()

  # * @method static bool shouldOverflowYears()

  # * @method static string singularUnit(string $unit)

  # * @method static \Illuminate\Support\Carbon today($tz = null)

  # * @method static \Illuminate\Support\Carbon tomorrow($tz = null)

  # * @method static void useMonthsOverflow($monthsOverflow = true)

  # * @method static void useStrictMode($strictModeEnabled = true)

  # * @method static void useYearsOverflow($yearsOverflow = true)

  # * @method static \Illuminate\Support\Carbon yesterday($tz = null)

  # *

  # * @see \Illuminate\Support\DateFactory'
dependencies:
- name: DateFactory
  type: class
  source: Illuminate\Support\DateFactory
properties: []
methods:
- name: getFacadeAccessor
  visibility: protected
  parameters: []
  comment: "# * @see https://carbon.nesbot.com/docs/\n# * @see https://github.com/briannesbitt/Carbon/blob/master/src/Carbon/Factory.php\n\
    # *\n# * @method static mixed use(mixed $handler)\n# * @method static void useDefault()\n\
    # * @method static void useCallable(callable $callable)\n# * @method static void\
    \ useClass(string $dateClass)\n# * @method static void useFactory(object $factory)\n\
    # * @method static \\Illuminate\\Support\\Carbon create($year = 0, $month = 1,\
    \ $day = 1, $hour = 0, $minute = 0, $second = 0, $tz = null)\n# * @method static\
    \ \\Illuminate\\Support\\Carbon createFromDate($year = null, $month = null, $day\
    \ = null, $tz = null)\n# * @method static \\Illuminate\\Support\\Carbon|false\
    \ createFromFormat($format, $time, $tz = null)\n# * @method static \\Illuminate\\\
    Support\\Carbon createFromTime($hour = 0, $minute = 0, $second = 0, $tz = null)\n\
    # * @method static \\Illuminate\\Support\\Carbon createFromTimeString($time, $tz\
    \ = null)\n# * @method static \\Illuminate\\Support\\Carbon createFromTimestamp($timestamp,\
    \ $tz = null)\n# * @method static \\Illuminate\\Support\\Carbon createFromTimestampMs($timestamp,\
    \ $tz = null)\n# * @method static \\Illuminate\\Support\\Carbon createFromTimestampUTC($timestamp)\n\
    # * @method static \\Illuminate\\Support\\Carbon createMidnightDate($year = null,\
    \ $month = null, $day = null, $tz = null)\n# * @method static \\Illuminate\\Support\\\
    Carbon|false createSafe($year = null, $month = null, $day = null, $hour = null,\
    \ $minute = null, $second = null, $tz = null)\n# * @method static void disableHumanDiffOption($humanDiffOption)\n\
    # * @method static void enableHumanDiffOption($humanDiffOption)\n# * @method static\
    \ mixed executeWithLocale($locale, $func)\n# * @method static \\Illuminate\\Support\\\
    Carbon fromSerialized($value)\n# * @method static array getAvailableLocales()\n\
    # * @method static array getDays()\n# * @method static int getHumanDiffOptions()\n\
    # * @method static array getIsoUnits()\n# * @method static array getLastErrors()\n\
    # * @method static string getLocale()\n# * @method static int getMidDayAt()\n\
    # * @method static \\Illuminate\\Support\\Carbon|null getTestNow()\n# * @method\
    \ static \\Symfony\\Component\\Translation\\TranslatorInterface getTranslator()\n\
    # * @method static int getWeekEndsAt()\n# * @method static int getWeekStartsAt()\n\
    # * @method static array getWeekendDays()\n# * @method static bool hasFormat($date,\
    \ $format)\n# * @method static bool hasMacro($name)\n# * @method static bool hasRelativeKeywords($time)\n\
    # * @method static bool hasTestNow()\n# * @method static \\Illuminate\\Support\\\
    Carbon instance($date)\n# * @method static bool isImmutable()\n# * @method static\
    \ bool isModifiableUnit($unit)\n# * @method static bool isMutable()\n# * @method\
    \ static bool isStrictModeEnabled()\n# * @method static bool localeHasDiffOneDayWords($locale)\n\
    # * @method static bool localeHasDiffSyntax($locale)\n# * @method static bool\
    \ localeHasDiffTwoDayWords($locale)\n# * @method static bool localeHasPeriodSyntax($locale)\n\
    # * @method static bool localeHasShortUnits($locale)\n# * @method static void\
    \ macro($name, $macro)\n# * @method static \\Illuminate\\Support\\Carbon|null\
    \ make($var)\n# * @method static \\Illuminate\\Support\\Carbon maxValue()\n# *\
    \ @method static \\Illuminate\\Support\\Carbon minValue()\n# * @method static\
    \ void mixin($mixin)\n# * @method static \\Illuminate\\Support\\Carbon now($tz\
    \ = null)\n# * @method static \\Illuminate\\Support\\Carbon parse($time = null,\
    \ $tz = null)\n# * @method static string pluralUnit(string $unit)\n# * @method\
    \ static void resetMonthsOverflow()\n# * @method static void resetToStringFormat()\n\
    # * @method static void resetYearsOverflow()\n# * @method static void serializeUsing($callback)\n\
    # * @method static void setHumanDiffOptions($humanDiffOptions)\n# * @method static\
    \ bool setLocale($locale)\n# * @method static void setMidDayAt($hour)\n# * @method\
    \ static void setTestNow($testNow = null)\n# * @method static void setToStringFormat($format)\n\
    # * @method static void setTranslator(\\Symfony\\Component\\Translation\\TranslatorInterface\
    \ $translator)\n# * @method static void setUtf8($utf8)\n# * @method static void\
    \ setWeekEndsAt($day)\n# * @method static void setWeekStartsAt($day)\n# * @method\
    \ static void setWeekendDays($days)\n# * @method static bool shouldOverflowMonths()\n\
    # * @method static bool shouldOverflowYears()\n# * @method static string singularUnit(string\
    \ $unit)\n# * @method static \\Illuminate\\Support\\Carbon today($tz = null)\n\
    # * @method static \\Illuminate\\Support\\Carbon tomorrow($tz = null)\n# * @method\
    \ static void useMonthsOverflow($monthsOverflow = true)\n# * @method static void\
    \ useStrictMode($strictModeEnabled = true)\n# * @method static void useYearsOverflow($yearsOverflow\
    \ = true)\n# * @method static \\Illuminate\\Support\\Carbon yesterday($tz = null)\n\
    # *\n# * @see \\Illuminate\\Support\\DateFactory\n# */\n# class Date extends Facade\n\
    # {\n# const DEFAULT_FACADE = DateFactory::class;\n# \n# /**\n# * Get the registered\
    \ name of the component.\n# *\n# * @return string\n# *\n# * @throws \\RuntimeException"
- name: resolveFacadeInstance
  visibility: protected
  parameters:
  - name: name
  comment: '# * Resolve the facade root instance from the container.

    # *

    # * @param  string  $name

    # * @return mixed'
traits:
- Illuminate\Support\DateFactory
interfaces: []
