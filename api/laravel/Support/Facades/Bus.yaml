name: Bus
class_comment: '# * @method static mixed dispatch(mixed $command)

  # * @method static mixed dispatchSync(mixed $command, mixed $handler = null)

  # * @method static mixed dispatchNow(mixed $command, mixed $handler = null)

  # * @method static \Illuminate\Bus\Batch|null findBatch(string $batchId)

  # * @method static \Illuminate\Bus\PendingBatch batch(\Illuminate\Support\Collection|array|mixed
  $jobs)

  # * @method static \Illuminate\Foundation\Bus\PendingChain chain(\Illuminate\Support\Collection|array
  $jobs)

  # * @method static bool hasCommandHandler(mixed $command)

  # * @method static bool|mixed getCommandHandler(mixed $command)

  # * @method static mixed dispatchToQueue(mixed $command)

  # * @method static void dispatchAfterResponse(mixed $command, mixed $handler = null)

  # * @method static \Illuminate\Bus\Dispatcher pipeThrough(array $pipes)

  # * @method static \Illuminate\Bus\Dispatcher map(array $map)

  # * @method static \Illuminate\Support\Testing\Fakes\BusFake except(array|string
  $jobsToDispatch)

  # * @method static void assertDispatched(string|\Closure $command, callable|int|null
  $callback = null)

  # * @method static void assertDispatchedTimes(string|\Closure $command, int $times
  = 1)

  # * @method static void assertNotDispatched(string|\Closure $command, callable|null
  $callback = null)

  # * @method static void assertNothingDispatched()

  # * @method static void assertDispatchedSync(string|\Closure $command, callable|int|null
  $callback = null)

  # * @method static void assertDispatchedSyncTimes(string|\Closure $command, int
  $times = 1)

  # * @method static void assertNotDispatchedSync(string|\Closure $command, callable|null
  $callback = null)

  # * @method static void assertDispatchedAfterResponse(string|\Closure $command,
  callable|int|null $callback = null)

  # * @method static void assertDispatchedAfterResponseTimes(string|\Closure $command,
  int $times = 1)

  # * @method static void assertNotDispatchedAfterResponse(string|\Closure $command,
  callable|null $callback = null)

  # * @method static void assertChained(array $expectedChain)

  # * @method static void assertDispatchedWithoutChain(string|\Closure $command, callable|null
  $callback = null)

  # * @method static \Illuminate\Support\Testing\Fakes\ChainedBatchTruthTest chainedBatch(\Closure
  $callback)

  # * @method static void assertBatched(callable $callback)

  # * @method static void assertBatchCount(int $count)

  # * @method static void assertNothingBatched()

  # * @method static \Illuminate\Support\Collection dispatched(string $command, callable|null
  $callback = null)

  # * @method static \Illuminate\Support\Collection dispatchedSync(string $command,
  callable|null $callback = null)

  # * @method static \Illuminate\Support\Collection dispatchedAfterResponse(string
  $command, callable|null $callback = null)

  # * @method static \Illuminate\Support\Collection batched(callable $callback)

  # * @method static bool hasDispatched(string $command)

  # * @method static bool hasDispatchedSync(string $command)

  # * @method static bool hasDispatchedAfterResponse(string $command)

  # * @method static \Illuminate\Bus\Batch dispatchFakeBatch(string $name = '''')

  # * @method static \Illuminate\Bus\Batch recordPendingBatch(\Illuminate\Bus\PendingBatch
  $pendingBatch)

  # * @method static \Illuminate\Support\Testing\Fakes\BusFake serializeAndRestore(bool
  $serializeAndRestore = true)

  # *

  # * @see \Illuminate\Bus\Dispatcher

  # * @see \Illuminate\Support\Testing\Fakes\BusFake'
dependencies:
- name: BatchRepository
  type: class
  source: Illuminate\Bus\BatchRepository
- name: BusDispatcherContract
  type: class
  source: Illuminate\Contracts\Bus\Dispatcher
- name: PendingChain
  type: class
  source: Illuminate\Foundation\Bus\PendingChain
- name: BusFake
  type: class
  source: Illuminate\Support\Testing\Fakes\BusFake
properties: []
methods:
- name: fake
  visibility: public
  parameters:
  - name: jobsToFake
    default: '[]'
  - name: batchRepository
    default: 'null'
  comment: '# * @method static mixed dispatch(mixed $command)

    # * @method static mixed dispatchSync(mixed $command, mixed $handler = null)

    # * @method static mixed dispatchNow(mixed $command, mixed $handler = null)

    # * @method static \Illuminate\Bus\Batch|null findBatch(string $batchId)

    # * @method static \Illuminate\Bus\PendingBatch batch(\Illuminate\Support\Collection|array|mixed
    $jobs)

    # * @method static \Illuminate\Foundation\Bus\PendingChain chain(\Illuminate\Support\Collection|array
    $jobs)

    # * @method static bool hasCommandHandler(mixed $command)

    # * @method static bool|mixed getCommandHandler(mixed $command)

    # * @method static mixed dispatchToQueue(mixed $command)

    # * @method static void dispatchAfterResponse(mixed $command, mixed $handler =
    null)

    # * @method static \Illuminate\Bus\Dispatcher pipeThrough(array $pipes)

    # * @method static \Illuminate\Bus\Dispatcher map(array $map)

    # * @method static \Illuminate\Support\Testing\Fakes\BusFake except(array|string
    $jobsToDispatch)

    # * @method static void assertDispatched(string|\Closure $command, callable|int|null
    $callback = null)

    # * @method static void assertDispatchedTimes(string|\Closure $command, int $times
    = 1)

    # * @method static void assertNotDispatched(string|\Closure $command, callable|null
    $callback = null)

    # * @method static void assertNothingDispatched()

    # * @method static void assertDispatchedSync(string|\Closure $command, callable|int|null
    $callback = null)

    # * @method static void assertDispatchedSyncTimes(string|\Closure $command, int
    $times = 1)

    # * @method static void assertNotDispatchedSync(string|\Closure $command, callable|null
    $callback = null)

    # * @method static void assertDispatchedAfterResponse(string|\Closure $command,
    callable|int|null $callback = null)

    # * @method static void assertDispatchedAfterResponseTimes(string|\Closure $command,
    int $times = 1)

    # * @method static void assertNotDispatchedAfterResponse(string|\Closure $command,
    callable|null $callback = null)

    # * @method static void assertChained(array $expectedChain)

    # * @method static void assertDispatchedWithoutChain(string|\Closure $command,
    callable|null $callback = null)

    # * @method static \Illuminate\Support\Testing\Fakes\ChainedBatchTruthTest chainedBatch(\Closure
    $callback)

    # * @method static void assertBatched(callable $callback)

    # * @method static void assertBatchCount(int $count)

    # * @method static void assertNothingBatched()

    # * @method static \Illuminate\Support\Collection dispatched(string $command,
    callable|null $callback = null)

    # * @method static \Illuminate\Support\Collection dispatchedSync(string $command,
    callable|null $callback = null)

    # * @method static \Illuminate\Support\Collection dispatchedAfterResponse(string
    $command, callable|null $callback = null)

    # * @method static \Illuminate\Support\Collection batched(callable $callback)

    # * @method static bool hasDispatched(string $command)

    # * @method static bool hasDispatchedSync(string $command)

    # * @method static bool hasDispatchedAfterResponse(string $command)

    # * @method static \Illuminate\Bus\Batch dispatchFakeBatch(string $name = '''')

    # * @method static \Illuminate\Bus\Batch recordPendingBatch(\Illuminate\Bus\PendingBatch
    $pendingBatch)

    # * @method static \Illuminate\Support\Testing\Fakes\BusFake serializeAndRestore(bool
    $serializeAndRestore = true)

    # *

    # * @see \Illuminate\Bus\Dispatcher

    # * @see \Illuminate\Support\Testing\Fakes\BusFake

    # */

    # class Bus extends Facade

    # {

    # /**

    # * Replace the bound instance with a fake.

    # *

    # * @param  array|string  $jobsToFake

    # * @param  \Illuminate\Bus\BatchRepository|null  $batchRepository

    # * @return \Illuminate\Support\Testing\Fakes\BusFake'
- name: dispatchChain
  visibility: public
  parameters:
  - name: jobs
  comment: '# * Dispatch the given chain of jobs.

    # *

    # * @param  array|mixed  $jobs

    # * @return \Illuminate\Foundation\Bus\PendingDispatch'
- name: getFacadeAccessor
  visibility: protected
  parameters: []
  comment: '# * Get the registered name of the component.

    # *

    # * @return string'
traits:
- Illuminate\Bus\BatchRepository
- Illuminate\Foundation\Bus\PendingChain
- Illuminate\Support\Testing\Fakes\BusFake
interfaces: []
