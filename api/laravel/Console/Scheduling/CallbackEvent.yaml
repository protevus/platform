name: CallbackEvent
class_comment: null
dependencies:
- name: Container
  type: class
  source: Illuminate\Contracts\Container\Container
- name: Reflector
  type: class
  source: Illuminate\Support\Reflector
- name: InvalidArgumentException
  type: class
  source: InvalidArgumentException
- name: LogicException
  type: class
  source: LogicException
- name: RuntimeException
  type: class
  source: RuntimeException
- name: Throwable
  type: class
  source: Throwable
properties:
- name: callback
  visibility: protected
  comment: '# * The callback to call.

    # *

    # * @var string'
- name: parameters
  visibility: protected
  comment: '# * The parameters to pass to the method.

    # *

    # * @var array'
- name: result
  visibility: protected
  comment: '# * The result of the callback''s execution.

    # *

    # * @var mixed'
- name: exception
  visibility: protected
  comment: '# * The exception that was thrown when calling the callback, if any.

    # *

    # * @var \Throwable|null'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: mutex
  - name: callback
  - name: parameters
    default: '[]'
  - name: timezone
    default: 'null'
  comment: "# * The callback to call.\n# *\n# * @var string\n# */\n# protected $callback;\n\
    # \n# /**\n# * The parameters to pass to the method.\n# *\n# * @var array\n# */\n\
    # protected $parameters;\n# \n# /**\n# * The result of the callback's execution.\n\
    # *\n# * @var mixed\n# */\n# protected $result;\n# \n# /**\n# * The exception\
    \ that was thrown when calling the callback, if any.\n# *\n# * @var \\Throwable|null\n\
    # */\n# protected $exception;\n# \n# /**\n# * Create a new event instance.\n#\
    \ *\n# * @param  \\Illuminate\\Console\\Scheduling\\EventMutex  $mutex\n# * @param\
    \  string|callable  $callback\n# * @param  array  $parameters\n# * @param  \\\
    DateTimeZone|string|null  $timezone\n# * @return void\n# *\n# * @throws \\InvalidArgumentException"
- name: run
  visibility: public
  parameters:
  - name: container
  comment: '# * Run the callback event.

    # *

    # * @param  \Illuminate\Contracts\Container\Container  $container

    # * @return mixed

    # *

    # * @throws \Throwable'
- name: shouldSkipDueToOverlapping
  visibility: public
  parameters: []
  comment: '# * Determine if the event should skip because another process is overlapping.

    # *

    # * @return bool'
- name: runInBackground
  visibility: public
  parameters: []
  comment: '# * Indicate that the callback should run in the background.

    # *

    # * @return void

    # *

    # * @throws \RuntimeException'
- name: execute
  visibility: protected
  parameters:
  - name: container
  comment: '# * Run the callback.

    # *

    # * @param  \Illuminate\Contracts\Container\Container  $container

    # * @return int'
- name: withoutOverlapping
  visibility: public
  parameters:
  - name: expiresAt
    default: '1440'
  comment: '# * Do not allow the event to overlap each other.

    # *

    # * The expiration time of the underlying cache lock may be specified in minutes.

    # *

    # * @param  int  $expiresAt

    # * @return $this

    # *

    # * @throws \LogicException'
- name: onOneServer
  visibility: public
  parameters: []
  comment: '# * Allow the event to only run on one server for each cron expression.

    # *

    # * @return $this

    # *

    # * @throws \LogicException'
- name: getSummaryForDisplay
  visibility: public
  parameters: []
  comment: '# * Get the summary of the event for display.

    # *

    # * @return string'
- name: mutexName
  visibility: public
  parameters: []
  comment: '# * Get the mutex name for the scheduled command.

    # *

    # * @return string'
- name: removeMutex
  visibility: protected
  parameters: []
  comment: '# * Clear the mutex for the event.

    # *

    # * @return void'
traits:
- Illuminate\Contracts\Container\Container
- Illuminate\Support\Reflector
- InvalidArgumentException
- LogicException
- RuntimeException
- Throwable
interfaces: []
