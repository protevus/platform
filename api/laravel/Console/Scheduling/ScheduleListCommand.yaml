name: ScheduleListCommand
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: CronExpression
  type: class
  source: Cron\CronExpression
- name: DateTimeZone
  type: class
  source: DateTimeZone
- name: Application
  type: class
  source: Illuminate\Console\Application
- name: Command
  type: class
  source: Illuminate\Console\Command
- name: Carbon
  type: class
  source: Illuminate\Support\Carbon
- name: ReflectionClass
  type: class
  source: ReflectionClass
- name: ReflectionFunction
  type: class
  source: ReflectionFunction
- name: AsCommand
  type: class
  source: Symfony\Component\Console\Attribute\AsCommand
- name: Terminal
  type: class
  source: Symfony\Component\Console\Terminal
properties:
- name: signature
  visibility: protected
  comment: '# * The console command name.

    # *

    # * @var string'
- name: description
  visibility: protected
  comment: '# * The console command description.

    # *

    # * @var string'
- name: terminalWidthResolver
  visibility: protected
  comment: '# * The terminal width resolver callback.

    # *

    # * @var \Closure|null'
methods:
- name: handle
  visibility: public
  parameters:
  - name: schedule
  comment: "# * The console command name.\n# *\n# * @var string\n# */\n# protected\
    \ $signature = 'schedule:list\n# {--timezone= : The timezone that times should\
    \ be displayed in}\n# {--next : Sort the listed tasks by their next due date}\n\
    # ';\n# \n# /**\n# * The console command description.\n# *\n# * @var string\n\
    # */\n# protected $description = 'List all scheduled tasks';\n# \n# /**\n# * The\
    \ terminal width resolver callback.\n# *\n# * @var \\Closure|null\n# */\n# protected\
    \ static $terminalWidthResolver;\n# \n# /**\n# * Execute the console command.\n\
    # *\n# * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n# * @return\
    \ void\n# *\n# * @throws \\Exception"
- name: getCronExpressionSpacing
  visibility: private
  parameters:
  - name: events
  comment: '# * Get the spacing to be used on each event row.

    # *

    # * @param  \Illuminate\Support\Collection  $events

    # * @return array<int, int>'
- name: getRepeatExpressionSpacing
  visibility: private
  parameters:
  - name: events
  comment: '# * Get the spacing to be used on each event row.

    # *

    # * @param  \Illuminate\Support\Collection  $events

    # * @return int'
- name: listEvent
  visibility: private
  parameters:
  - name: event
  - name: terminalWidth
  - name: expressionSpacing
  - name: repeatExpressionSpacing
  - name: timezone
  comment: '# * List the given even in the console.

    # *

    # * @param  \Illuminate\Console\Scheduling\Event  $event

    # * @param  int  $terminalWidth

    # * @param  array  $expressionSpacing

    # * @param  int  $repeatExpressionSpacing

    # * @param  \DateTimeZone  $timezone

    # * @return array'
- name: getRepeatExpression
  visibility: private
  parameters:
  - name: event
  comment: '# * Get the repeat expression for an event.

    # *

    # * @param  \Illuminate\Console\Scheduling\Event  $event

    # * @return string'
- name: sortEvents
  visibility: private
  parameters:
  - name: events
  - name: timezone
  comment: '# * Sort the events by due date if option set.

    # *

    # * @param  \Illuminate\Support\Collection  $events

    # * @param  \DateTimeZone  $timezone

    # * @return \Illuminate\Support\Collection'
- name: getNextDueDateForEvent
  visibility: private
  parameters:
  - name: event
  - name: timezone
  comment: '# * Get the next due date for an event.

    # *

    # * @param  \Illuminate\Console\Scheduling\Event  $event

    # * @param  \DateTimeZone  $timezone

    # * @return \Illuminate\Support\Carbon'
- name: formatCronExpression
  visibility: private
  parameters:
  - name: expression
  - name: spacing
  comment: '# * Format the cron expression based on the spacing provided.

    # *

    # * @param  string  $expression

    # * @param  array<int, int>  $spacing

    # * @return string'
- name: getClosureLocation
  visibility: private
  parameters:
  - name: event
  comment: '# * Get the file and line number for the event closure.

    # *

    # * @param  \Illuminate\Console\Scheduling\CallbackEvent  $event

    # * @return string'
- name: getTerminalWidth
  visibility: public
  parameters: []
  comment: '# * Get the terminal width.

    # *

    # * @return int'
- name: resolveTerminalWidthUsing
  visibility: public
  parameters:
  - name: resolver
  comment: '# * Set a callback that should be used when resolving the terminal width.

    # *

    # * @param  \Closure|null  $resolver

    # * @return void'
traits:
- Closure
- Cron\CronExpression
- DateTimeZone
- Illuminate\Console\Application
- Illuminate\Console\Command
- Illuminate\Support\Carbon
- ReflectionClass
- ReflectionFunction
- Symfony\Component\Console\Attribute\AsCommand
- Symfony\Component\Console\Terminal
interfaces: []
