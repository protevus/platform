name: Enum
class_comment: null
dependencies:
- name: Arrayable
  type: class
  source: Illuminate\Contracts\Support\Arrayable
- name: Rule
  type: class
  source: Illuminate\Contracts\Validation\Rule
- name: ValidatorAwareRule
  type: class
  source: Illuminate\Contracts\Validation\ValidatorAwareRule
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Conditionable
  type: class
  source: Illuminate\Support\Traits\Conditionable
- name: TypeError
  type: class
  source: TypeError
- name: Conditionable
  type: class
  source: Conditionable
properties:
- name: type
  visibility: protected
  comment: '# * The type of the enum.

    # *

    # * @var class-string'
- name: validator
  visibility: protected
  comment: '# * The current validator instance.

    # *

    # * @var \Illuminate\Validation\Validator'
- name: only
  visibility: protected
  comment: '# * The cases that should be considered valid.

    # *

    # * @var array'
- name: except
  visibility: protected
  comment: '# * The cases that should be considered invalid.

    # *

    # * @var array'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: type
  comment: "# * The type of the enum.\n# *\n# * @var class-string\n# */\n# protected\
    \ $type;\n# \n# /**\n# * The current validator instance.\n# *\n# * @var \\Illuminate\\\
    Validation\\Validator\n# */\n# protected $validator;\n# \n# /**\n# * The cases\
    \ that should be considered valid.\n# *\n# * @var array\n# */\n# protected $only\
    \ = [];\n# \n# /**\n# * The cases that should be considered invalid.\n# *\n# *\
    \ @var array\n# */\n# protected $except = [];\n# \n# /**\n# * Create a new rule\
    \ instance.\n# *\n# * @param  class-string  $type\n# * @return void"
- name: passes
  visibility: public
  parameters:
  - name: attribute
  - name: value
  comment: '# * Determine if the validation rule passes.

    # *

    # * @param  string  $attribute

    # * @param  mixed  $value

    # * @return bool'
- name: only
  visibility: public
  parameters:
  - name: values
  comment: '# * Specify the cases that should be considered valid.

    # *

    # * @param  \UnitEnum[]|\UnitEnum|\Illuminate\Contracts\Support\Arrayable<array-key,
    \UnitEnum>  $values

    # * @return $this'
- name: except
  visibility: public
  parameters:
  - name: values
  comment: '# * Specify the cases that should be considered invalid.

    # *

    # * @param  \UnitEnum[]|\UnitEnum|\Illuminate\Contracts\Support\Arrayable<array-key,
    \UnitEnum>  $values

    # * @return $this'
- name: isDesirable
  visibility: protected
  parameters:
  - name: value
  comment: '# * Determine if the given case is a valid case based on the only / except
    values.

    # *

    # * @param  mixed  $value

    # * @return bool'
- name: message
  visibility: public
  parameters: []
  comment: '# * Get the validation error message.

    # *

    # * @return array'
- name: setValidator
  visibility: public
  parameters:
  - name: validator
  comment: '# * Set the current validator.

    # *

    # * @param  \Illuminate\Validation\Validator  $validator

    # * @return $this'
traits:
- Illuminate\Contracts\Support\Arrayable
- Illuminate\Contracts\Validation\Rule
- Illuminate\Contracts\Validation\ValidatorAwareRule
- Illuminate\Support\Arr
- Illuminate\Support\Traits\Conditionable
- TypeError
- Conditionable
interfaces:
- Rule
