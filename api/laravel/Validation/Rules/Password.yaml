name: Password
class_comment: null
dependencies:
- name: Container
  type: class
  source: Illuminate\Container\Container
- name: DataAwareRule
  type: class
  source: Illuminate\Contracts\Validation\DataAwareRule
- name: Rule
  type: class
  source: Illuminate\Contracts\Validation\Rule
- name: UncompromisedVerifier
  type: class
  source: Illuminate\Contracts\Validation\UncompromisedVerifier
- name: ValidatorAwareRule
  type: class
  source: Illuminate\Contracts\Validation\ValidatorAwareRule
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Validator
  type: class
  source: Illuminate\Support\Facades\Validator
- name: Conditionable
  type: class
  source: Illuminate\Support\Traits\Conditionable
- name: InvalidArgumentException
  type: class
  source: InvalidArgumentException
- name: Conditionable
  type: class
  source: Conditionable
properties:
- name: validator
  visibility: protected
  comment: '# * The validator performing the validation.

    # *

    # * @var \Illuminate\Contracts\Validation\Validator'
- name: data
  visibility: protected
  comment: '# * The data under validation.

    # *

    # * @var array'
- name: min
  visibility: protected
  comment: '# * The minimum size of the password.

    # *

    # * @var int'
- name: max
  visibility: protected
  comment: '# * The maximum size of the password.

    # *

    # * @var int'
- name: mixedCase
  visibility: protected
  comment: '# * If the password requires at least one uppercase and one lowercase
    letter.

    # *

    # * @var bool'
- name: letters
  visibility: protected
  comment: '# * If the password requires at least one letter.

    # *

    # * @var bool'
- name: numbers
  visibility: protected
  comment: '# * If the password requires at least one number.

    # *

    # * @var bool'
- name: symbols
  visibility: protected
  comment: '# * If the password requires at least one symbol.

    # *

    # * @var bool'
- name: uncompromised
  visibility: protected
  comment: '# * If the password should not have been compromised in data leaks.

    # *

    # * @var bool'
- name: compromisedThreshold
  visibility: protected
  comment: '# * The number of times a password can appear in data leaks before being
    considered compromised.

    # *

    # * @var int'
- name: customRules
  visibility: protected
  comment: '# * Additional validation rules that should be merged into the default
    rules during validation.

    # *

    # * @var array'
- name: messages
  visibility: protected
  comment: '# * The failure messages, if any.

    # *

    # * @var array'
- name: defaultCallback
  visibility: public
  comment: '# * The callback that will generate the "default" version of the password
    rule.

    # *

    # * @var string|array|callable|null'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: min
  comment: "# * The validator performing the validation.\n# *\n# * @var \\Illuminate\\\
    Contracts\\Validation\\Validator\n# */\n# protected $validator;\n# \n# /**\n#\
    \ * The data under validation.\n# *\n# * @var array\n# */\n# protected $data;\n\
    # \n# /**\n# * The minimum size of the password.\n# *\n# * @var int\n# */\n# protected\
    \ $min = 8;\n# \n# /**\n# * The maximum size of the password.\n# *\n# * @var int\n\
    # */\n# protected $max;\n# \n# /**\n# * If the password requires at least one\
    \ uppercase and one lowercase letter.\n# *\n# * @var bool\n# */\n# protected $mixedCase\
    \ = false;\n# \n# /**\n# * If the password requires at least one letter.\n# *\n\
    # * @var bool\n# */\n# protected $letters = false;\n# \n# /**\n# * If the password\
    \ requires at least one number.\n# *\n# * @var bool\n# */\n# protected $numbers\
    \ = false;\n# \n# /**\n# * If the password requires at least one symbol.\n# *\n\
    # * @var bool\n# */\n# protected $symbols = false;\n# \n# /**\n# * If the password\
    \ should not have been compromised in data leaks.\n# *\n# * @var bool\n# */\n\
    # protected $uncompromised = false;\n# \n# /**\n# * The number of times a password\
    \ can appear in data leaks before being considered compromised.\n# *\n# * @var\
    \ int\n# */\n# protected $compromisedThreshold = 0;\n# \n# /**\n# * Additional\
    \ validation rules that should be merged into the default rules during validation.\n\
    # *\n# * @var array\n# */\n# protected $customRules = [];\n# \n# /**\n# * The\
    \ failure messages, if any.\n# *\n# * @var array\n# */\n# protected $messages\
    \ = [];\n# \n# /**\n# * The callback that will generate the \"default\" version\
    \ of the password rule.\n# *\n# * @var string|array|callable|null\n# */\n# public\
    \ static $defaultCallback;\n# \n# /**\n# * Create a new rule instance.\n# *\n\
    # * @param  int  $min\n# * @return void"
- name: defaults
  visibility: public
  parameters:
  - name: callback
    default: 'null'
  comment: '# * Set the default callback to be used for determining a password''s
    default rules.

    # *

    # * If no arguments are passed, the default password rule configuration will be
    returned.

    # *

    # * @param  static|callable|null  $callback

    # * @return static|null'
- name: default
  visibility: public
  parameters: []
  comment: '# * Get the default configuration of the password rule.

    # *

    # * @return static'
- name: required
  visibility: public
  parameters: []
  comment: '# * Get the default configuration of the password rule and mark the field
    as required.

    # *

    # * @return array'
- name: sometimes
  visibility: public
  parameters: []
  comment: '# * Get the default configuration of the password rule and mark the field
    as sometimes being required.

    # *

    # * @return array'
- name: setValidator
  visibility: public
  parameters:
  - name: validator
  comment: '# * Set the performing validator.

    # *

    # * @param  \Illuminate\Contracts\Validation\Validator  $validator

    # * @return $this'
- name: setData
  visibility: public
  parameters:
  - name: data
  comment: '# * Set the data under validation.

    # *

    # * @param  array  $data

    # * @return $this'
- name: min
  visibility: public
  parameters:
  - name: size
  comment: '# * Set the minimum size of the password.

    # *

    # * @param  int  $size

    # * @return $this'
- name: max
  visibility: public
  parameters:
  - name: size
  comment: '# * Set the maximum size of the password.

    # *

    # * @param  int  $size

    # * @return $this'
- name: uncompromised
  visibility: public
  parameters:
  - name: threshold
    default: '0'
  comment: '# * Ensures the password has not been compromised in data leaks.

    # *

    # * @param  int  $threshold

    # * @return $this'
- name: mixedCase
  visibility: public
  parameters: []
  comment: '# * Makes the password require at least one uppercase and one lowercase
    letter.

    # *

    # * @return $this'
- name: letters
  visibility: public
  parameters: []
  comment: '# * Makes the password require at least one letter.

    # *

    # * @return $this'
- name: numbers
  visibility: public
  parameters: []
  comment: '# * Makes the password require at least one number.

    # *

    # * @return $this'
- name: symbols
  visibility: public
  parameters: []
  comment: '# * Makes the password require at least one symbol.

    # *

    # * @return $this'
- name: rules
  visibility: public
  parameters:
  - name: rules
  comment: '# * Specify additional validation rules that should be merged with the
    default rules during validation.

    # *

    # * @param  \Closure|string|array  $rules

    # * @return $this'
- name: passes
  visibility: public
  parameters:
  - name: attribute
  - name: value
  comment: '# * Determine if the validation rule passes.

    # *

    # * @param  string  $attribute

    # * @param  mixed  $value

    # * @return bool'
- name: message
  visibility: public
  parameters: []
  comment: '# * Get the validation error message.

    # *

    # * @return array'
- name: fail
  visibility: protected
  parameters:
  - name: messages
  comment: '# * Adds the given failures, and return false.

    # *

    # * @param  array|string  $messages

    # * @return bool'
traits:
- Illuminate\Container\Container
- Illuminate\Contracts\Validation\DataAwareRule
- Illuminate\Contracts\Validation\Rule
- Illuminate\Contracts\Validation\UncompromisedVerifier
- Illuminate\Contracts\Validation\ValidatorAwareRule
- Illuminate\Support\Arr
- Illuminate\Support\Facades\Validator
- Illuminate\Support\Traits\Conditionable
- InvalidArgumentException
- Conditionable
interfaces:
- Rule
