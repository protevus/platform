name: Rule
class_comment: null
dependencies:
- name: Arrayable
  type: class
  source: Illuminate\Contracts\Support\Arrayable
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: ArrayRule
  type: class
  source: Illuminate\Validation\Rules\ArrayRule
- name: Can
  type: class
  source: Illuminate\Validation\Rules\Can
- name: Dimensions
  type: class
  source: Illuminate\Validation\Rules\Dimensions
- name: Enum
  type: class
  source: Illuminate\Validation\Rules\Enum
- name: ExcludeIf
  type: class
  source: Illuminate\Validation\Rules\ExcludeIf
- name: Exists
  type: class
  source: Illuminate\Validation\Rules\Exists
- name: File
  type: class
  source: Illuminate\Validation\Rules\File
- name: ImageFile
  type: class
  source: Illuminate\Validation\Rules\ImageFile
- name: In
  type: class
  source: Illuminate\Validation\Rules\In
- name: NotIn
  type: class
  source: Illuminate\Validation\Rules\NotIn
- name: ProhibitedIf
  type: class
  source: Illuminate\Validation\Rules\ProhibitedIf
- name: RequiredIf
  type: class
  source: Illuminate\Validation\Rules\RequiredIf
- name: Unique
  type: class
  source: Illuminate\Validation\Rules\Unique
- name: Macroable
  type: class
  source: Macroable
properties: []
methods:
- name: can
  visibility: public
  parameters:
  - name: ability
  - name: '...$arguments'
  comment: '# * Get a can constraint builder instance.

    # *

    # * @param  string  $ability

    # * @param  mixed  ...$arguments

    # * @return \Illuminate\Validation\Rules\Can'
- name: when
  visibility: public
  parameters:
  - name: condition
  - name: rules
  - name: defaultRules
    default: '[]'
  comment: '# * Apply the given rules if the given condition is truthy.

    # *

    # * @param  callable|bool  $condition

    # * @param  \Illuminate\Contracts\Validation\ValidationRule|\Illuminate\Contracts\Validation\InvokableRule|\Illuminate\Contracts\Validation\Rule|\Closure|array|string  $rules

    # * @param  \Illuminate\Contracts\Validation\ValidationRule|\Illuminate\Contracts\Validation\InvokableRule|\Illuminate\Contracts\Validation\Rule|\Closure|array|string  $defaultRules

    # * @return \Illuminate\Validation\ConditionalRules'
- name: unless
  visibility: public
  parameters:
  - name: condition
  - name: rules
  - name: defaultRules
    default: '[]'
  comment: '# * Apply the given rules if the given condition is falsy.

    # *

    # * @param  callable|bool  $condition

    # * @param  \Illuminate\Contracts\Validation\ValidationRule|\Illuminate\Contracts\Validation\InvokableRule|\Illuminate\Contracts\Validation\Rule|\Closure|array|string  $rules

    # * @param  \Illuminate\Contracts\Validation\ValidationRule|\Illuminate\Contracts\Validation\InvokableRule|\Illuminate\Contracts\Validation\Rule|\Closure|array|string  $defaultRules

    # * @return \Illuminate\Validation\ConditionalRules'
- name: array
  visibility: public
  parameters:
  - name: keys
    default: 'null'
  comment: '# * Get an array rule builder instance.

    # *

    # * @param  array|null  $keys

    # * @return \Illuminate\Validation\Rules\ArrayRule'
- name: forEach
  visibility: public
  parameters:
  - name: callback
  comment: '# * Create a new nested rule set.

    # *

    # * @param  callable  $callback

    # * @return \Illuminate\Validation\NestedRules'
- name: unique
  visibility: public
  parameters:
  - name: table
  - name: column
    default: '''NULL'''
  comment: '# * Get a unique constraint builder instance.

    # *

    # * @param  string  $table

    # * @param  string  $column

    # * @return \Illuminate\Validation\Rules\Unique'
- name: exists
  visibility: public
  parameters:
  - name: table
  - name: column
    default: '''NULL'''
  comment: '# * Get an exists constraint builder instance.

    # *

    # * @param  string  $table

    # * @param  string  $column

    # * @return \Illuminate\Validation\Rules\Exists'
- name: in
  visibility: public
  parameters:
  - name: values
  comment: '# * Get an in rule builder instance.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\BackedEnum|\UnitEnum|array|string  $values

    # * @return \Illuminate\Validation\Rules\In'
- name: notIn
  visibility: public
  parameters:
  - name: values
  comment: '# * Get a not_in rule builder instance.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\BackedEnum|\UnitEnum|array|string  $values

    # * @return \Illuminate\Validation\Rules\NotIn'
- name: requiredIf
  visibility: public
  parameters:
  - name: callback
  comment: '# * Get a required_if rule builder instance.

    # *

    # * @param  callable|bool  $callback

    # * @return \Illuminate\Validation\Rules\RequiredIf'
- name: excludeIf
  visibility: public
  parameters:
  - name: callback
  comment: '# * Get a exclude_if rule builder instance.

    # *

    # * @param  callable|bool  $callback

    # * @return \Illuminate\Validation\Rules\ExcludeIf'
- name: prohibitedIf
  visibility: public
  parameters:
  - name: callback
  comment: '# * Get a prohibited_if rule builder instance.

    # *

    # * @param  callable|bool  $callback

    # * @return \Illuminate\Validation\Rules\ProhibitedIf'
- name: enum
  visibility: public
  parameters:
  - name: type
  comment: '# * Get an enum rule builder instance.

    # *

    # * @param  class-string  $type

    # * @return \Illuminate\Validation\Rules\Enum'
- name: file
  visibility: public
  parameters: []
  comment: '# * Get a file rule builder instance.

    # *

    # * @return \Illuminate\Validation\Rules\File'
- name: imageFile
  visibility: public
  parameters: []
  comment: '# * Get an image file rule builder instance.

    # *

    # * @return \Illuminate\Validation\Rules\ImageFile'
- name: dimensions
  visibility: public
  parameters:
  - name: constraints
    default: '[]'
  comment: '# * Get a dimensions rule builder instance.

    # *

    # * @param  array  $constraints

    # * @return \Illuminate\Validation\Rules\Dimensions'
traits:
- Illuminate\Contracts\Support\Arrayable
- Illuminate\Support\Traits\Macroable
- Illuminate\Validation\Rules\ArrayRule
- Illuminate\Validation\Rules\Can
- Illuminate\Validation\Rules\Dimensions
- Illuminate\Validation\Rules\Enum
- Illuminate\Validation\Rules\ExcludeIf
- Illuminate\Validation\Rules\Exists
- Illuminate\Validation\Rules\File
- Illuminate\Validation\Rules\ImageFile
- Illuminate\Validation\Rules\In
- Illuminate\Validation\Rules\NotIn
- Illuminate\Validation\Rules\ProhibitedIf
- Illuminate\Validation\Rules\RequiredIf
- Illuminate\Validation\Rules\Unique
- Macroable
interfaces: []
