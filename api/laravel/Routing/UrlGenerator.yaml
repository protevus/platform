name: UrlGenerator
class_comment: null
dependencies:
- name: BackedEnum
  type: class
  source: BackedEnum
- name: Closure
  type: class
  source: Closure
- name: UrlGeneratorContract
  type: class
  source: Illuminate\Contracts\Routing\UrlGenerator
- name: UrlRoutable
  type: class
  source: Illuminate\Contracts\Routing\UrlRoutable
- name: Request
  type: class
  source: Illuminate\Http\Request
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Carbon
  type: class
  source: Illuminate\Support\Carbon
- name: InteractsWithTime
  type: class
  source: Illuminate\Support\InteractsWithTime
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: InvalidArgumentException
  type: class
  source: InvalidArgumentException
- name: RouteNotFoundException
  type: class
  source: Symfony\Component\Routing\Exception\RouteNotFoundException
properties:
- name: routes
  visibility: protected
  comment: '# * The route collection.

    # *

    # * @var \Illuminate\Routing\RouteCollectionInterface'
- name: request
  visibility: protected
  comment: '# * The request instance.

    # *

    # * @var \Illuminate\Http\Request'
- name: assetRoot
  visibility: protected
  comment: '# * The asset root URL.

    # *

    # * @var string'
- name: forcedRoot
  visibility: protected
  comment: '# * The forced URL root.

    # *

    # * @var string'
- name: forceScheme
  visibility: protected
  comment: '# * The forced scheme for URLs.

    # *

    # * @var string'
- name: cachedRoot
  visibility: protected
  comment: '# * A cached copy of the URL root for the current request.

    # *

    # * @var string|null'
- name: cachedScheme
  visibility: protected
  comment: '# * A cached copy of the URL scheme for the current request.

    # *

    # * @var string|null'
- name: rootNamespace
  visibility: protected
  comment: '# * The root namespace being applied to controller actions.

    # *

    # * @var string'
- name: sessionResolver
  visibility: protected
  comment: '# * The session resolver callable.

    # *

    # * @var callable'
- name: keyResolver
  visibility: protected
  comment: '# * The encryption key resolver callable.

    # *

    # * @var callable'
- name: missingNamedRouteResolver
  visibility: protected
  comment: '# * The missing named route resolver callable.

    # *

    # * @var callable'
- name: formatHostUsing
  visibility: protected
  comment: '# * The callback to use to format hosts.

    # *

    # * @var \Closure'
- name: formatPathUsing
  visibility: protected
  comment: '# * The callback to use to format paths.

    # *

    # * @var \Closure'
- name: routeGenerator
  visibility: protected
  comment: '# * The route URL generator instance.

    # *

    # * @var \Illuminate\Routing\RouteUrlGenerator|null'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: routes
  - name: request
  - name: assetRoot
    default: 'null'
  comment: "# * The route collection.\n# *\n# * @var \\Illuminate\\Routing\\RouteCollectionInterface\n\
    # */\n# protected $routes;\n# \n# /**\n# * The request instance.\n# *\n# * @var\
    \ \\Illuminate\\Http\\Request\n# */\n# protected $request;\n# \n# /**\n# * The\
    \ asset root URL.\n# *\n# * @var string\n# */\n# protected $assetRoot;\n# \n#\
    \ /**\n# * The forced URL root.\n# *\n# * @var string\n# */\n# protected $forcedRoot;\n\
    # \n# /**\n# * The forced scheme for URLs.\n# *\n# * @var string\n# */\n# protected\
    \ $forceScheme;\n# \n# /**\n# * A cached copy of the URL root for the current\
    \ request.\n# *\n# * @var string|null\n# */\n# protected $cachedRoot;\n# \n# /**\n\
    # * A cached copy of the URL scheme for the current request.\n# *\n# * @var string|null\n\
    # */\n# protected $cachedScheme;\n# \n# /**\n# * The root namespace being applied\
    \ to controller actions.\n# *\n# * @var string\n# */\n# protected $rootNamespace;\n\
    # \n# /**\n# * The session resolver callable.\n# *\n# * @var callable\n# */\n\
    # protected $sessionResolver;\n# \n# /**\n# * The encryption key resolver callable.\n\
    # *\n# * @var callable\n# */\n# protected $keyResolver;\n# \n# /**\n# * The missing\
    \ named route resolver callable.\n# *\n# * @var callable\n# */\n# protected $missingNamedRouteResolver;\n\
    # \n# /**\n# * The callback to use to format hosts.\n# *\n# * @var \\Closure\n\
    # */\n# protected $formatHostUsing;\n# \n# /**\n# * The callback to use to format\
    \ paths.\n# *\n# * @var \\Closure\n# */\n# protected $formatPathUsing;\n# \n#\
    \ /**\n# * The route URL generator instance.\n# *\n# * @var \\Illuminate\\Routing\\\
    RouteUrlGenerator|null\n# */\n# protected $routeGenerator;\n# \n# /**\n# * Create\
    \ a new URL Generator instance.\n# *\n# * @param  \\Illuminate\\Routing\\RouteCollectionInterface\
    \  $routes\n# * @param  \\Illuminate\\Http\\Request  $request\n# * @param  string|null\
    \  $assetRoot\n# * @return void"
- name: full
  visibility: public
  parameters: []
  comment: '# * Get the full URL for the current request.

    # *

    # * @return string'
- name: current
  visibility: public
  parameters: []
  comment: '# * Get the current URL for the request.

    # *

    # * @return string'
- name: previous
  visibility: public
  parameters:
  - name: fallback
    default: 'false'
  comment: '# * Get the URL for the previous request.

    # *

    # * @param  mixed  $fallback

    # * @return string'
- name: previousPath
  visibility: public
  parameters:
  - name: fallback
    default: 'false'
  comment: '# * Get the previous path info for the request.

    # *

    # * @param  mixed  $fallback

    # * @return string'
- name: getPreviousUrlFromSession
  visibility: protected
  parameters: []
  comment: '# * Get the previous URL from the session if possible.

    # *

    # * @return string|null'
- name: to
  visibility: public
  parameters:
  - name: path
  - name: extra
    default: '[]'
  - name: secure
    default: 'null'
  comment: '# * Generate an absolute URL to the given path.

    # *

    # * @param  string  $path

    # * @param  mixed  $extra

    # * @param  bool|null  $secure

    # * @return string'
- name: query
  visibility: public
  parameters:
  - name: path
  - name: query
    default: '[]'
  - name: extra
    default: '[]'
  - name: secure
    default: 'null'
  comment: '# * Generate an absolute URL with the given query parameters.

    # *

    # * @param  string  $path

    # * @param  array  $query

    # * @param  mixed  $extra

    # * @param  bool|null  $secure

    # * @return string'
- name: secure
  visibility: public
  parameters:
  - name: path
  - name: parameters
    default: '[]'
  comment: '# * Generate a secure, absolute URL to the given path.

    # *

    # * @param  string  $path

    # * @param  array  $parameters

    # * @return string'
- name: asset
  visibility: public
  parameters:
  - name: path
  - name: secure
    default: 'null'
  comment: '# * Generate the URL to an application asset.

    # *

    # * @param  string  $path

    # * @param  bool|null  $secure

    # * @return string'
- name: secureAsset
  visibility: public
  parameters:
  - name: path
  comment: '# * Generate the URL to a secure asset.

    # *

    # * @param  string  $path

    # * @return string'
- name: assetFrom
  visibility: public
  parameters:
  - name: root
  - name: path
  - name: secure
    default: 'null'
  comment: '# * Generate the URL to an asset from a custom root domain such as CDN,
    etc.

    # *

    # * @param  string  $root

    # * @param  string  $path

    # * @param  bool|null  $secure

    # * @return string'
- name: removeIndex
  visibility: protected
  parameters:
  - name: root
  comment: '# * Remove the index.php file from a path.

    # *

    # * @param  string  $root

    # * @return string'
- name: formatScheme
  visibility: public
  parameters:
  - name: secure
    default: 'null'
  comment: '# * Get the default scheme for a raw URL.

    # *

    # * @param  bool|null  $secure

    # * @return string'
- name: signedRoute
  visibility: public
  parameters:
  - name: name
  - name: parameters
    default: '[]'
  - name: expiration
    default: 'null'
  - name: absolute
    default: 'true'
  comment: '# * Create a signed route URL for a named route.

    # *

    # * @param  string  $name

    # * @param  mixed  $parameters

    # * @param  \DateTimeInterface|\DateInterval|int|null  $expiration

    # * @param  bool  $absolute

    # * @return string

    # *

    # * @throws \InvalidArgumentException'
- name: ensureSignedRouteParametersAreNotReserved
  visibility: protected
  parameters:
  - name: parameters
  comment: '# * Ensure the given signed route parameters are not reserved.

    # *

    # * @param  mixed  $parameters

    # * @return void'
- name: temporarySignedRoute
  visibility: public
  parameters:
  - name: name
  - name: expiration
  - name: parameters
    default: '[]'
  - name: absolute
    default: 'true'
  comment: '# * Create a temporary signed route URL for a named route.

    # *

    # * @param  string  $name

    # * @param  \DateTimeInterface|\DateInterval|int  $expiration

    # * @param  array  $parameters

    # * @param  bool  $absolute

    # * @return string'
- name: hasValidSignature
  visibility: public
  parameters:
  - name: request
  - name: absolute
    default: 'true'
  - name: ignoreQuery
    default: '[]'
  comment: '# * Determine if the given request has a valid signature.

    # *

    # * @param  \Illuminate\Http\Request  $request

    # * @param  bool  $absolute

    # * @param  array  $ignoreQuery

    # * @return bool'
- name: hasValidRelativeSignature
  visibility: public
  parameters:
  - name: request
  - name: ignoreQuery
    default: '[]'
  comment: '# * Determine if the given request has a valid signature for a relative
    URL.

    # *

    # * @param  \Illuminate\Http\Request  $request

    # * @param  array  $ignoreQuery

    # * @return bool'
- name: hasCorrectSignature
  visibility: public
  parameters:
  - name: request
  - name: absolute
    default: 'true'
  - name: ignoreQuery
    default: '[]'
  comment: '# * Determine if the signature from the given request matches the URL.

    # *

    # * @param  \Illuminate\Http\Request  $request

    # * @param  bool  $absolute

    # * @param  array  $ignoreQuery

    # * @return bool'
- name: signatureHasNotExpired
  visibility: public
  parameters:
  - name: request
  comment: '# * Determine if the expires timestamp from the given request is not from
    the past.

    # *

    # * @param  \Illuminate\Http\Request  $request

    # * @return bool'
- name: route
  visibility: public
  parameters:
  - name: name
  - name: parameters
    default: '[]'
  - name: absolute
    default: 'true'
  comment: '# * Get the URL to a named route.

    # *

    # * @param  string  $name

    # * @param  mixed  $parameters

    # * @param  bool  $absolute

    # * @return string

    # *

    # * @throws \Symfony\Component\Routing\Exception\RouteNotFoundException'
- name: toRoute
  visibility: public
  parameters:
  - name: route
  - name: parameters
  - name: absolute
  comment: '# * Get the URL for a given route instance.

    # *

    # * @param  \Illuminate\Routing\Route  $route

    # * @param  mixed  $parameters

    # * @param  bool  $absolute

    # * @return string

    # *

    # * @throws \Illuminate\Routing\Exceptions\UrlGenerationException'
- name: action
  visibility: public
  parameters:
  - name: action
  - name: parameters
    default: '[]'
  - name: absolute
    default: 'true'
  comment: '# * Get the URL to a controller action.

    # *

    # * @param  string|array  $action

    # * @param  mixed  $parameters

    # * @param  bool  $absolute

    # * @return string

    # *

    # * @throws \InvalidArgumentException'
- name: formatAction
  visibility: protected
  parameters:
  - name: action
  comment: '# * Format the given controller action.

    # *

    # * @param  string|array  $action

    # * @return string'
- name: formatParameters
  visibility: public
  parameters:
  - name: parameters
  comment: '# * Format the array of URL parameters.

    # *

    # * @param  mixed|array  $parameters

    # * @return array'
- name: extractQueryString
  visibility: protected
  parameters:
  - name: path
  comment: '# * Extract the query string from the given path.

    # *

    # * @param  string  $path

    # * @return array'
- name: formatRoot
  visibility: public
  parameters:
  - name: scheme
  - name: root
    default: 'null'
  comment: '# * Get the base URL for the request.

    # *

    # * @param  string  $scheme

    # * @param  string|null  $root

    # * @return string'
- name: format
  visibility: public
  parameters:
  - name: root
  - name: path
  - name: route
    default: 'null'
  comment: '# * Format the given URL segments into a single URL.

    # *

    # * @param  string  $root

    # * @param  string  $path

    # * @param  \Illuminate\Routing\Route|null  $route

    # * @return string'
- name: isValidUrl
  visibility: public
  parameters:
  - name: path
  comment: '# * Determine if the given path is a valid URL.

    # *

    # * @param  string  $path

    # * @return bool'
- name: routeUrl
  visibility: protected
  parameters: []
  comment: '# * Get the Route URL generator instance.

    # *

    # * @return \Illuminate\Routing\RouteUrlGenerator'
- name: defaults
  visibility: public
  parameters:
  - name: defaults
  comment: '# * Set the default named parameters used by the URL generator.

    # *

    # * @param  array  $defaults

    # * @return void'
- name: getDefaultParameters
  visibility: public
  parameters: []
  comment: '# * Get the default named parameters used by the URL generator.

    # *

    # * @return array'
- name: forceScheme
  visibility: public
  parameters:
  - name: scheme
  comment: '# * Force the scheme for URLs.

    # *

    # * @param  string|null  $scheme

    # * @return void'
- name: forceRootUrl
  visibility: public
  parameters:
  - name: root
  comment: '# * Set the forced root URL.

    # *

    # * @param  string|null  $root

    # * @return void'
- name: formatHostUsing
  visibility: public
  parameters:
  - name: callback
  comment: '# * Set a callback to be used to format the host of generated URLs.

    # *

    # * @param  \Closure  $callback

    # * @return $this'
- name: formatPathUsing
  visibility: public
  parameters:
  - name: callback
  comment: '# * Set a callback to be used to format the path of generated URLs.

    # *

    # * @param  \Closure  $callback

    # * @return $this'
- name: pathFormatter
  visibility: public
  parameters: []
  comment: '# * Get the path formatter being used by the URL generator.

    # *

    # * @return \Closure'
- name: getRequest
  visibility: public
  parameters: []
  comment: '# * Get the request instance.

    # *

    # * @return \Illuminate\Http\Request'
- name: setRequest
  visibility: public
  parameters:
  - name: request
  comment: '# * Set the current request instance.

    # *

    # * @param  \Illuminate\Http\Request  $request

    # * @return void'
- name: setRoutes
  visibility: public
  parameters:
  - name: routes
  comment: '# * Set the route collection.

    # *

    # * @param  \Illuminate\Routing\RouteCollectionInterface  $routes

    # * @return $this'
- name: getSession
  visibility: protected
  parameters: []
  comment: '# * Get the session implementation from the resolver.

    # *

    # * @return \Illuminate\Session\Store|null'
- name: setSessionResolver
  visibility: public
  parameters:
  - name: sessionResolver
  comment: '# * Set the session resolver for the generator.

    # *

    # * @param  callable  $sessionResolver

    # * @return $this'
- name: setKeyResolver
  visibility: public
  parameters:
  - name: keyResolver
  comment: '# * Set the encryption key resolver.

    # *

    # * @param  callable  $keyResolver

    # * @return $this'
- name: withKeyResolver
  visibility: public
  parameters:
  - name: keyResolver
  comment: '# * Clone a new instance of the URL generator with a different encryption
    key resolver.

    # *

    # * @param  callable  $keyResolver

    # * @return \Illuminate\Routing\UrlGenerator'
- name: resolveMissingNamedRoutesUsing
  visibility: public
  parameters:
  - name: missingNamedRouteResolver
  comment: '# * Set the callback that should be used to attempt to resolve missing
    named routes.

    # *

    # * @param  callable  $missingNamedRouteResolver

    # * @return $this'
- name: getRootControllerNamespace
  visibility: public
  parameters: []
  comment: '# * Get the root controller namespace.

    # *

    # * @return string'
- name: setRootControllerNamespace
  visibility: public
  parameters:
  - name: rootNamespace
  comment: '# * Set the root controller namespace.

    # *

    # * @param  string  $rootNamespace

    # * @return $this'
traits:
- BackedEnum
- Closure
- Illuminate\Contracts\Routing\UrlRoutable
- Illuminate\Http\Request
- Illuminate\Support\Arr
- Illuminate\Support\Carbon
- Illuminate\Support\InteractsWithTime
- Illuminate\Support\Str
- Illuminate\Support\Traits\Macroable
- InvalidArgumentException
- Symfony\Component\Routing\Exception\RouteNotFoundException
- InteractsWithTime
interfaces:
- UrlGeneratorContract
