name: FilesystemAdapter
class_comment: '# * @mixin \League\Flysystem\FilesystemOperator'
dependencies:
- name: Closure
  type: class
  source: Closure
- name: CloudFilesystemContract
  type: class
  source: Illuminate\Contracts\Filesystem\Cloud
- name: FilesystemContract
  type: class
  source: Illuminate\Contracts\Filesystem\Filesystem
- name: File
  type: class
  source: Illuminate\Http\File
- name: UploadedFile
  type: class
  source: Illuminate\Http\UploadedFile
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: Conditionable
  type: class
  source: Illuminate\Support\Traits\Conditionable
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: InvalidArgumentException
  type: class
  source: InvalidArgumentException
- name: FlysystemAdapter
  type: class
  source: League\Flysystem\FilesystemAdapter
- name: FilesystemOperator
  type: class
  source: League\Flysystem\FilesystemOperator
- name: FtpAdapter
  type: class
  source: League\Flysystem\Ftp\FtpAdapter
- name: LocalAdapter
  type: class
  source: League\Flysystem\Local\LocalFilesystemAdapter
- name: PathPrefixer
  type: class
  source: League\Flysystem\PathPrefixer
- name: SftpAdapter
  type: class
  source: League\Flysystem\PhpseclibV3\SftpAdapter
- name: StorageAttributes
  type: class
  source: League\Flysystem\StorageAttributes
- name: UnableToCopyFile
  type: class
  source: League\Flysystem\UnableToCopyFile
- name: UnableToCreateDirectory
  type: class
  source: League\Flysystem\UnableToCreateDirectory
- name: UnableToDeleteDirectory
  type: class
  source: League\Flysystem\UnableToDeleteDirectory
- name: UnableToDeleteFile
  type: class
  source: League\Flysystem\UnableToDeleteFile
- name: UnableToMoveFile
  type: class
  source: League\Flysystem\UnableToMoveFile
- name: UnableToProvideChecksum
  type: class
  source: League\Flysystem\UnableToProvideChecksum
- name: UnableToReadFile
  type: class
  source: League\Flysystem\UnableToReadFile
- name: UnableToRetrieveMetadata
  type: class
  source: League\Flysystem\UnableToRetrieveMetadata
- name: UnableToSetVisibility
  type: class
  source: League\Flysystem\UnableToSetVisibility
- name: UnableToWriteFile
  type: class
  source: League\Flysystem\UnableToWriteFile
- name: Visibility
  type: class
  source: League\Flysystem\Visibility
- name: PHPUnit
  type: class
  source: PHPUnit\Framework\Assert
- name: StreamInterface
  type: class
  source: Psr\Http\Message\StreamInterface
- name: RuntimeException
  type: class
  source: RuntimeException
- name: StreamedResponse
  type: class
  source: Symfony\Component\HttpFoundation\StreamedResponse
- name: Conditionable
  type: class
  source: Conditionable
properties:
- name: driver
  visibility: protected
  comment: "# * @mixin \\League\\Flysystem\\FilesystemOperator\n# */\n# class FilesystemAdapter\
    \ implements CloudFilesystemContract\n# {\n# use Conditionable;\n# use Macroable\
    \ {\n# __call as macroCall;\n# }\n# \n# /**\n# * The Flysystem filesystem implementation.\n\
    # *\n# * @var \\League\\Flysystem\\FilesystemOperator"
- name: adapter
  visibility: protected
  comment: '# * The Flysystem adapter implementation.

    # *

    # * @var \League\Flysystem\FilesystemAdapter'
- name: config
  visibility: protected
  comment: '# * The filesystem configuration.

    # *

    # * @var array'
- name: prefixer
  visibility: protected
  comment: '# * The Flysystem PathPrefixer instance.

    # *

    # * @var \League\Flysystem\PathPrefixer'
- name: temporaryUrlCallback
  visibility: protected
  comment: '# * The temporary URL builder callback.

    # *

    # * @var \Closure|null'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: driver
  - name: adapter
  - name: config
    default: '[]'
  comment: "# * @mixin \\League\\Flysystem\\FilesystemOperator\n# */\n# class FilesystemAdapter\
    \ implements CloudFilesystemContract\n# {\n# use Conditionable;\n# use Macroable\
    \ {\n# __call as macroCall;\n# }\n# \n# /**\n# * The Flysystem filesystem implementation.\n\
    # *\n# * @var \\League\\Flysystem\\FilesystemOperator\n# */\n# protected $driver;\n\
    # \n# /**\n# * The Flysystem adapter implementation.\n# *\n# * @var \\League\\\
    Flysystem\\FilesystemAdapter\n# */\n# protected $adapter;\n# \n# /**\n# * The\
    \ filesystem configuration.\n# *\n# * @var array\n# */\n# protected $config;\n\
    # \n# /**\n# * The Flysystem PathPrefixer instance.\n# *\n# * @var \\League\\\
    Flysystem\\PathPrefixer\n# */\n# protected $prefixer;\n# \n# /**\n# * The temporary\
    \ URL builder callback.\n# *\n# * @var \\Closure|null\n# */\n# protected $temporaryUrlCallback;\n\
    # \n# /**\n# * Create a new filesystem adapter instance.\n# *\n# * @param  \\\
    League\\Flysystem\\FilesystemOperator  $driver\n# * @param  \\League\\Flysystem\\\
    FilesystemAdapter  $adapter\n# * @param  array  $config\n# * @return void"
- name: assertExists
  visibility: public
  parameters:
  - name: path
  - name: content
    default: 'null'
  comment: '# * Assert that the given file or directory exists.

    # *

    # * @param  string|array  $path

    # * @param  string|null  $content

    # * @return $this'
- name: assertMissing
  visibility: public
  parameters:
  - name: path
  comment: '# * Assert that the given file or directory does not exist.

    # *

    # * @param  string|array  $path

    # * @return $this'
- name: assertDirectoryEmpty
  visibility: public
  parameters:
  - name: path
  comment: '# * Assert that the given directory is empty.

    # *

    # * @param  string  $path

    # * @return $this'
- name: exists
  visibility: public
  parameters:
  - name: path
  comment: '# * Determine if a file or directory exists.

    # *

    # * @param  string  $path

    # * @return bool'
- name: missing
  visibility: public
  parameters:
  - name: path
  comment: '# * Determine if a file or directory is missing.

    # *

    # * @param  string  $path

    # * @return bool'
- name: fileExists
  visibility: public
  parameters:
  - name: path
  comment: '# * Determine if a file exists.

    # *

    # * @param  string  $path

    # * @return bool'
- name: fileMissing
  visibility: public
  parameters:
  - name: path
  comment: '# * Determine if a file is missing.

    # *

    # * @param  string  $path

    # * @return bool'
- name: directoryExists
  visibility: public
  parameters:
  - name: path
  comment: '# * Determine if a directory exists.

    # *

    # * @param  string  $path

    # * @return bool'
- name: directoryMissing
  visibility: public
  parameters:
  - name: path
  comment: '# * Determine if a directory is missing.

    # *

    # * @param  string  $path

    # * @return bool'
- name: path
  visibility: public
  parameters:
  - name: path
  comment: '# * Get the full path to the file that exists at the given relative path.

    # *

    # * @param  string  $path

    # * @return string'
- name: get
  visibility: public
  parameters:
  - name: path
  comment: '# * Get the contents of a file.

    # *

    # * @param  string  $path

    # * @return string|null'
- name: json
  visibility: public
  parameters:
  - name: path
  - name: flags
    default: '0'
  comment: '# * Get the contents of a file as decoded JSON.

    # *

    # * @param  string  $path

    # * @param  int  $flags

    # * @return array|null'
- name: response
  visibility: public
  parameters:
  - name: path
  - name: name
    default: 'null'
  - name: headers
    default: '[]'
  - name: disposition
    default: '''inline'''
  comment: '# * Create a streamed response for a given file.

    # *

    # * @param  string  $path

    # * @param  string|null  $name

    # * @param  array  $headers

    # * @param  string|null  $disposition

    # * @return \Symfony\Component\HttpFoundation\StreamedResponse'
- name: download
  visibility: public
  parameters:
  - name: path
  - name: name
    default: 'null'
  - name: headers
    default: '[]'
  comment: '# * Create a streamed download response for a given file.

    # *

    # * @param  string  $path

    # * @param  string|null  $name

    # * @return \Symfony\Component\HttpFoundation\StreamedResponse'
- name: fallbackName
  visibility: protected
  parameters:
  - name: name
  comment: '# * Convert the string to ASCII characters that are equivalent to the
    given name.

    # *

    # * @param  string  $name

    # * @return string'
- name: put
  visibility: public
  parameters:
  - name: path
  - name: contents
  - name: options
    default: '[]'
  comment: '# * Write the contents of a file.

    # *

    # * @param  string  $path

    # * @param  \Psr\Http\Message\StreamInterface|\Illuminate\Http\File|\Illuminate\Http\UploadedFile|string|resource  $contents

    # * @param  mixed  $options

    # * @return string|bool'
- name: putFile
  visibility: public
  parameters:
  - name: path
  - name: file
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * Store the uploaded file on the disk.

    # *

    # * @param  \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string  $path

    # * @param  \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string|array|null  $file

    # * @param  mixed  $options

    # * @return string|false'
- name: putFileAs
  visibility: public
  parameters:
  - name: path
  - name: file
  - name: name
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * Store the uploaded file on the disk with a given name.

    # *

    # * @param  \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string  $path

    # * @param  \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string|array|null  $file

    # * @param  string|array|null  $name

    # * @param  mixed  $options

    # * @return string|false'
- name: getVisibility
  visibility: public
  parameters:
  - name: path
  comment: '# * Get the visibility for the given path.

    # *

    # * @param  string  $path

    # * @return string'
- name: setVisibility
  visibility: public
  parameters:
  - name: path
  - name: visibility
  comment: '# * Set the visibility for the given path.

    # *

    # * @param  string  $path

    # * @param  string  $visibility

    # * @return bool'
- name: prepend
  visibility: public
  parameters:
  - name: path
  - name: data
  - name: separator
    default: PHP_EOL
  comment: '# * Prepend to a file.

    # *

    # * @param  string  $path

    # * @param  string  $data

    # * @param  string  $separator

    # * @return bool'
- name: append
  visibility: public
  parameters:
  - name: path
  - name: data
  - name: separator
    default: PHP_EOL
  comment: '# * Append to a file.

    # *

    # * @param  string  $path

    # * @param  string  $data

    # * @param  string  $separator

    # * @return bool'
- name: delete
  visibility: public
  parameters:
  - name: paths
  comment: '# * Delete the file at a given path.

    # *

    # * @param  string|array  $paths

    # * @return bool'
- name: copy
  visibility: public
  parameters:
  - name: from
  - name: to
  comment: '# * Copy a file to a new location.

    # *

    # * @param  string  $from

    # * @param  string  $to

    # * @return bool'
- name: move
  visibility: public
  parameters:
  - name: from
  - name: to
  comment: '# * Move a file to a new location.

    # *

    # * @param  string  $from

    # * @param  string  $to

    # * @return bool'
- name: size
  visibility: public
  parameters:
  - name: path
  comment: '# * Get the file size of a given file.

    # *

    # * @param  string  $path

    # * @return int'
- name: checksum
  visibility: public
  parameters:
  - name: path
  - name: options
    default: '[]'
  comment: '# * Get the checksum for a file.

    # *

    # * @return string|false

    # *

    # * @throws UnableToProvideChecksum'
- name: mimeType
  visibility: public
  parameters:
  - name: path
  comment: '# * Get the mime-type of a given file.

    # *

    # * @param  string  $path

    # * @return string|false'
- name: lastModified
  visibility: public
  parameters:
  - name: path
  comment: '# * Get the file''s last modification time.

    # *

    # * @param  string  $path

    # * @return int'
- name: readStream
  visibility: public
  parameters:
  - name: path
  comment: '# * {@inheritdoc}'
- name: writeStream
  visibility: public
  parameters:
  - name: path
  - name: resource
  - name: options
    default: '[]'
  comment: '# * {@inheritdoc}'
- name: url
  visibility: public
  parameters:
  - name: path
  comment: '# * Get the URL for the file at the given path.

    # *

    # * @param  string  $path

    # * @return string

    # *

    # * @throws \RuntimeException'
- name: getFtpUrl
  visibility: protected
  parameters:
  - name: path
  comment: '# * Get the URL for the file at the given path.

    # *

    # * @param  string  $path

    # * @return string'
- name: getLocalUrl
  visibility: protected
  parameters:
  - name: path
  comment: '# * Get the URL for the file at the given path.

    # *

    # * @param  string  $path

    # * @return string'
- name: providesTemporaryUrls
  visibility: public
  parameters: []
  comment: '# * Determine if temporary URLs can be generated.

    # *

    # * @return bool'
- name: temporaryUrl
  visibility: public
  parameters:
  - name: path
  - name: expiration
  - name: options
    default: '[]'
  comment: '# * Get a temporary URL for the file at the given path.

    # *

    # * @param  string  $path

    # * @param  \DateTimeInterface  $expiration

    # * @param  array  $options

    # * @return string

    # *

    # * @throws \RuntimeException'
- name: temporaryUploadUrl
  visibility: public
  parameters:
  - name: path
  - name: expiration
  - name: options
    default: '[]'
  comment: '# * Get a temporary upload URL for the file at the given path.

    # *

    # * @param  string  $path

    # * @param  \DateTimeInterface  $expiration

    # * @param  array  $options

    # * @return array

    # *

    # * @throws \RuntimeException'
- name: concatPathToUrl
  visibility: protected
  parameters:
  - name: url
  - name: path
  comment: '# * Concatenate a path to a URL.

    # *

    # * @param  string  $url

    # * @param  string  $path

    # * @return string'
- name: replaceBaseUrl
  visibility: protected
  parameters:
  - name: uri
  - name: url
  comment: '# * Replace the scheme, host and port of the given UriInterface with values
    from the given URL.

    # *

    # * @param  \Psr\Http\Message\UriInterface  $uri

    # * @param  string  $url

    # * @return \Psr\Http\Message\UriInterface'
- name: files
  visibility: public
  parameters:
  - name: directory
    default: 'null'
  - name: recursive
    default: 'false'
  comment: '# * Get an array of all files in a directory.

    # *

    # * @param  string|null  $directory

    # * @param  bool  $recursive

    # * @return array'
- name: allFiles
  visibility: public
  parameters:
  - name: directory
    default: 'null'
  comment: '# * Get all of the files from the given directory (recursive).

    # *

    # * @param  string|null  $directory

    # * @return array'
- name: directories
  visibility: public
  parameters:
  - name: directory
    default: 'null'
  - name: recursive
    default: 'false'
  comment: '# * Get all of the directories within a given directory.

    # *

    # * @param  string|null  $directory

    # * @param  bool  $recursive

    # * @return array'
- name: allDirectories
  visibility: public
  parameters:
  - name: directory
    default: 'null'
  comment: '# * Get all the directories within a given directory (recursive).

    # *

    # * @param  string|null  $directory

    # * @return array'
- name: makeDirectory
  visibility: public
  parameters:
  - name: path
  comment: '# * Create a directory.

    # *

    # * @param  string  $path

    # * @return bool'
- name: deleteDirectory
  visibility: public
  parameters:
  - name: directory
  comment: '# * Recursively delete a directory.

    # *

    # * @param  string  $directory

    # * @return bool'
- name: getDriver
  visibility: public
  parameters: []
  comment: '# * Get the Flysystem driver.

    # *

    # * @return \League\Flysystem\FilesystemOperator'
- name: getAdapter
  visibility: public
  parameters: []
  comment: '# * Get the Flysystem adapter.

    # *

    # * @return \League\Flysystem\FilesystemAdapter'
- name: getConfig
  visibility: public
  parameters: []
  comment: '# * Get the configuration values.

    # *

    # * @return array'
- name: parseVisibility
  visibility: protected
  parameters:
  - name: visibility
  comment: '# * Parse the given visibility value.

    # *

    # * @param  string|null  $visibility

    # * @return string|null

    # *

    # * @throws \InvalidArgumentException'
- name: buildTemporaryUrlsUsing
  visibility: public
  parameters:
  - name: callback
  comment: '# * Define a custom temporary URL builder callback.

    # *

    # * @param  \Closure  $callback

    # * @return void'
- name: throwsExceptions
  visibility: protected
  parameters: []
  comment: '# * Determine if Flysystem exceptions should be thrown.

    # *

    # * @return bool'
- name: __call
  visibility: public
  parameters:
  - name: method
  - name: parameters
  comment: '# * Pass dynamic methods call onto Flysystem.

    # *

    # * @param  string  $method

    # * @param  array  $parameters

    # * @return mixed

    # *

    # * @throws \BadMethodCallException'
traits:
- Closure
- Illuminate\Http\File
- Illuminate\Http\UploadedFile
- Illuminate\Support\Arr
- Illuminate\Support\Str
- Illuminate\Support\Traits\Conditionable
- Illuminate\Support\Traits\Macroable
- InvalidArgumentException
- League\Flysystem\FilesystemOperator
- League\Flysystem\Ftp\FtpAdapter
- League\Flysystem\PathPrefixer
- League\Flysystem\PhpseclibV3\SftpAdapter
- League\Flysystem\StorageAttributes
- League\Flysystem\UnableToCopyFile
- League\Flysystem\UnableToCreateDirectory
- League\Flysystem\UnableToDeleteDirectory
- League\Flysystem\UnableToDeleteFile
- League\Flysystem\UnableToMoveFile
- League\Flysystem\UnableToProvideChecksum
- League\Flysystem\UnableToReadFile
- League\Flysystem\UnableToRetrieveMetadata
- League\Flysystem\UnableToSetVisibility
- League\Flysystem\UnableToWriteFile
- League\Flysystem\Visibility
- Psr\Http\Message\StreamInterface
- RuntimeException
- Symfony\Component\HttpFoundation\StreamedResponse
- Conditionable
interfaces:
- CloudFilesystemContract
