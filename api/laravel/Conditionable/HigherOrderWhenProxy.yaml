name: HigherOrderWhenProxy
class_comment: null
dependencies: []
properties:
- name: target
  visibility: protected
  comment: '# * The target being conditionally operated on.

    # *

    # * @var mixed'
- name: condition
  visibility: protected
  comment: '# * The condition for proxying.

    # *

    # * @var bool'
- name: hasCondition
  visibility: protected
  comment: '# * Indicates whether the proxy has a condition.

    # *

    # * @var bool'
- name: negateConditionOnCapture
  visibility: protected
  comment: '# * Determine whether the condition should be negated.

    # *

    # * @var bool'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: target
  comment: "# * The target being conditionally operated on.\n# *\n# * @var mixed\n\
    # */\n# protected $target;\n# \n# /**\n# * The condition for proxying.\n# *\n\
    # * @var bool\n# */\n# protected $condition;\n# \n# /**\n# * Indicates whether\
    \ the proxy has a condition.\n# *\n# * @var bool\n# */\n# protected $hasCondition\
    \ = false;\n# \n# /**\n# * Determine whether the condition should be negated.\n\
    # *\n# * @var bool\n# */\n# protected $negateConditionOnCapture;\n# \n# /**\n\
    # * Create a new proxy instance.\n# *\n# * @param  mixed  $target\n# * @return\
    \ void"
- name: condition
  visibility: public
  parameters:
  - name: condition
  comment: '# * Set the condition on the proxy.

    # *

    # * @param  bool  $condition

    # * @return $this'
- name: negateConditionOnCapture
  visibility: public
  parameters: []
  comment: '# * Indicate that the condition should be negated.

    # *

    # * @return $this'
- name: __get
  visibility: public
  parameters:
  - name: key
  comment: '# * Proxy accessing an attribute onto the target.

    # *

    # * @param  string  $key

    # * @return mixed'
- name: __call
  visibility: public
  parameters:
  - name: method
  - name: parameters
  comment: '# * Proxy a method call on the target.

    # *

    # * @param  string  $method

    # * @param  array  $parameters

    # * @return mixed'
traits: []
interfaces: []
