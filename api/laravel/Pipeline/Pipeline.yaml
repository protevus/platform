name: Pipeline
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: Container
  type: class
  source: Illuminate\Contracts\Container\Container
- name: PipelineContract
  type: class
  source: Illuminate\Contracts\Pipeline\Pipeline
- name: Conditionable
  type: class
  source: Illuminate\Support\Traits\Conditionable
- name: RuntimeException
  type: class
  source: RuntimeException
- name: Throwable
  type: class
  source: Throwable
- name: Conditionable
  type: class
  source: Conditionable
properties:
- name: container
  visibility: protected
  comment: '# * The container implementation.

    # *

    # * @var \Illuminate\Contracts\Container\Container|null'
- name: passable
  visibility: protected
  comment: '# * The object being passed through the pipeline.

    # *

    # * @var mixed'
- name: pipes
  visibility: protected
  comment: '# * The array of class pipes.

    # *

    # * @var array'
- name: method
  visibility: protected
  comment: '# * The method to call on each pipe.

    # *

    # * @var string'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: container
    default: 'null'
  comment: "# * The container implementation.\n# *\n# * @var \\Illuminate\\Contracts\\\
    Container\\Container|null\n# */\n# protected $container;\n# \n# /**\n# * The object\
    \ being passed through the pipeline.\n# *\n# * @var mixed\n# */\n# protected $passable;\n\
    # \n# /**\n# * The array of class pipes.\n# *\n# * @var array\n# */\n# protected\
    \ $pipes = [];\n# \n# /**\n# * The method to call on each pipe.\n# *\n# * @var\
    \ string\n# */\n# protected $method = 'handle';\n# \n# /**\n# * Create a new class\
    \ instance.\n# *\n# * @param  \\Illuminate\\Contracts\\Container\\Container|null\
    \  $container\n# * @return void"
- name: send
  visibility: public
  parameters:
  - name: passable
  comment: '# * Set the object being sent through the pipeline.

    # *

    # * @param  mixed  $passable

    # * @return $this'
- name: through
  visibility: public
  parameters:
  - name: pipes
  comment: '# * Set the array of pipes.

    # *

    # * @param  array|mixed  $pipes

    # * @return $this'
- name: pipe
  visibility: public
  parameters:
  - name: pipes
  comment: '# * Push additional pipes onto the pipeline.

    # *

    # * @param  array|mixed  $pipes

    # * @return $this'
- name: via
  visibility: public
  parameters:
  - name: method
  comment: '# * Set the method to call on the pipes.

    # *

    # * @param  string  $method

    # * @return $this'
- name: then
  visibility: public
  parameters:
  - name: destination
  comment: '# * Run the pipeline with a final destination callback.

    # *

    # * @param  \Closure  $destination

    # * @return mixed'
- name: thenReturn
  visibility: public
  parameters: []
  comment: '# * Run the pipeline and return the result.

    # *

    # * @return mixed'
- name: prepareDestination
  visibility: protected
  parameters:
  - name: destination
  comment: '# * Get the final piece of the Closure onion.

    # *

    # * @param  \Closure  $destination

    # * @return \Closure'
- name: carry
  visibility: protected
  parameters: []
  comment: '# * Get a Closure that represents a slice of the application onion.

    # *

    # * @return \Closure'
- name: parsePipeString
  visibility: protected
  parameters:
  - name: pipe
  comment: '# * Parse full pipe string to get name and parameters.

    # *

    # * @param  string  $pipe

    # * @return array'
- name: pipes
  visibility: protected
  parameters: []
  comment: '# * Get the array of configured pipes.

    # *

    # * @return array'
- name: getContainer
  visibility: protected
  parameters: []
  comment: '# * Get the container instance.

    # *

    # * @return \Illuminate\Contracts\Container\Container

    # *

    # * @throws \RuntimeException'
- name: setContainer
  visibility: public
  parameters:
  - name: container
  comment: '# * Set the container instance.

    # *

    # * @param  \Illuminate\Contracts\Container\Container  $container

    # * @return $this'
- name: handleCarry
  visibility: protected
  parameters:
  - name: carry
  comment: '# * Handle the value returned from each pipe before passing it to the
    next.

    # *

    # * @param  mixed  $carry

    # * @return mixed'
- name: handleException
  visibility: protected
  parameters:
  - name: passable
  - name: e
  comment: '# * Handle the given exception.

    # *

    # * @param  mixed  $passable

    # * @param  \Throwable  $e

    # * @return mixed

    # *

    # * @throws \Throwable'
traits:
- Closure
- Illuminate\Contracts\Container\Container
- Illuminate\Support\Traits\Conditionable
- RuntimeException
- Throwable
- Conditionable
interfaces:
- PipelineContract
