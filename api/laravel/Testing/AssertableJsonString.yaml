name: AssertableJsonString
class_comment: null
dependencies:
- name: ArrayAccess
  type: class
  source: ArrayAccess
- name: Closure
  type: class
  source: Closure
- name: Countable
  type: class
  source: Countable
- name: Jsonable
  type: class
  source: Illuminate\Contracts\Support\Jsonable
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: PHPUnit
  type: class
  source: Illuminate\Testing\Assert
- name: JsonSerializable
  type: class
  source: JsonSerializable
properties:
- name: json
  visibility: public
  comment: '# * The original encoded json.

    # *

    # * @var \Illuminate\Contracts\Support\Jsonable|\JsonSerializable|array|string'
- name: decoded
  visibility: protected
  comment: '# * The decoded json contents.

    # *

    # * @var array|null'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: jsonable
  comment: "# * The original encoded json.\n# *\n# * @var \\Illuminate\\Contracts\\\
    Support\\Jsonable|\\JsonSerializable|array|string\n# */\n# public $json;\n# \n\
    # /**\n# * The decoded json contents.\n# *\n# * @var array|null\n# */\n# protected\
    \ $decoded;\n# \n# /**\n# * Create a new assertable JSON string instance.\n# *\n\
    # * @param  \\Illuminate\\Contracts\\Support\\Jsonable|\\JsonSerializable|array|string\
    \  $jsonable\n# * @return void"
- name: json
  visibility: public
  parameters:
  - name: key
    default: 'null'
  comment: '# * Validate and return the decoded response JSON.

    # *

    # * @param  string|null  $key

    # * @return mixed'
- name: assertCount
  visibility: public
  parameters:
  - name: count
  - name: key
    default: 'null'
  comment: '# * Assert that the response JSON has the expected count of items at the
    given key.

    # *

    # * @param  int  $count

    # * @param  string|null  $key

    # * @return $this'
- name: assertExact
  visibility: public
  parameters:
  - name: data
  comment: '# * Assert that the response has the exact given JSON.

    # *

    # * @param  array  $data

    # * @return $this'
- name: assertSimilar
  visibility: public
  parameters:
  - name: data
  comment: '# * Assert that the response has the similar JSON as given.

    # *

    # * @param  array  $data

    # * @return $this'
- name: assertFragment
  visibility: public
  parameters:
  - name: data
  comment: '# * Assert that the response contains the given JSON fragment.

    # *

    # * @param  array  $data

    # * @return $this'
- name: assertMissing
  visibility: public
  parameters:
  - name: data
  - name: exact
    default: 'false'
  comment: '# * Assert that the response does not contain the given JSON fragment.

    # *

    # * @param  array  $data

    # * @param  bool  $exact

    # * @return $this'
- name: assertMissingExact
  visibility: public
  parameters:
  - name: data
  comment: '# * Assert that the response does not contain the exact JSON fragment.

    # *

    # * @param  array  $data

    # * @return $this'
- name: assertMissingPath
  visibility: public
  parameters:
  - name: path
  comment: '# * Assert that the response does not contain the given path.

    # *

    # * @param  string  $path

    # * @return $this'
- name: assertPath
  visibility: public
  parameters:
  - name: path
  - name: expect
  comment: '# * Assert that the expected value and type exists at the given path in
    the response.

    # *

    # * @param  string  $path

    # * @param  mixed  $expect

    # * @return $this'
- name: assertPathCanonicalizing
  visibility: public
  parameters:
  - name: path
  - name: expect
  comment: '# * Assert that the given path in the response contains all of the expected
    values without looking at the order.

    # *

    # * @param  string  $path

    # * @param  array  $expect

    # * @return $this'
- name: assertStructure
  visibility: public
  parameters:
  - name: structure
    default: 'null'
  - name: responseData
    default: 'null'
  comment: '# * Assert that the response has a given JSON structure.

    # *

    # * @param  array|null  $structure

    # * @param  array|null  $responseData

    # * @return $this'
- name: assertSubset
  visibility: public
  parameters:
  - name: data
  - name: strict
    default: 'false'
  comment: '# * Assert that the response is a superset of the given JSON.

    # *

    # * @param  array  $data

    # * @param  bool  $strict

    # * @return $this'
- name: reorderAssocKeys
  visibility: protected
  parameters:
  - name: data
  comment: '# * Reorder associative array keys to make it easy to compare arrays.

    # *

    # * @param  array  $data

    # * @return array'
- name: assertJsonMessage
  visibility: protected
  parameters:
  - name: data
  comment: '# * Get the assertion message for assertJson.

    # *

    # * @param  array  $data

    # * @return string'
- name: jsonSearchStrings
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Get the strings we need to search for when examining the JSON.

    # *

    # * @param  string  $key

    # * @param  string  $value

    # * @return array'
- name: count
  visibility: public
  parameters: []
  comment: '# * Get the total number of items in the underlying JSON array.

    # *

    # * @return int'
- name: offsetExists
  visibility: public
  parameters:
  - name: offset
  comment: '# * Determine whether an offset exists.

    # *

    # * @param  mixed  $offset

    # * @return bool'
- name: offsetGet
  visibility: public
  parameters:
  - name: offset
  comment: '# * Get the value at the given offset.

    # *

    # * @param  string  $offset

    # * @return mixed'
- name: offsetSet
  visibility: public
  parameters:
  - name: offset
  - name: value
  comment: '# * Set the value at the given offset.

    # *

    # * @param  string  $offset

    # * @param  mixed  $value

    # * @return void'
- name: offsetUnset
  visibility: public
  parameters:
  - name: offset
  comment: '# * Unset the value at the given offset.

    # *

    # * @param  string  $offset

    # * @return void'
traits:
- ArrayAccess
- Closure
- Countable
- Illuminate\Contracts\Support\Jsonable
- Illuminate\Support\Arr
- Illuminate\Support\Str
- JsonSerializable
interfaces:
- ArrayAccess
