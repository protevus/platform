name: Dispatcher
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: Exception
  type: class
  source: Exception
- name: Container
  type: class
  source: Illuminate\Container\Container
- name: BroadcastFactory
  type: class
  source: Illuminate\Contracts\Broadcasting\Factory
- name: ShouldBroadcast
  type: class
  source: Illuminate\Contracts\Broadcasting\ShouldBroadcast
- name: ContainerContract
  type: class
  source: Illuminate\Contracts\Container\Container
- name: DispatcherContract
  type: class
  source: Illuminate\Contracts\Events\Dispatcher
- name: ShouldDispatchAfterCommit
  type: class
  source: Illuminate\Contracts\Events\ShouldDispatchAfterCommit
- name: ShouldHandleEventsAfterCommit
  type: class
  source: Illuminate\Contracts\Events\ShouldHandleEventsAfterCommit
- name: ShouldBeEncrypted
  type: class
  source: Illuminate\Contracts\Queue\ShouldBeEncrypted
- name: ShouldQueue
  type: class
  source: Illuminate\Contracts\Queue\ShouldQueue
- name: ShouldQueueAfterCommit
  type: class
  source: Illuminate\Contracts\Queue\ShouldQueueAfterCommit
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: ReflectsClosures
  type: class
  source: Illuminate\Support\Traits\ReflectsClosures
- name: ReflectionClass
  type: class
  source: ReflectionClass
properties:
- name: container
  visibility: protected
  comment: '# * The IoC container instance.

    # *

    # * @var \Illuminate\Contracts\Container\Container'
- name: listeners
  visibility: protected
  comment: '# * The registered event listeners.

    # *

    # * @var array'
- name: wildcards
  visibility: protected
  comment: '# * The wildcard listeners.

    # *

    # * @var array'
- name: wildcardsCache
  visibility: protected
  comment: '# * The cached wildcard listeners.

    # *

    # * @var array'
- name: queueResolver
  visibility: protected
  comment: '# * The queue resolver instance.

    # *

    # * @var callable'
- name: transactionManagerResolver
  visibility: protected
  comment: '# * The database transaction manager resolver instance.

    # *

    # * @var callable'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: container
    default: 'null'
  comment: "# * The IoC container instance.\n# *\n# * @var \\Illuminate\\Contracts\\\
    Container\\Container\n# */\n# protected $container;\n# \n# /**\n# * The registered\
    \ event listeners.\n# *\n# * @var array\n# */\n# protected $listeners = [];\n\
    # \n# /**\n# * The wildcard listeners.\n# *\n# * @var array\n# */\n# protected\
    \ $wildcards = [];\n# \n# /**\n# * The cached wildcard listeners.\n# *\n# * @var\
    \ array\n# */\n# protected $wildcardsCache = [];\n# \n# /**\n# * The queue resolver\
    \ instance.\n# *\n# * @var callable\n# */\n# protected $queueResolver;\n# \n#\
    \ /**\n# * The database transaction manager resolver instance.\n# *\n# * @var\
    \ callable\n# */\n# protected $transactionManagerResolver;\n# \n# /**\n# * Create\
    \ a new event dispatcher instance.\n# *\n# * @param  \\Illuminate\\Contracts\\\
    Container\\Container|null  $container\n# * @return void"
- name: listen
  visibility: public
  parameters:
  - name: events
  - name: listener
    default: 'null'
  comment: '# * Register an event listener with the dispatcher.

    # *

    # * @param  \Closure|string|array  $events

    # * @param  \Closure|string|array|null  $listener

    # * @return void'
- name: setupWildcardListen
  visibility: protected
  parameters:
  - name: event
  - name: listener
  comment: '# * Setup a wildcard listener callback.

    # *

    # * @param  string  $event

    # * @param  \Closure|string  $listener

    # * @return void'
- name: hasListeners
  visibility: public
  parameters:
  - name: eventName
  comment: '# * Determine if a given event has listeners.

    # *

    # * @param  string  $eventName

    # * @return bool'
- name: hasWildcardListeners
  visibility: public
  parameters:
  - name: eventName
  comment: '# * Determine if the given event has any wildcard listeners.

    # *

    # * @param  string  $eventName

    # * @return bool'
- name: push
  visibility: public
  parameters:
  - name: event
  - name: payload
    default: '[]'
  comment: '# * Register an event and payload to be fired later.

    # *

    # * @param  string  $event

    # * @param  object|array  $payload

    # * @return void'
- name: flush
  visibility: public
  parameters:
  - name: event
  comment: '# * Flush a set of pushed events.

    # *

    # * @param  string  $event

    # * @return void'
- name: subscribe
  visibility: public
  parameters:
  - name: subscriber
  comment: '# * Register an event subscriber with the dispatcher.

    # *

    # * @param  object|string  $subscriber

    # * @return void'
- name: resolveSubscriber
  visibility: protected
  parameters:
  - name: subscriber
  comment: '# * Resolve the subscriber instance.

    # *

    # * @param  object|string  $subscriber

    # * @return mixed'
- name: until
  visibility: public
  parameters:
  - name: event
  - name: payload
    default: '[]'
  comment: '# * Fire an event until the first non-null response is returned.

    # *

    # * @param  string|object  $event

    # * @param  mixed  $payload

    # * @return mixed'
- name: dispatch
  visibility: public
  parameters:
  - name: event
  - name: payload
    default: '[]'
  - name: halt
    default: 'false'
  comment: '# * Fire an event and call the listeners.

    # *

    # * @param  string|object  $event

    # * @param  mixed  $payload

    # * @param  bool  $halt

    # * @return array|null'
- name: invokeListeners
  visibility: protected
  parameters:
  - name: event
  - name: payload
  - name: halt
    default: 'false'
  comment: '# * Broadcast an event and call its listeners.

    # *

    # * @param  string|object  $event

    # * @param  mixed  $payload

    # * @param  bool  $halt

    # * @return array|null'
- name: parseEventAndPayload
  visibility: protected
  parameters:
  - name: event
  - name: payload
  comment: '# * Parse the given event and payload and prepare them for dispatching.

    # *

    # * @param  mixed  $event

    # * @param  mixed  $payload

    # * @return array'
- name: shouldBroadcast
  visibility: protected
  parameters:
  - name: payload
  comment: '# * Determine if the payload has a broadcastable event.

    # *

    # * @param  array  $payload

    # * @return bool'
- name: broadcastWhen
  visibility: protected
  parameters:
  - name: event
  comment: '# * Check if the event should be broadcasted by the condition.

    # *

    # * @param  mixed  $event

    # * @return bool'
- name: broadcastEvent
  visibility: protected
  parameters:
  - name: event
  comment: '# * Broadcast the given event class.

    # *

    # * @param  \Illuminate\Contracts\Broadcasting\ShouldBroadcast  $event

    # * @return void'
- name: getListeners
  visibility: public
  parameters:
  - name: eventName
  comment: '# * Get all of the listeners for a given event name.

    # *

    # * @param  string  $eventName

    # * @return array'
- name: getWildcardListeners
  visibility: protected
  parameters:
  - name: eventName
  comment: '# * Get the wildcard listeners for the event.

    # *

    # * @param  string  $eventName

    # * @return array'
- name: addInterfaceListeners
  visibility: protected
  parameters:
  - name: eventName
  - name: listeners
    default: '[]'
  comment: '# * Add the listeners for the event''s interfaces to the given array.

    # *

    # * @param  string  $eventName

    # * @param  array  $listeners

    # * @return array'
- name: prepareListeners
  visibility: protected
  parameters:
  - name: eventName
  comment: '# * Prepare the listeners for a given event.

    # *

    # * @param  string  $eventName

    # * @return \Closure[]'
- name: makeListener
  visibility: public
  parameters:
  - name: listener
  - name: wildcard
    default: 'false'
  comment: '# * Register an event listener with the dispatcher.

    # *

    # * @param  \Closure|string|array  $listener

    # * @param  bool  $wildcard

    # * @return \Closure'
- name: createClassListener
  visibility: public
  parameters:
  - name: listener
  - name: wildcard
    default: 'false'
  comment: '# * Create a class based listener using the IoC container.

    # *

    # * @param  string  $listener

    # * @param  bool  $wildcard

    # * @return \Closure'
- name: createClassCallable
  visibility: protected
  parameters:
  - name: listener
  comment: '# * Create the class based event callable.

    # *

    # * @param  array|string  $listener

    # * @return callable'
- name: parseClassCallable
  visibility: protected
  parameters:
  - name: listener
  comment: '# * Parse the class listener into class and method.

    # *

    # * @param  string  $listener

    # * @return array'
- name: handlerShouldBeQueued
  visibility: protected
  parameters:
  - name: class
  comment: '# * Determine if the event handler class should be queued.

    # *

    # * @param  string  $class

    # * @return bool'
- name: createQueuedHandlerCallable
  visibility: protected
  parameters:
  - name: class
  - name: method
  comment: '# * Create a callable for putting an event handler on the queue.

    # *

    # * @param  string  $class

    # * @param  string  $method

    # * @return \Closure'
- name: handlerShouldBeDispatchedAfterDatabaseTransactions
  visibility: protected
  parameters:
  - name: listener
  comment: '# * Determine if the given event handler should be dispatched after all
    database transactions have committed.

    # *

    # * @param  object|mixed  $listener

    # * @return bool'
- name: createCallbackForListenerRunningAfterCommits
  visibility: protected
  parameters:
  - name: listener
  - name: method
  comment: '# * Create a callable for dispatching a listener after database transactions.

    # *

    # * @param  mixed  $listener

    # * @param  string  $method

    # * @return \Closure'
- name: handlerWantsToBeQueued
  visibility: protected
  parameters:
  - name: class
  - name: arguments
  comment: '# * Determine if the event handler wants to be queued.

    # *

    # * @param  string  $class

    # * @param  array  $arguments

    # * @return bool'
- name: queueHandler
  visibility: protected
  parameters:
  - name: class
  - name: method
  - name: arguments
  comment: '# * Queue the handler class.

    # *

    # * @param  string  $class

    # * @param  string  $method

    # * @param  array  $arguments

    # * @return void'
- name: createListenerAndJob
  visibility: protected
  parameters:
  - name: class
  - name: method
  - name: arguments
  comment: '# * Create the listener and job for a queued listener.

    # *

    # * @param  string  $class

    # * @param  string  $method

    # * @param  array  $arguments

    # * @return array'
- name: propagateListenerOptions
  visibility: protected
  parameters:
  - name: listener
  - name: job
  comment: '# * Propagate listener options to the job.

    # *

    # * @param  mixed  $listener

    # * @param  \Illuminate\Events\CallQueuedListener  $job

    # * @return mixed'
- name: forget
  visibility: public
  parameters:
  - name: event
  comment: '# * Remove a set of listeners from the dispatcher.

    # *

    # * @param  string  $event

    # * @return void'
- name: forgetPushed
  visibility: public
  parameters: []
  comment: '# * Forget all of the pushed listeners.

    # *

    # * @return void'
- name: resolveQueue
  visibility: protected
  parameters: []
  comment: '# * Get the queue implementation from the resolver.

    # *

    # * @return \Illuminate\Contracts\Queue\Queue'
- name: setQueueResolver
  visibility: public
  parameters:
  - name: resolver
  comment: '# * Set the queue resolver implementation.

    # *

    # * @param  callable  $resolver

    # * @return $this'
- name: resolveTransactionManager
  visibility: protected
  parameters: []
  comment: '# * Get the database transaction manager implementation from the resolver.

    # *

    # * @return \Illuminate\Database\DatabaseTransactionsManager|null'
- name: setTransactionManagerResolver
  visibility: public
  parameters:
  - name: resolver
  comment: '# * Set the database transaction manager resolver implementation.

    # *

    # * @param  callable  $resolver

    # * @return $this'
- name: getRawListeners
  visibility: public
  parameters: []
  comment: '# * Gets the raw, unprepared listeners.

    # *

    # * @return array'
traits:
- Closure
- Exception
- Illuminate\Container\Container
- Illuminate\Contracts\Broadcasting\ShouldBroadcast
- Illuminate\Contracts\Events\ShouldDispatchAfterCommit
- Illuminate\Contracts\Events\ShouldHandleEventsAfterCommit
- Illuminate\Contracts\Queue\ShouldBeEncrypted
- Illuminate\Contracts\Queue\ShouldQueue
- Illuminate\Contracts\Queue\ShouldQueueAfterCommit
- Illuminate\Support\Arr
- Illuminate\Support\Str
- Illuminate\Support\Traits\Macroable
- Illuminate\Support\Traits\ReflectsClosures
- ReflectionClass
- Macroable
interfaces:
- DispatcherContract
