name: Store
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: Session
  type: class
  source: Illuminate\Contracts\Session\Session
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: MessageBag
  type: class
  source: Illuminate\Support\MessageBag
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: ViewErrorBag
  type: class
  source: Illuminate\Support\ViewErrorBag
- name: SessionHandlerInterface
  type: class
  source: SessionHandlerInterface
- name: stdClass
  type: class
  source: stdClass
- name: Macroable
  type: class
  source: Macroable
properties:
- name: id
  visibility: protected
  comment: '# * The session ID.

    # *

    # * @var string'
- name: name
  visibility: protected
  comment: '# * The session name.

    # *

    # * @var string'
- name: attributes
  visibility: protected
  comment: '# * The session attributes.

    # *

    # * @var array'
- name: handler
  visibility: protected
  comment: '# * The session handler implementation.

    # *

    # * @var \SessionHandlerInterface'
- name: serialization
  visibility: protected
  comment: '# * The session store''s serialization strategy.

    # *

    # * @var string'
- name: started
  visibility: protected
  comment: '# * Session store started status.

    # *

    # * @var bool'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: name
  - name: handler
  - name: id
    default: 'null'
  - name: serialization
    default: '''php'''
  comment: "# * The session ID.\n# *\n# * @var string\n# */\n# protected $id;\n# \n\
    # /**\n# * The session name.\n# *\n# * @var string\n# */\n# protected $name;\n\
    # \n# /**\n# * The session attributes.\n# *\n# * @var array\n# */\n# protected\
    \ $attributes = [];\n# \n# /**\n# * The session handler implementation.\n# *\n\
    # * @var \\SessionHandlerInterface\n# */\n# protected $handler;\n# \n# /**\n#\
    \ * The session store's serialization strategy.\n# *\n# * @var string\n# */\n\
    # protected $serialization = 'php';\n# \n# /**\n# * Session store started status.\n\
    # *\n# * @var bool\n# */\n# protected $started = false;\n# \n# /**\n# * Create\
    \ a new session instance.\n# *\n# * @param  string  $name\n# * @param  \\SessionHandlerInterface\
    \  $handler\n# * @param  string|null  $id\n# * @param  string  $serialization\n\
    # * @return void"
- name: start
  visibility: public
  parameters: []
  comment: '# * Start the session, reading the data from a handler.

    # *

    # * @return bool'
- name: loadSession
  visibility: protected
  parameters: []
  comment: '# * Load the session data from the handler.

    # *

    # * @return void'
- name: readFromHandler
  visibility: protected
  parameters: []
  comment: '# * Read the session data from the handler.

    # *

    # * @return array'
- name: prepareForUnserialize
  visibility: protected
  parameters:
  - name: data
  comment: '# * Prepare the raw string data from the session for unserialization.

    # *

    # * @param  string  $data

    # * @return string'
- name: marshalErrorBag
  visibility: protected
  parameters: []
  comment: '# * Marshal the ViewErrorBag when using JSON serialization for sessions.

    # *

    # * @return void'
- name: save
  visibility: public
  parameters: []
  comment: '# * Save the session data to storage.

    # *

    # * @return void'
- name: prepareErrorBagForSerialization
  visibility: protected
  parameters: []
  comment: '# * Prepare the ViewErrorBag instance for JSON serialization.

    # *

    # * @return void'
- name: prepareForStorage
  visibility: protected
  parameters:
  - name: data
  comment: '# * Prepare the serialized session data for storage.

    # *

    # * @param  string  $data

    # * @return string'
- name: ageFlashData
  visibility: public
  parameters: []
  comment: '# * Age the flash data for the session.

    # *

    # * @return void'
- name: all
  visibility: public
  parameters: []
  comment: '# * Get all of the session data.

    # *

    # * @return array'
- name: only
  visibility: public
  parameters:
  - name: keys
  comment: '# * Get a subset of the session data.

    # *

    # * @param  array  $keys

    # * @return array'
- name: except
  visibility: public
  parameters:
  - name: keys
  comment: '# * Get all the session data except for a specified array of items.

    # *

    # * @param  array  $keys

    # * @return array'
- name: exists
  visibility: public
  parameters:
  - name: key
  comment: '# * Checks if a key exists.

    # *

    # * @param  string|array  $key

    # * @return bool'
- name: missing
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if the given key is missing from the session data.

    # *

    # * @param  string|array  $key

    # * @return bool'
- name: has
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if a key is present and not null.

    # *

    # * @param  string|array  $key

    # * @return bool'
- name: hasAny
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if any of the given keys are present and not null.

    # *

    # * @param  string|array  $key

    # * @return bool'
- name: get
  visibility: public
  parameters:
  - name: key
  - name: default
    default: 'null'
  comment: '# * Get an item from the session.

    # *

    # * @param  string  $key

    # * @param  mixed  $default

    # * @return mixed'
- name: pull
  visibility: public
  parameters:
  - name: key
  - name: default
    default: 'null'
  comment: '# * Get the value of a given key and then forget it.

    # *

    # * @param  string  $key

    # * @param  mixed  $default

    # * @return mixed'
- name: hasOldInput
  visibility: public
  parameters:
  - name: key
    default: 'null'
  comment: '# * Determine if the session contains old input.

    # *

    # * @param  string|null  $key

    # * @return bool'
- name: getOldInput
  visibility: public
  parameters:
  - name: key
    default: 'null'
  - name: default
    default: 'null'
  comment: '# * Get the requested item from the flashed input array.

    # *

    # * @param  string|null  $key

    # * @param  mixed  $default

    # * @return mixed'
- name: replace
  visibility: public
  parameters:
  - name: attributes
  comment: '# * Replace the given session attributes entirely.

    # *

    # * @param  array  $attributes

    # * @return void'
- name: put
  visibility: public
  parameters:
  - name: key
  - name: value
    default: 'null'
  comment: '# * Put a key / value pair or array of key / value pairs in the session.

    # *

    # * @param  string|array  $key

    # * @param  mixed  $value

    # * @return void'
- name: remember
  visibility: public
  parameters:
  - name: key
  - name: callback
  comment: '# * Get an item from the session, or store the default value.

    # *

    # * @param  string  $key

    # * @param  \Closure  $callback

    # * @return mixed'
- name: push
  visibility: public
  parameters:
  - name: key
  - name: value
  comment: '# * Push a value onto a session array.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return void'
- name: increment
  visibility: public
  parameters:
  - name: key
  - name: amount
    default: '1'
  comment: '# * Increment the value of an item in the session.

    # *

    # * @param  string  $key

    # * @param  int  $amount

    # * @return mixed'
- name: decrement
  visibility: public
  parameters:
  - name: key
  - name: amount
    default: '1'
  comment: '# * Decrement the value of an item in the session.

    # *

    # * @param  string  $key

    # * @param  int  $amount

    # * @return int'
- name: flash
  visibility: public
  parameters:
  - name: key
  - name: value
    default: 'true'
  comment: '# * Flash a key / value pair to the session.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return void'
- name: now
  visibility: public
  parameters:
  - name: key
  - name: value
  comment: '# * Flash a key / value pair to the session for immediate use.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return void'
- name: reflash
  visibility: public
  parameters: []
  comment: '# * Reflash all of the session flash data.

    # *

    # * @return void'
- name: keep
  visibility: public
  parameters:
  - name: keys
    default: 'null'
  comment: '# * Reflash a subset of the current flash data.

    # *

    # * @param  array|mixed  $keys

    # * @return void'
- name: mergeNewFlashes
  visibility: protected
  parameters:
  - name: keys
  comment: '# * Merge new flash keys into the new flash array.

    # *

    # * @param  array  $keys

    # * @return void'
- name: removeFromOldFlashData
  visibility: protected
  parameters:
  - name: keys
  comment: '# * Remove the given keys from the old flash data.

    # *

    # * @param  array  $keys

    # * @return void'
- name: flashInput
  visibility: public
  parameters:
  - name: value
  comment: '# * Flash an input array to the session.

    # *

    # * @param  array  $value

    # * @return void'
- name: remove
  visibility: public
  parameters:
  - name: key
  comment: '# * Remove an item from the session, returning its value.

    # *

    # * @param  string  $key

    # * @return mixed'
- name: forget
  visibility: public
  parameters:
  - name: keys
  comment: '# * Remove one or many items from the session.

    # *

    # * @param  string|array  $keys

    # * @return void'
- name: flush
  visibility: public
  parameters: []
  comment: '# * Remove all of the items from the session.

    # *

    # * @return void'
- name: invalidate
  visibility: public
  parameters: []
  comment: '# * Flush the session data and regenerate the ID.

    # *

    # * @return bool'
- name: regenerate
  visibility: public
  parameters:
  - name: destroy
    default: 'false'
  comment: '# * Generate a new session identifier.

    # *

    # * @param  bool  $destroy

    # * @return bool'
- name: migrate
  visibility: public
  parameters:
  - name: destroy
    default: 'false'
  comment: '# * Generate a new session ID for the session.

    # *

    # * @param  bool  $destroy

    # * @return bool'
- name: isStarted
  visibility: public
  parameters: []
  comment: '# * Determine if the session has been started.

    # *

    # * @return bool'
- name: getName
  visibility: public
  parameters: []
  comment: '# * Get the name of the session.

    # *

    # * @return string'
- name: setName
  visibility: public
  parameters:
  - name: name
  comment: '# * Set the name of the session.

    # *

    # * @param  string  $name

    # * @return void'
- name: id
  visibility: public
  parameters: []
  comment: '# * Get the current session ID.

    # *

    # * @return string'
- name: getId
  visibility: public
  parameters: []
  comment: '# * Get the current session ID.

    # *

    # * @return string'
- name: setId
  visibility: public
  parameters:
  - name: id
  comment: '# * Set the session ID.

    # *

    # * @param  string|null  $id

    # * @return void'
- name: isValidId
  visibility: public
  parameters:
  - name: id
  comment: '# * Determine if this is a valid session ID.

    # *

    # * @param  string|null  $id

    # * @return bool'
- name: generateSessionId
  visibility: protected
  parameters: []
  comment: '# * Get a new, random session ID.

    # *

    # * @return string'
- name: setExists
  visibility: public
  parameters:
  - name: value
  comment: '# * Set the existence of the session on the handler if applicable.

    # *

    # * @param  bool  $value

    # * @return void'
- name: token
  visibility: public
  parameters: []
  comment: '# * Get the CSRF token value.

    # *

    # * @return string'
- name: regenerateToken
  visibility: public
  parameters: []
  comment: '# * Regenerate the CSRF token value.

    # *

    # * @return void'
- name: previousUrl
  visibility: public
  parameters: []
  comment: '# * Get the previous URL from the session.

    # *

    # * @return string|null'
- name: setPreviousUrl
  visibility: public
  parameters:
  - name: url
  comment: '# * Set the "previous" URL in the session.

    # *

    # * @param  string  $url

    # * @return void'
- name: passwordConfirmed
  visibility: public
  parameters: []
  comment: '# * Specify that the user has confirmed their password.

    # *

    # * @return void'
- name: getHandler
  visibility: public
  parameters: []
  comment: '# * Get the underlying session handler implementation.

    # *

    # * @return \SessionHandlerInterface'
- name: setHandler
  visibility: public
  parameters:
  - name: handler
  comment: '# * Set the underlying session handler implementation.

    # *

    # * @param  \SessionHandlerInterface  $handler

    # * @return \SessionHandlerInterface'
- name: handlerNeedsRequest
  visibility: public
  parameters: []
  comment: '# * Determine if the session handler needs a request.

    # *

    # * @return bool'
- name: setRequestOnHandler
  visibility: public
  parameters:
  - name: request
  comment: '# * Set the request on the handler instance.

    # *

    # * @param  \Illuminate\Http\Request  $request

    # * @return void'
traits:
- Closure
- Illuminate\Contracts\Session\Session
- Illuminate\Support\Arr
- Illuminate\Support\MessageBag
- Illuminate\Support\Str
- Illuminate\Support\Traits\Macroable
- Illuminate\Support\ViewErrorBag
- SessionHandlerInterface
- stdClass
- Macroable
interfaces:
- Session
