name: SessionManager
class_comment: '# * @mixin \Illuminate\Session\Store'
dependencies:
- name: Manager
  type: class
  source: Illuminate\Support\Manager
properties: []
methods:
- name: callCustomCreator
  visibility: protected
  parameters:
  - name: driver
  comment: '# * @mixin \Illuminate\Session\Store

    # */

    # class SessionManager extends Manager

    # {

    # /**

    # * Call a custom driver creator.

    # *

    # * @param  string  $driver

    # * @return \Illuminate\Session\Store'
- name: createNullDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the "null" session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: createArrayDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the "array" session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: createCookieDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the "cookie" session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: createFileDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the file session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: createNativeDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the file session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: createDatabaseDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the database session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: getDatabaseConnection
  visibility: protected
  parameters: []
  comment: '# * Get the database connection for the database driver.

    # *

    # * @return \Illuminate\Database\Connection'
- name: createApcDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the APC session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: createMemcachedDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the Memcached session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: createRedisDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the Redis session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: createDynamodbDriver
  visibility: protected
  parameters: []
  comment: '# * Create an instance of the DynamoDB session driver.

    # *

    # * @return \Illuminate\Session\Store'
- name: createCacheBased
  visibility: protected
  parameters:
  - name: driver
  comment: '# * Create an instance of a cache driven driver.

    # *

    # * @param  string  $driver

    # * @return \Illuminate\Session\Store'
- name: createCacheHandler
  visibility: protected
  parameters:
  - name: driver
  comment: '# * Create the cache based session handler instance.

    # *

    # * @param  string  $driver

    # * @return \Illuminate\Session\CacheBasedSessionHandler'
- name: buildSession
  visibility: protected
  parameters:
  - name: handler
  comment: '# * Build the session instance.

    # *

    # * @param  \SessionHandlerInterface  $handler

    # * @return \Illuminate\Session\Store'
- name: buildEncryptedSession
  visibility: protected
  parameters:
  - name: handler
  comment: '# * Build the encrypted session instance.

    # *

    # * @param  \SessionHandlerInterface  $handler

    # * @return \Illuminate\Session\EncryptedStore'
- name: shouldBlock
  visibility: public
  parameters: []
  comment: '# * Determine if requests for the same session should wait for each to
    finish before executing.

    # *

    # * @return bool'
- name: blockDriver
  visibility: public
  parameters: []
  comment: '# * Get the name of the cache store / driver that should be used to acquire
    session locks.

    # *

    # * @return string|null'
- name: defaultRouteBlockLockSeconds
  visibility: public
  parameters: []
  comment: '# * Get the maximum number of seconds the session lock should be held
    for.

    # *

    # * @return int'
- name: defaultRouteBlockWaitSeconds
  visibility: public
  parameters: []
  comment: '# * Get the maximum number of seconds to wait while attempting to acquire
    a route block session lock.

    # *

    # * @return int'
- name: getSessionConfig
  visibility: public
  parameters: []
  comment: '# * Get the session configuration.

    # *

    # * @return array'
- name: getDefaultDriver
  visibility: public
  parameters: []
  comment: '# * Get the default session driver name.

    # *

    # * @return string'
- name: setDefaultDriver
  visibility: public
  parameters:
  - name: name
  comment: '# * Set the default session driver name.

    # *

    # * @param  string  $name

    # * @return void'
traits:
- Illuminate\Support\Manager
interfaces: []
