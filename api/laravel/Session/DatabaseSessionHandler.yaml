name: DatabaseSessionHandler
class_comment: null
dependencies:
- name: Guard
  type: class
  source: Illuminate\Contracts\Auth\Guard
- name: Container
  type: class
  source: Illuminate\Contracts\Container\Container
- name: ConnectionInterface
  type: class
  source: Illuminate\Database\ConnectionInterface
- name: QueryException
  type: class
  source: Illuminate\Database\QueryException
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Carbon
  type: class
  source: Illuminate\Support\Carbon
- name: InteractsWithTime
  type: class
  source: Illuminate\Support\InteractsWithTime
- name: SessionHandlerInterface
  type: class
  source: SessionHandlerInterface
- name: InteractsWithTime
  type: class
  source: InteractsWithTime
properties:
- name: connection
  visibility: protected
  comment: '# * The database connection instance.

    # *

    # * @var \Illuminate\Database\ConnectionInterface'
- name: table
  visibility: protected
  comment: '# * The name of the session table.

    # *

    # * @var string'
- name: minutes
  visibility: protected
  comment: '# * The number of minutes the session should be valid.

    # *

    # * @var int'
- name: container
  visibility: protected
  comment: '# * The container instance.

    # *

    # * @var \Illuminate\Contracts\Container\Container|null'
- name: exists
  visibility: protected
  comment: '# * The existence state of the session.

    # *

    # * @var bool'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: connection
  - name: table
  - name: minutes
  - name: container
    default: 'null'
  comment: "# * The database connection instance.\n# *\n# * @var \\Illuminate\\Database\\\
    ConnectionInterface\n# */\n# protected $connection;\n# \n# /**\n# * The name of\
    \ the session table.\n# *\n# * @var string\n# */\n# protected $table;\n# \n# /**\n\
    # * The number of minutes the session should be valid.\n# *\n# * @var int\n# */\n\
    # protected $minutes;\n# \n# /**\n# * The container instance.\n# *\n# * @var \\\
    Illuminate\\Contracts\\Container\\Container|null\n# */\n# protected $container;\n\
    # \n# /**\n# * The existence state of the session.\n# *\n# * @var bool\n# */\n\
    # protected $exists;\n# \n# /**\n# * Create a new database session handler instance.\n\
    # *\n# * @param  \\Illuminate\\Database\\ConnectionInterface  $connection\n# *\
    \ @param  string  $table\n# * @param  int  $minutes\n# * @param  \\Illuminate\\\
    Contracts\\Container\\Container|null  $container\n# * @return void"
- name: open
  visibility: public
  parameters:
  - name: savePath
  - name: sessionName
  comment: '# * {@inheritdoc}

    # *

    # * @return bool'
- name: close
  visibility: public
  parameters: []
  comment: '# * {@inheritdoc}

    # *

    # * @return bool'
- name: read
  visibility: public
  parameters:
  - name: sessionId
  comment: '# * {@inheritdoc}

    # *

    # * @return string|false'
- name: expired
  visibility: protected
  parameters:
  - name: session
  comment: '# * Determine if the session is expired.

    # *

    # * @param  \stdClass  $session

    # * @return bool'
- name: write
  visibility: public
  parameters:
  - name: sessionId
  - name: data
  comment: '# * {@inheritdoc}

    # *

    # * @return bool'
- name: performInsert
  visibility: protected
  parameters:
  - name: sessionId
  - name: payload
  comment: '# * Perform an insert operation on the session ID.

    # *

    # * @param  string  $sessionId

    # * @param  array<string, mixed>  $payload

    # * @return bool|null'
- name: performUpdate
  visibility: protected
  parameters:
  - name: sessionId
  - name: payload
  comment: '# * Perform an update operation on the session ID.

    # *

    # * @param  string  $sessionId

    # * @param  array<string, mixed>  $payload

    # * @return int'
- name: getDefaultPayload
  visibility: protected
  parameters:
  - name: data
  comment: '# * Get the default payload for the session.

    # *

    # * @param  string  $data

    # * @return array'
- name: addUserInformation
  visibility: protected
  parameters:
  - name: '&$payload'
  comment: '# * Add the user information to the session payload.

    # *

    # * @param  array  $payload

    # * @return $this'
- name: userId
  visibility: protected
  parameters: []
  comment: '# * Get the currently authenticated user''s ID.

    # *

    # * @return mixed'
- name: addRequestInformation
  visibility: protected
  parameters:
  - name: '&$payload'
  comment: '# * Add the request information to the session payload.

    # *

    # * @param  array  $payload

    # * @return $this'
- name: ipAddress
  visibility: protected
  parameters: []
  comment: '# * Get the IP address for the current request.

    # *

    # * @return string|null'
- name: userAgent
  visibility: protected
  parameters: []
  comment: '# * Get the user agent for the current request.

    # *

    # * @return string'
- name: destroy
  visibility: public
  parameters:
  - name: sessionId
  comment: '# * {@inheritdoc}

    # *

    # * @return bool'
- name: gc
  visibility: public
  parameters:
  - name: lifetime
  comment: '# * {@inheritdoc}

    # *

    # * @return int'
- name: getQuery
  visibility: protected
  parameters: []
  comment: '# * Get a fresh query builder instance for the table.

    # *

    # * @return \Illuminate\Database\Query\Builder'
- name: setContainer
  visibility: public
  parameters:
  - name: container
  comment: '# * Set the application instance used by the handler.

    # *

    # * @param  \Illuminate\Contracts\Foundation\Application  $container

    # * @return $this'
- name: setExists
  visibility: public
  parameters:
  - name: value
  comment: '# * Set the existence state for the session.

    # *

    # * @param  bool  $value

    # * @return $this'
traits:
- Illuminate\Contracts\Auth\Guard
- Illuminate\Contracts\Container\Container
- Illuminate\Database\ConnectionInterface
- Illuminate\Database\QueryException
- Illuminate\Support\Arr
- Illuminate\Support\Carbon
- Illuminate\Support\InteractsWithTime
- SessionHandlerInterface
- InteractsWithTime
interfaces:
- ExistenceAwareInterface
