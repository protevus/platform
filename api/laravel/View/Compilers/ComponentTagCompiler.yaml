name: ComponentTagCompiler
class_comment: '# * @author Spatie bvba <info@spatie.be>

  # * @author Taylor Otwell <taylor@laravel.com>'
dependencies:
- name: Container
  type: class
  source: Illuminate\Container\Container
- name: Application
  type: class
  source: Illuminate\Contracts\Foundation\Application
- name: Factory
  type: class
  source: Illuminate\Contracts\View\Factory
- name: Filesystem
  type: class
  source: Illuminate\Filesystem\Filesystem
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: AnonymousComponent
  type: class
  source: Illuminate\View\AnonymousComponent
- name: DynamicComponent
  type: class
  source: Illuminate\View\DynamicComponent
- name: ViewFinderInterface
  type: class
  source: Illuminate\View\ViewFinderInterface
- name: InvalidArgumentException
  type: class
  source: InvalidArgumentException
- name: ReflectionClass
  type: class
  source: ReflectionClass
properties:
- name: blade
  visibility: protected
  comment: '# * @author Spatie bvba <info@spatie.be>

    # * @author Taylor Otwell <taylor@laravel.com>

    # */

    # class ComponentTagCompiler

    # {

    # /**

    # * The Blade compiler instance.

    # *

    # * @var \Illuminate\View\Compilers\BladeCompiler'
- name: aliases
  visibility: protected
  comment: '# * The component class aliases.

    # *

    # * @var array'
- name: namespaces
  visibility: protected
  comment: '# * The component class namespaces.

    # *

    # * @var array'
- name: boundAttributes
  visibility: protected
  comment: '# * The "bind:" attributes that have been compiled for the current component.

    # *

    # * @var array'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: aliases
    default: '[]'
  - name: namespaces
    default: '[]'
  - name: blade
    default: 'null'
  comment: "# * @author Spatie bvba <info@spatie.be>\n# * @author Taylor Otwell <taylor@laravel.com>\n\
    # */\n# class ComponentTagCompiler\n# {\n# /**\n# * The Blade compiler instance.\n\
    # *\n# * @var \\Illuminate\\View\\Compilers\\BladeCompiler\n# */\n# protected\
    \ $blade;\n# \n# /**\n# * The component class aliases.\n# *\n# * @var array\n\
    # */\n# protected $aliases = [];\n# \n# /**\n# * The component class namespaces.\n\
    # *\n# * @var array\n# */\n# protected $namespaces = [];\n# \n# /**\n# * The \"\
    bind:\" attributes that have been compiled for the current component.\n# *\n#\
    \ * @var array\n# */\n# protected $boundAttributes = [];\n# \n# /**\n# * Create\
    \ a new component tag compiler.\n# *\n# * @param  array  $aliases\n# * @param\
    \  array  $namespaces\n# * @param  \\Illuminate\\View\\Compilers\\BladeCompiler|null\
    \  $blade\n# * @return void"
- name: compile
  visibility: public
  parameters:
  - name: value
  comment: '# * Compile the component and slot tags within the given string.

    # *

    # * @param  string  $value

    # * @return string'
- name: compileTags
  visibility: public
  parameters:
  - name: value
  comment: '# * Compile the tags within the given string.

    # *

    # * @param  string  $value

    # * @return string

    # *

    # * @throws \InvalidArgumentException'
- name: compileOpeningTags
  visibility: protected
  parameters:
  - name: value
  comment: '# * Compile the opening tags within the given string.

    # *

    # * @param  string  $value

    # * @return string

    # *

    # * @throws \InvalidArgumentException'
- name: compileSelfClosingTags
  visibility: protected
  parameters:
  - name: value
  comment: '# * Compile the self-closing tags within the given string.

    # *

    # * @param  string  $value

    # * @return string

    # *

    # * @throws \InvalidArgumentException'
- name: componentString
  visibility: protected
  parameters:
  - name: component
  - name: attributes
  comment: '# * Compile the Blade component string for the given component and attributes.

    # *

    # * @param  string  $component

    # * @param  array  $attributes

    # * @return string

    # *

    # * @throws \InvalidArgumentException'
- name: componentClass
  visibility: public
  parameters:
  - name: component
  comment: '# * Get the component class for a given component alias.

    # *

    # * @param  string  $component

    # * @return string

    # *

    # * @throws \InvalidArgumentException'
- name: guessAnonymousComponentUsingPaths
  visibility: protected
  parameters:
  - name: viewFactory
  - name: component
  comment: '# * Attempt to find an anonymous component using the registered anonymous
    component paths.

    # *

    # * @param  \Illuminate\Contracts\View\Factory  $viewFactory

    # * @param  string  $component

    # * @return string|null'
- name: guessAnonymousComponentUsingNamespaces
  visibility: protected
  parameters:
  - name: viewFactory
  - name: component
  comment: '# * Attempt to find an anonymous component using the registered anonymous
    component namespaces.

    # *

    # * @param  \Illuminate\Contracts\View\Factory  $viewFactory

    # * @param  string  $component

    # * @return string|null'
- name: findClassByComponent
  visibility: public
  parameters:
  - name: component
  comment: '# * Find the class for the given component using the registered namespaces.

    # *

    # * @param  string  $component

    # * @return string|null'
- name: guessClassName
  visibility: public
  parameters:
  - name: component
  comment: '# * Guess the class name for the given component.

    # *

    # * @param  string  $component

    # * @return string'
- name: formatClassName
  visibility: public
  parameters:
  - name: component
  comment: '# * Format the class name for the given component.

    # *

    # * @param  string  $component

    # * @return string'
- name: guessViewName
  visibility: public
  parameters:
  - name: name
  - name: prefix
    default: '''components.'''
  comment: '# * Guess the view name for the given component.

    # *

    # * @param  string  $name

    # * @param  string  $prefix

    # * @return string'
- name: partitionDataAndAttributes
  visibility: public
  parameters:
  - name: class
  - name: attributes
  comment: '# * Partition the data and extra attributes from the given array of attributes.

    # *

    # * @param  string  $class

    # * @param  array  $attributes

    # * @return array'
- name: compileClosingTags
  visibility: protected
  parameters:
  - name: value
  comment: '# * Compile the closing tags within the given string.

    # *

    # * @param  string  $value

    # * @return string'
- name: compileSlots
  visibility: public
  parameters:
  - name: value
  comment: '# * Compile the slot tags within the given string.

    # *

    # * @param  string  $value

    # * @return string'
- name: getAttributesFromAttributeString
  visibility: protected
  parameters:
  - name: attributeString
  comment: '# * Get an array of attributes from the given attribute string.

    # *

    # * @param  string  $attributeString

    # * @return array'
- name: parseShortAttributeSyntax
  visibility: protected
  parameters:
  - name: value
  comment: '# * Parses a short attribute syntax like :$foo into a fully-qualified
    syntax like :foo="$foo".

    # *

    # * @param  string  $value

    # * @return string'
- name: parseAttributeBag
  visibility: protected
  parameters:
  - name: attributeString
  comment: '# * Parse the attribute bag in a given attribute string into its fully-qualified
    syntax.

    # *

    # * @param  string  $attributeString

    # * @return string'
- name: parseComponentTagClassStatements
  visibility: protected
  parameters:
  - name: attributeString
  comment: '# * Parse @class statements in a given attribute string into their fully-qualified
    syntax.

    # *

    # * @param  string  $attributeString

    # * @return string'
- name: parseComponentTagStyleStatements
  visibility: protected
  parameters:
  - name: attributeString
  comment: '# * Parse @style statements in a given attribute string into their fully-qualified
    syntax.

    # *

    # * @param  string  $attributeString

    # * @return string'
- name: parseBindAttributes
  visibility: protected
  parameters:
  - name: attributeString
  comment: '# * Parse the "bind" attributes in a given attribute string into their
    fully-qualified syntax.

    # *

    # * @param  string  $attributeString

    # * @return string'
- name: compileAttributeEchos
  visibility: protected
  parameters:
  - name: attributeString
  comment: '# * Compile any Blade echo statements that are present in the attribute
    string.

    # *

    # * These echo statements need to be converted to string concatenation statements.

    # *

    # * @param  string  $attributeString

    # * @return string'
- name: escapeSingleQuotesOutsideOfPhpBlocks
  visibility: protected
  parameters:
  - name: value
  comment: '# * Escape the single quotes in the given string that are outside of PHP
    blocks.

    # *

    # * @param  string  $value

    # * @return string'
- name: attributesToString
  visibility: protected
  parameters:
  - name: attributes
  - name: escapeBound
    default: 'true'
  comment: '# * Convert an array of attributes to a string.

    # *

    # * @param  array  $attributes

    # * @param  bool  $escapeBound

    # * @return string'
- name: stripQuotes
  visibility: public
  parameters:
  - name: value
  comment: '# * Strip any quotes from the given string.

    # *

    # * @param  string  $value

    # * @return string'
traits:
- Illuminate\Container\Container
- Illuminate\Contracts\Foundation\Application
- Illuminate\Contracts\View\Factory
- Illuminate\Filesystem\Filesystem
- Illuminate\Support\Str
- Illuminate\View\AnonymousComponent
- Illuminate\View\DynamicComponent
- Illuminate\View\ViewFinderInterface
- InvalidArgumentException
- ReflectionClass
interfaces: []
