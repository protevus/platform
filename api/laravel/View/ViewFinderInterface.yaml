name: ViewFinderInterface
class_comment: null
dependencies: []
properties: []
methods:
- name: find
  visibility: public
  parameters:
  - name: view
  comment: "# * Hint path delimiter value.\n# *\n# * @var string\n# */\n# const HINT_PATH_DELIMITER\
    \ = '::';\n# \n# /**\n# * Get the fully qualified location of the view.\n# *\n\
    # * @param  string  $view\n# * @return string"
- name: addLocation
  visibility: public
  parameters:
  - name: location
  comment: '# * Add a location to the finder.

    # *

    # * @param  string  $location

    # * @return void'
- name: addNamespace
  visibility: public
  parameters:
  - name: namespace
  - name: hints
  comment: '# * Add a namespace hint to the finder.

    # *

    # * @param  string  $namespace

    # * @param  string|array  $hints

    # * @return void'
- name: prependNamespace
  visibility: public
  parameters:
  - name: namespace
  - name: hints
  comment: '# * Prepend a namespace hint to the finder.

    # *

    # * @param  string  $namespace

    # * @param  string|array  $hints

    # * @return void'
- name: replaceNamespace
  visibility: public
  parameters:
  - name: namespace
  - name: hints
  comment: '# * Replace the namespace hints for the given namespace.

    # *

    # * @param  string  $namespace

    # * @param  string|array  $hints

    # * @return void'
- name: addExtension
  visibility: public
  parameters:
  - name: extension
  comment: '# * Add a valid view extension to the finder.

    # *

    # * @param  string  $extension

    # * @return void'
- name: flush
  visibility: public
  parameters: []
  comment: '# * Flush the cache of located views.

    # *

    # * @return void'
traits: []
interfaces: []
