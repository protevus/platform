name: MemcachedStore
class_comment: null
dependencies:
- name: LockProvider
  type: class
  source: Illuminate\Contracts\Cache\LockProvider
- name: InteractsWithTime
  type: class
  source: Illuminate\Support\InteractsWithTime
- name: Memcached
  type: class
  source: Memcached
- name: ReflectionMethod
  type: class
  source: ReflectionMethod
- name: InteractsWithTime
  type: class
  source: InteractsWithTime
properties:
- name: memcached
  visibility: protected
  comment: '# * The Memcached instance.

    # *

    # * @var \Memcached'
- name: prefix
  visibility: protected
  comment: '# * A string that should be prepended to keys.

    # *

    # * @var string'
- name: onVersionThree
  visibility: protected
  comment: '# * Indicates whether we are using Memcached version >= 3.0.0.

    # *

    # * @var bool'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: memcached
  - name: prefix
    default: ''''''
  comment: "# * The Memcached instance.\n# *\n# * @var \\Memcached\n# */\n# protected\
    \ $memcached;\n# \n# /**\n# * A string that should be prepended to keys.\n# *\n\
    # * @var string\n# */\n# protected $prefix;\n# \n# /**\n# * Indicates whether\
    \ we are using Memcached version >= 3.0.0.\n# *\n# * @var bool\n# */\n# protected\
    \ $onVersionThree;\n# \n# /**\n# * Create a new Memcached store.\n# *\n# * @param\
    \  \\Memcached  $memcached\n# * @param  string  $prefix\n# * @return void"
- name: get
  visibility: public
  parameters:
  - name: key
  comment: '# * Retrieve an item from the cache by key.

    # *

    # * @param  string  $key

    # * @return mixed'
- name: many
  visibility: public
  parameters:
  - name: keys
  comment: '# * Retrieve multiple items from the cache by key.

    # *

    # * Items not found in the cache will have a null value.

    # *

    # * @param  array  $keys

    # * @return array'
- name: put
  visibility: public
  parameters:
  - name: key
  - name: value
  - name: seconds
  comment: '# * Store an item in the cache for a given number of seconds.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @param  int  $seconds

    # * @return bool'
- name: putMany
  visibility: public
  parameters:
  - name: values
  - name: seconds
  comment: '# * Store multiple items in the cache for a given number of seconds.

    # *

    # * @param  array  $values

    # * @param  int  $seconds

    # * @return bool'
- name: add
  visibility: public
  parameters:
  - name: key
  - name: value
  - name: seconds
  comment: '# * Store an item in the cache if the key doesn''t exist.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @param  int  $seconds

    # * @return bool'
- name: increment
  visibility: public
  parameters:
  - name: key
  - name: value
    default: '1'
  comment: '# * Increment the value of an item in the cache.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return int|false'
- name: decrement
  visibility: public
  parameters:
  - name: key
  - name: value
    default: '1'
  comment: '# * Decrement the value of an item in the cache.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return int|false'
- name: forever
  visibility: public
  parameters:
  - name: key
  - name: value
  comment: '# * Store an item in the cache indefinitely.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return bool'
- name: lock
  visibility: public
  parameters:
  - name: name
  - name: seconds
    default: '0'
  - name: owner
    default: 'null'
  comment: '# * Get a lock instance.

    # *

    # * @param  string  $name

    # * @param  int  $seconds

    # * @param  string|null  $owner

    # * @return \Illuminate\Contracts\Cache\Lock'
- name: restoreLock
  visibility: public
  parameters:
  - name: name
  - name: owner
  comment: '# * Restore a lock instance using the owner identifier.

    # *

    # * @param  string  $name

    # * @param  string  $owner

    # * @return \Illuminate\Contracts\Cache\Lock'
- name: forget
  visibility: public
  parameters:
  - name: key
  comment: '# * Remove an item from the cache.

    # *

    # * @param  string  $key

    # * @return bool'
- name: flush
  visibility: public
  parameters: []
  comment: '# * Remove all items from the cache.

    # *

    # * @return bool'
- name: calculateExpiration
  visibility: protected
  parameters:
  - name: seconds
  comment: '# * Get the expiration time of the key.

    # *

    # * @param  int  $seconds

    # * @return int'
- name: toTimestamp
  visibility: protected
  parameters:
  - name: seconds
  comment: '# * Get the UNIX timestamp for the given number of seconds.

    # *

    # * @param  int  $seconds

    # * @return int'
- name: getMemcached
  visibility: public
  parameters: []
  comment: '# * Get the underlying Memcached connection.

    # *

    # * @return \Memcached'
- name: getPrefix
  visibility: public
  parameters: []
  comment: '# * Get the cache key prefix.

    # *

    # * @return string'
- name: setPrefix
  visibility: public
  parameters:
  - name: prefix
  comment: '# * Set the cache key prefix.

    # *

    # * @param  string  $prefix

    # * @return void'
traits:
- Illuminate\Contracts\Cache\LockProvider
- Illuminate\Support\InteractsWithTime
- Memcached
- ReflectionMethod
- InteractsWithTime
interfaces:
- LockProvider
