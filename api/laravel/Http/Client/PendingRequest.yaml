name: PendingRequest
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: Exception
  type: class
  source: Exception
- name: Client
  type: class
  source: GuzzleHttp\Client
- name: CookieJar
  type: class
  source: GuzzleHttp\Cookie\CookieJar
- name: ConnectException
  type: class
  source: GuzzleHttp\Exception\ConnectException
- name: RequestException
  type: class
  source: GuzzleHttp\Exception\RequestException
- name: TransferException
  type: class
  source: GuzzleHttp\Exception\TransferException
- name: HandlerStack
  type: class
  source: GuzzleHttp\HandlerStack
- name: Middleware
  type: class
  source: GuzzleHttp\Middleware
- name: UriTemplate
  type: class
  source: GuzzleHttp\UriTemplate\UriTemplate
- name: Arrayable
  type: class
  source: Illuminate\Contracts\Support\Arrayable
- name: ConnectionFailed
  type: class
  source: Illuminate\Http\Client\Events\ConnectionFailed
- name: RequestSending
  type: class
  source: Illuminate\Http\Client\Events\RequestSending
- name: ResponseReceived
  type: class
  source: Illuminate\Http\Client\Events\ResponseReceived
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Collection
  type: class
  source: Illuminate\Support\Collection
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: Stringable
  type: class
  source: Illuminate\Support\Stringable
- name: Conditionable
  type: class
  source: Illuminate\Support\Traits\Conditionable
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: JsonSerializable
  type: class
  source: JsonSerializable
- name: OutOfBoundsException
  type: class
  source: OutOfBoundsException
- name: MessageInterface
  type: class
  source: Psr\Http\Message\MessageInterface
- name: RequestInterface
  type: class
  source: Psr\Http\Message\RequestInterface
- name: RuntimeException
  type: class
  source: RuntimeException
- name: VarDumper
  type: class
  source: Symfony\Component\VarDumper\VarDumper
properties:
- name: factory
  visibility: protected
  comment: '# * The factory instance.

    # *

    # * @var \Illuminate\Http\Client\Factory|null'
- name: client
  visibility: protected
  comment: '# * The Guzzle client instance.

    # *

    # * @var \GuzzleHttp\Client'
- name: handler
  visibility: protected
  comment: '# * The Guzzle HTTP handler.

    # *

    # * @var callable'
- name: baseUrl
  visibility: protected
  comment: '# * The base URL for the request.

    # *

    # * @var string'
- name: urlParameters
  visibility: protected
  comment: '# * The parameters that can be substituted into the URL.

    # *

    # * @var array'
- name: bodyFormat
  visibility: protected
  comment: '# * The request body format.

    # *

    # * @var string'
- name: pendingBody
  visibility: protected
  comment: '# * The raw body for the request.

    # *

    # * @var \Psr\Http\Message\StreamInterface|string'
- name: pendingFiles
  visibility: protected
  comment: '# * The pending files for the request.

    # *

    # * @var array'
- name: cookies
  visibility: protected
  comment: '# * The request cookies.

    # *

    # * @var array'
- name: transferStats
  visibility: protected
  comment: '# * The transfer stats for the request.

    # *

    # * @var \GuzzleHttp\TransferStats'
- name: options
  visibility: protected
  comment: '# * The request options.

    # *

    # * @var array'
- name: throwCallback
  visibility: protected
  comment: '# * A callback to run when throwing if a server or client error occurs.

    # *

    # * @var \Closure'
- name: throwIfCallback
  visibility: protected
  comment: '# * A callback to check if an exception should be thrown when a server
    or client error occurs.

    # *

    # * @var \Closure'
- name: tries
  visibility: protected
  comment: '# * The number of times to try the request.

    # *

    # * @var int'
- name: retryDelay
  visibility: protected
  comment: '# * The number of milliseconds to wait between retries.

    # *

    # * @var Closure|int'
- name: retryThrow
  visibility: protected
  comment: '# * Whether to throw an exception when all retries fail.

    # *

    # * @var bool'
- name: retryWhenCallback
  visibility: protected
  comment: '# * The callback that will determine if the request should be retried.

    # *

    # * @var callable|null'
- name: beforeSendingCallbacks
  visibility: protected
  comment: '# * The callbacks that should execute before the request is sent.

    # *

    # * @var \Illuminate\Support\Collection'
- name: stubCallbacks
  visibility: protected
  comment: '# * The stub callables that will handle requests.

    # *

    # * @var \Illuminate\Support\Collection|null'
- name: preventStrayRequests
  visibility: protected
  comment: '# * Indicates that an exception should be thrown if any request is not
    faked.

    # *

    # * @var bool'
- name: middleware
  visibility: protected
  comment: '# * The middleware callables added by users that will handle requests.

    # *

    # * @var \Illuminate\Support\Collection'
- name: async
  visibility: protected
  comment: '# * Whether the requests should be asynchronous.

    # *

    # * @var bool'
- name: promise
  visibility: protected
  comment: '# * The pending request promise.

    # *

    # * @var \GuzzleHttp\Promise\PromiseInterface'
- name: request
  visibility: protected
  comment: '# * The sent request object, if a request has been made.

    # *

    # * @var \Illuminate\Http\Client\Request|null'
- name: mergeableOptions
  visibility: protected
  comment: '# * The Guzzle request options that are mergeable via array_merge_recursive.

    # *

    # * @var array'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: factory
    default: 'null'
  - name: middleware
    default: '[]'
  comment: "# * The factory instance.\n# *\n# * @var \\Illuminate\\Http\\Client\\\
    Factory|null\n# */\n# protected $factory;\n# \n# /**\n# * The Guzzle client instance.\n\
    # *\n# * @var \\GuzzleHttp\\Client\n# */\n# protected $client;\n# \n# /**\n# *\
    \ The Guzzle HTTP handler.\n# *\n# * @var callable\n# */\n# protected $handler;\n\
    # \n# /**\n# * The base URL for the request.\n# *\n# * @var string\n# */\n# protected\
    \ $baseUrl = '';\n# \n# /**\n# * The parameters that can be substituted into the\
    \ URL.\n# *\n# * @var array\n# */\n# protected $urlParameters = [];\n# \n# /**\n\
    # * The request body format.\n# *\n# * @var string\n# */\n# protected $bodyFormat;\n\
    # \n# /**\n# * The raw body for the request.\n# *\n# * @var \\Psr\\Http\\Message\\\
    StreamInterface|string\n# */\n# protected $pendingBody;\n# \n# /**\n# * The pending\
    \ files for the request.\n# *\n# * @var array\n# */\n# protected $pendingFiles\
    \ = [];\n# \n# /**\n# * The request cookies.\n# *\n# * @var array\n# */\n# protected\
    \ $cookies;\n# \n# /**\n# * The transfer stats for the request.\n# *\n# * @var\
    \ \\GuzzleHttp\\TransferStats\n# */\n# protected $transferStats;\n# \n# /**\n\
    # * The request options.\n# *\n# * @var array\n# */\n# protected $options = [];\n\
    # \n# /**\n# * A callback to run when throwing if a server or client error occurs.\n\
    # *\n# * @var \\Closure\n# */\n# protected $throwCallback;\n# \n# /**\n# * A callback\
    \ to check if an exception should be thrown when a server or client error occurs.\n\
    # *\n# * @var \\Closure\n# */\n# protected $throwIfCallback;\n# \n# /**\n# * The\
    \ number of times to try the request.\n# *\n# * @var int\n# */\n# protected $tries\
    \ = 1;\n# \n# /**\n# * The number of milliseconds to wait between retries.\n#\
    \ *\n# * @var Closure|int\n# */\n# protected $retryDelay = 100;\n# \n# /**\n#\
    \ * Whether to throw an exception when all retries fail.\n# *\n# * @var bool\n\
    # */\n# protected $retryThrow = true;\n# \n# /**\n# * The callback that will determine\
    \ if the request should be retried.\n# *\n# * @var callable|null\n# */\n# protected\
    \ $retryWhenCallback = null;\n# \n# /**\n# * The callbacks that should execute\
    \ before the request is sent.\n# *\n# * @var \\Illuminate\\Support\\Collection\n\
    # */\n# protected $beforeSendingCallbacks;\n# \n# /**\n# * The stub callables\
    \ that will handle requests.\n# *\n# * @var \\Illuminate\\Support\\Collection|null\n\
    # */\n# protected $stubCallbacks;\n# \n# /**\n# * Indicates that an exception\
    \ should be thrown if any request is not faked.\n# *\n# * @var bool\n# */\n# protected\
    \ $preventStrayRequests = false;\n# \n# /**\n# * The middleware callables added\
    \ by users that will handle requests.\n# *\n# * @var \\Illuminate\\Support\\Collection\n\
    # */\n# protected $middleware;\n# \n# /**\n# * Whether the requests should be\
    \ asynchronous.\n# *\n# * @var bool\n# */\n# protected $async = false;\n# \n#\
    \ /**\n# * The pending request promise.\n# *\n# * @var \\GuzzleHttp\\Promise\\\
    PromiseInterface\n# */\n# protected $promise;\n# \n# /**\n# * The sent request\
    \ object, if a request has been made.\n# *\n# * @var \\Illuminate\\Http\\Client\\\
    Request|null\n# */\n# protected $request;\n# \n# /**\n# * The Guzzle request options\
    \ that are mergeable via array_merge_recursive.\n# *\n# * @var array\n# */\n#\
    \ protected $mergeableOptions = [\n# 'cookies',\n# 'form_params',\n# 'headers',\n\
    # 'json',\n# 'multipart',\n# 'query',\n# ];\n# \n# /**\n# * Create a new HTTP\
    \ Client instance.\n# *\n# * @param  \\Illuminate\\Http\\Client\\Factory|null\
    \  $factory\n# * @param  array  $middleware\n# * @return void"
- name: baseUrl
  visibility: public
  parameters:
  - name: url
  comment: '# * Set the base URL for the pending request.

    # *

    # * @param  string  $url

    # * @return $this'
- name: withBody
  visibility: public
  parameters:
  - name: content
  - name: contentType
    default: '''application/json'''
  comment: '# * Attach a raw body to the request.

    # *

    # * @param  \Psr\Http\Message\StreamInterface|string  $content

    # * @param  string  $contentType

    # * @return $this'
- name: asJson
  visibility: public
  parameters: []
  comment: '# * Indicate the request contains JSON.

    # *

    # * @return $this'
- name: asForm
  visibility: public
  parameters: []
  comment: '# * Indicate the request contains form parameters.

    # *

    # * @return $this'
- name: attach
  visibility: public
  parameters:
  - name: name
  - name: contents
    default: ''''''
  - name: filename
    default: 'null'
  - name: headers
    default: '[]'
  comment: '# * Attach a file to the request.

    # *

    # * @param  string|array  $name

    # * @param  string|resource  $contents

    # * @param  string|null  $filename

    # * @param  array  $headers

    # * @return $this'
- name: asMultipart
  visibility: public
  parameters: []
  comment: '# * Indicate the request is a multi-part form request.

    # *

    # * @return $this'
- name: bodyFormat
  visibility: public
  parameters:
  - name: format
  comment: '# * Specify the body format of the request.

    # *

    # * @param  string  $format

    # * @return $this'
- name: withQueryParameters
  visibility: public
  parameters:
  - name: parameters
  comment: '# * Set the given query parameters in the request URI.

    # *

    # * @param  array  $parameters

    # * @return $this'
- name: contentType
  visibility: public
  parameters:
  - name: contentType
  comment: '# * Specify the request''s content type.

    # *

    # * @param  string  $contentType

    # * @return $this'
- name: acceptJson
  visibility: public
  parameters: []
  comment: '# * Indicate that JSON should be returned by the server.

    # *

    # * @return $this'
- name: accept
  visibility: public
  parameters:
  - name: contentType
  comment: '# * Indicate the type of content that should be returned by the server.

    # *

    # * @param  string  $contentType

    # * @return $this'
- name: withHeaders
  visibility: public
  parameters:
  - name: headers
  comment: '# * Add the given headers to the request.

    # *

    # * @param  array  $headers

    # * @return $this'
- name: withHeader
  visibility: public
  parameters:
  - name: name
  - name: value
  comment: '# * Add the given header to the request.

    # *

    # * @param  string  $name

    # * @param  mixed  $value

    # * @return $this'
- name: replaceHeaders
  visibility: public
  parameters:
  - name: headers
  comment: '# * Replace the given headers on the request.

    # *

    # * @param  array  $headers

    # * @return $this'
- name: withBasicAuth
  visibility: public
  parameters:
  - name: username
  - name: password
  comment: '# * Specify the basic authentication username and password for the request.

    # *

    # * @param  string  $username

    # * @param  string  $password

    # * @return $this'
- name: withDigestAuth
  visibility: public
  parameters:
  - name: username
  - name: password
  comment: '# * Specify the digest authentication username and password for the request.

    # *

    # * @param  string  $username

    # * @param  string  $password

    # * @return $this'
- name: withToken
  visibility: public
  parameters:
  - name: token
  - name: type
    default: '''Bearer'''
  comment: '# * Specify an authorization token for the request.

    # *

    # * @param  string  $token

    # * @param  string  $type

    # * @return $this'
- name: withUserAgent
  visibility: public
  parameters:
  - name: userAgent
  comment: '# * Specify the user agent for the request.

    # *

    # * @param  string|bool  $userAgent

    # * @return $this'
- name: withUrlParameters
  visibility: public
  parameters:
  - name: parameters
    default: '[]'
  comment: '# * Specify the URL parameters that can be substituted into the request
    URL.

    # *

    # * @param  array  $parameters

    # * @return $this'
- name: withCookies
  visibility: public
  parameters:
  - name: cookies
  - name: domain
  comment: '# * Specify the cookies that should be included with the request.

    # *

    # * @param  array  $cookies

    # * @param  string  $domain

    # * @return $this'
- name: maxRedirects
  visibility: public
  parameters:
  - name: max
  comment: '# * Specify the maximum number of redirects to allow.

    # *

    # * @param  int  $max

    # * @return $this'
- name: withoutRedirecting
  visibility: public
  parameters: []
  comment: '# * Indicate that redirects should not be followed.

    # *

    # * @return $this'
- name: withoutVerifying
  visibility: public
  parameters: []
  comment: '# * Indicate that TLS certificates should not be verified.

    # *

    # * @return $this'
- name: sink
  visibility: public
  parameters:
  - name: to
  comment: '# * Specify the path where the body of the response should be stored.

    # *

    # * @param  string|resource  $to

    # * @return $this'
- name: timeout
  visibility: public
  parameters:
  - name: seconds
  comment: '# * Specify the timeout (in seconds) for the request.

    # *

    # * @param  int  $seconds

    # * @return $this'
- name: connectTimeout
  visibility: public
  parameters:
  - name: seconds
  comment: '# * Specify the connect timeout (in seconds) for the request.

    # *

    # * @param  int  $seconds

    # * @return $this'
- name: retry
  visibility: public
  parameters:
  - name: times
  - name: sleepMilliseconds
    default: '0'
  - name: when
    default: 'null'
  - name: throw
    default: 'true'
  comment: '# * Specify the number of times the request should be attempted.

    # *

    # * @param  array|int  $times

    # * @param  Closure|int  $sleepMilliseconds

    # * @param  callable|null  $when

    # * @param  bool  $throw

    # * @return $this'
- name: withOptions
  visibility: public
  parameters:
  - name: options
  comment: '# * Replace the specified options on the request.

    # *

    # * @param  array  $options

    # * @return $this'
- name: withMiddleware
  visibility: public
  parameters:
  - name: middleware
  comment: '# * Add new middleware the client handler stack.

    # *

    # * @param  callable  $middleware

    # * @return $this'
- name: withRequestMiddleware
  visibility: public
  parameters:
  - name: middleware
  comment: '# * Add new request middleware the client handler stack.

    # *

    # * @param  callable  $middleware

    # * @return $this'
- name: withResponseMiddleware
  visibility: public
  parameters:
  - name: middleware
  comment: '# * Add new response middleware the client handler stack.

    # *

    # * @param  callable  $middleware

    # * @return $this'
- name: beforeSending
  visibility: public
  parameters:
  - name: callback
  comment: '# * Add a new "before sending" callback to the request.

    # *

    # * @param  callable  $callback

    # * @return $this'
- name: throw
  visibility: public
  parameters:
  - name: callback
    default: 'null'
  comment: '# * Throw an exception if a server or client error occurs.

    # *

    # * @param  callable|null  $callback

    # * @return $this'
- name: throwIf
  visibility: public
  parameters:
  - name: condition
  comment: '# * Throw an exception if a server or client error occurred and the given
    condition evaluates to true.

    # *

    # * @param  callable|bool  $condition

    # * @return $this'
- name: throwUnless
  visibility: public
  parameters:
  - name: condition
  comment: '# * Throw an exception if a server or client error occurred and the given
    condition evaluates to false.

    # *

    # * @param  bool  $condition

    # * @return $this'
- name: dump
  visibility: public
  parameters: []
  comment: '# * Dump the request before sending.

    # *

    # * @return $this'
- name: dd
  visibility: public
  parameters: []
  comment: '# * Dump the request before sending and end the script.

    # *

    # * @return $this'
- name: get
  visibility: public
  parameters:
  - name: url
  - name: query
    default: 'null'
  comment: '# * Issue a GET request to the given URL.

    # *

    # * @param  string  $url

    # * @param  array|string|null  $query

    # * @return \Illuminate\Http\Client\Response

    # *

    # * @throws \Illuminate\Http\Client\ConnectionException'
- name: head
  visibility: public
  parameters:
  - name: url
  - name: query
    default: 'null'
  comment: '# * Issue a HEAD request to the given URL.

    # *

    # * @param  string  $url

    # * @param  array|string|null  $query

    # * @return \Illuminate\Http\Client\Response

    # *

    # * @throws \Illuminate\Http\Client\ConnectionException'
- name: post
  visibility: public
  parameters:
  - name: url
  - name: data
    default: '[]'
  comment: '# * Issue a POST request to the given URL.

    # *

    # * @param  string  $url

    # * @param  array  $data

    # * @return \Illuminate\Http\Client\Response

    # *

    # * @throws \Illuminate\Http\Client\ConnectionException'
- name: patch
  visibility: public
  parameters:
  - name: url
  - name: data
    default: '[]'
  comment: '# * Issue a PATCH request to the given URL.

    # *

    # * @param  string  $url

    # * @param  array  $data

    # * @return \Illuminate\Http\Client\Response

    # *

    # * @throws \Illuminate\Http\Client\ConnectionException'
- name: put
  visibility: public
  parameters:
  - name: url
  - name: data
    default: '[]'
  comment: '# * Issue a PUT request to the given URL.

    # *

    # * @param  string  $url

    # * @param  array  $data

    # * @return \Illuminate\Http\Client\Response

    # *

    # * @throws \Illuminate\Http\Client\ConnectionException'
- name: delete
  visibility: public
  parameters:
  - name: url
  - name: data
    default: '[]'
  comment: '# * Issue a DELETE request to the given URL.

    # *

    # * @param  string  $url

    # * @param  array  $data

    # * @return \Illuminate\Http\Client\Response

    # *

    # * @throws \Illuminate\Http\Client\ConnectionException'
- name: pool
  visibility: public
  parameters:
  - name: callback
  comment: '# * Send a pool of asynchronous requests concurrently.

    # *

    # * @param  callable  $callback

    # * @return array<array-key, \Illuminate\Http\Client\Response>'
- name: send
  visibility: public
  parameters:
  - name: method
  - name: url
  - name: options
    default: '[]'
  comment: '# * Send the request to the given URL.

    # *

    # * @param  string  $method

    # * @param  string  $url

    # * @param  array  $options

    # * @return \Illuminate\Http\Client\Response

    # *

    # * @throws \Exception

    # * @throws \Illuminate\Http\Client\ConnectionException'
- name: expandUrlParameters
  visibility: protected
  parameters:
  - name: url
  comment: '# * Substitute the URL parameters in the given URL.

    # *

    # * @param  string  $url

    # * @return string'
- name: parseHttpOptions
  visibility: protected
  parameters:
  - name: options
  comment: '# * Parse the given HTTP options and set the appropriate additional options.

    # *

    # * @param  array  $options

    # * @return array'
- name: parseMultipartBodyFormat
  visibility: protected
  parameters:
  - name: data
  comment: '# * Parse multi-part form data.

    # *

    # * @param  array  $data

    # * @return array|array[]'
- name: makePromise
  visibility: protected
  parameters:
  - name: method
  - name: url
  - name: options
    default: '[]'
  - name: attempt
    default: '1'
  comment: '# * Send an asynchronous request to the given URL.

    # *

    # * @param  string  $method

    # * @param  string  $url

    # * @param  array  $options

    # * @param  int  $attempt

    # * @return \GuzzleHttp\Promise\PromiseInterface'
- name: handlePromiseResponse
  visibility: protected
  parameters:
  - name: response
  - name: method
  - name: url
  - name: options
  - name: attempt
  comment: '# * Handle the response of an asynchronous request.

    # *

    # * @param  \Illuminate\Http\Client\Response  $response

    # * @param  string  $method

    # * @param  string  $url

    # * @param  array  $options

    # * @param  int  $attempt

    # * @return mixed'
- name: sendRequest
  visibility: protected
  parameters:
  - name: method
  - name: url
  - name: options
    default: '[]'
  comment: '# * Send a request either synchronously or asynchronously.

    # *

    # * @param  string  $method

    # * @param  string  $url

    # * @param  array  $options

    # * @return \Psr\Http\Message\MessageInterface|\GuzzleHttp\Promise\PromiseInterface

    # *

    # * @throws \Exception'
- name: parseRequestData
  visibility: protected
  parameters:
  - name: method
  - name: url
  - name: options
  comment: '# * Get the request data as an array so that we can attach it to the request
    for convenient assertions.

    # *

    # * @param  string  $method

    # * @param  string  $url

    # * @param  array  $options

    # * @return array'
- name: normalizeRequestOptions
  visibility: protected
  parameters:
  - name: options
  comment: '# * Normalize the given request options.

    # *

    # * @param  array  $options

    # * @return array'
- name: populateResponse
  visibility: protected
  parameters:
  - name: response
  comment: '# * Populate the given response with additional data.

    # *

    # * @param  \Illuminate\Http\Client\Response  $response

    # * @return \Illuminate\Http\Client\Response'
- name: buildClient
  visibility: public
  parameters: []
  comment: '# * Build the Guzzle client.

    # *

    # * @return \GuzzleHttp\Client'
- name: requestsReusableClient
  visibility: protected
  parameters: []
  comment: '# * Determine if a reusable client is required.

    # *

    # * @return bool'
- name: getReusableClient
  visibility: protected
  parameters: []
  comment: '# * Retrieve a reusable Guzzle client.

    # *

    # * @return \GuzzleHttp\Client'
- name: createClient
  visibility: public
  parameters:
  - name: handlerStack
  comment: '# * Create new Guzzle client.

    # *

    # * @param  \GuzzleHttp\HandlerStack  $handlerStack

    # * @return \GuzzleHttp\Client'
- name: buildHandlerStack
  visibility: public
  parameters: []
  comment: '# * Build the Guzzle client handler stack.

    # *

    # * @return \GuzzleHttp\HandlerStack'
- name: pushHandlers
  visibility: public
  parameters:
  - name: handlerStack
  comment: '# * Add the necessary handlers to the given handler stack.

    # *

    # * @param  \GuzzleHttp\HandlerStack  $handlerStack

    # * @return \GuzzleHttp\HandlerStack'
- name: buildBeforeSendingHandler
  visibility: public
  parameters: []
  comment: '# * Build the before sending handler.

    # *

    # * @return \Closure'
- name: buildRecorderHandler
  visibility: public
  parameters: []
  comment: '# * Build the recorder handler.

    # *

    # * @return \Closure'
- name: buildStubHandler
  visibility: public
  parameters: []
  comment: '# * Build the stub handler.

    # *

    # * @return \Closure'
- name: sinkStubHandler
  visibility: protected
  parameters:
  - name: sink
  comment: '# * Get the sink stub handler callback.

    # *

    # * @param  string  $sink

    # * @return \Closure'
- name: runBeforeSendingCallbacks
  visibility: public
  parameters:
  - name: request
  - name: options
  comment: '# * Execute the "before sending" callbacks.

    # *

    # * @param  \GuzzleHttp\Psr7\RequestInterface  $request

    # * @param  array  $options

    # * @return \GuzzleHttp\Psr7\RequestInterface'
- name: mergeOptions
  visibility: public
  parameters:
  - name: '...$options'
  comment: '# * Replace the given options with the current request options.

    # *

    # * @param  array  ...$options

    # * @return array'
- name: newResponse
  visibility: protected
  parameters:
  - name: response
  comment: '# * Create a new response instance using the given PSR response.

    # *

    # * @param  \Psr\Http\Message\MessageInterface  $response

    # * @return Response'
- name: stub
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a stub callable that will intercept requests and be able
    to return stub responses.

    # *

    # * @param  callable  $callback

    # * @return $this'
- name: preventStrayRequests
  visibility: public
  parameters:
  - name: prevent
    default: 'true'
  comment: '# * Indicate that an exception should be thrown if any request is not
    faked.

    # *

    # * @param  bool  $prevent

    # * @return $this'
- name: async
  visibility: public
  parameters:
  - name: async
    default: 'true'
  comment: '# * Toggle asynchronicity in requests.

    # *

    # * @param  bool  $async

    # * @return $this'
- name: getPromise
  visibility: public
  parameters: []
  comment: '# * Retrieve the pending request promise.

    # *

    # * @return \GuzzleHttp\Promise\PromiseInterface|null'
- name: dispatchRequestSendingEvent
  visibility: protected
  parameters: []
  comment: '# * Dispatch the RequestSending event if a dispatcher is available.

    # *

    # * @return void'
- name: dispatchResponseReceivedEvent
  visibility: protected
  parameters:
  - name: response
  comment: '# * Dispatch the ResponseReceived event if a dispatcher is available.

    # *

    # * @param  \Illuminate\Http\Client\Response  $response

    # * @return void'
- name: dispatchConnectionFailedEvent
  visibility: protected
  parameters:
  - name: request
  - name: exception
  comment: '# * Dispatch the ConnectionFailed event if a dispatcher is available.

    # *

    # * @param  \Illuminate\Http\Client\Request  $request

    # * @param  \Illuminate\Http\Client\ConnectionException  $exception

    # * @return void'
- name: setClient
  visibility: public
  parameters:
  - name: client
  comment: '# * Set the client instance.

    # *

    # * @param  \GuzzleHttp\Client  $client

    # * @return $this'
- name: setHandler
  visibility: public
  parameters:
  - name: handler
  comment: '# * Create a new client instance using the given handler.

    # *

    # * @param  callable  $handler

    # * @return $this'
- name: getOptions
  visibility: public
  parameters: []
  comment: '# * Get the pending request options.

    # *

    # * @return array'
traits:
- Closure
- Exception
- GuzzleHttp\Client
- GuzzleHttp\Cookie\CookieJar
- GuzzleHttp\Exception\ConnectException
- GuzzleHttp\Exception\RequestException
- GuzzleHttp\Exception\TransferException
- GuzzleHttp\HandlerStack
- GuzzleHttp\Middleware
- GuzzleHttp\UriTemplate\UriTemplate
- Illuminate\Contracts\Support\Arrayable
- Illuminate\Http\Client\Events\ConnectionFailed
- Illuminate\Http\Client\Events\RequestSending
- Illuminate\Http\Client\Events\ResponseReceived
- Illuminate\Support\Arr
- Illuminate\Support\Collection
- Illuminate\Support\Str
- Illuminate\Support\Stringable
- Illuminate\Support\Traits\Conditionable
- Illuminate\Support\Traits\Macroable
- JsonSerializable
- OutOfBoundsException
- Psr\Http\Message\MessageInterface
- Psr\Http\Message\RequestInterface
- RuntimeException
- Symfony\Component\VarDumper\VarDumper
- Conditionable
interfaces: []
