name: Factory
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: ProcessResultContract
  type: class
  source: Illuminate\Contracts\Process\ProcessResult
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: PHPUnit
  type: class
  source: PHPUnit\Framework\Assert
properties:
- name: recording
  visibility: protected
  comment: '# * Indicates if the process factory has faked process handlers.

    # *

    # * @var bool'
- name: recorded
  visibility: protected
  comment: '# * All of the recorded processes.

    # *

    # * @var array'
- name: fakeHandlers
  visibility: protected
  comment: '# * The registered fake handler callbacks.

    # *

    # * @var array'
- name: preventStrayProcesses
  visibility: protected
  comment: '# * Indicates that an exception should be thrown if any process is not
    faked.

    # *

    # * @var bool'
methods:
- name: result
  visibility: public
  parameters:
  - name: output
    default: ''''''
  - name: errorOutput
    default: ''''''
  - name: exitCode
    default: '0'
  comment: "# * Indicates if the process factory has faked process handlers.\n# *\n\
    # * @var bool\n# */\n# protected $recording = false;\n# \n# /**\n# * All of the\
    \ recorded processes.\n# *\n# * @var array\n# */\n# protected $recorded = [];\n\
    # \n# /**\n# * The registered fake handler callbacks.\n# *\n# * @var array\n#\
    \ */\n# protected $fakeHandlers = [];\n# \n# /**\n# * Indicates that an exception\
    \ should be thrown if any process is not faked.\n# *\n# * @var bool\n# */\n# protected\
    \ $preventStrayProcesses = false;\n# \n# /**\n# * Create a new fake process response\
    \ for testing purposes.\n# *\n# * @param  array|string  $output\n# * @param  array|string\
    \  $errorOutput\n# * @param  int  $exitCode\n# * @return \\Illuminate\\Process\\\
    FakeProcessResult"
- name: describe
  visibility: public
  parameters: []
  comment: '# * Begin describing a fake process lifecycle.

    # *

    # * @return \Illuminate\Process\FakeProcessDescription'
- name: sequence
  visibility: public
  parameters:
  - name: processes
    default: '[]'
  comment: '# * Begin describing a fake process sequence.

    # *

    # * @param  array  $processes

    # * @return \Illuminate\Process\FakeProcessSequence'
- name: fake
  visibility: public
  parameters:
  - name: callback
    default: 'null'
  comment: '# * Indicate that the process factory should fake processes.

    # *

    # * @param  \Closure|array|null  $callback

    # * @return $this'
- name: isRecording
  visibility: public
  parameters: []
  comment: '# * Determine if the process factory has fake process handlers and is
    recording processes.

    # *

    # * @return bool'
- name: recordIfRecording
  visibility: public
  parameters:
  - name: process
  - name: result
  comment: '# * Record the given process if processes should be recorded.

    # *

    # * @param  \Illuminate\Process\PendingProcess  $process

    # * @param  \Illuminate\Contracts\Process\ProcessResult  $result

    # * @return $this'
- name: record
  visibility: public
  parameters:
  - name: process
  - name: result
  comment: '# * Record the given process.

    # *

    # * @param  \Illuminate\Process\PendingProcess  $process

    # * @param  \Illuminate\Contracts\Process\ProcessResult  $result

    # * @return $this'
- name: preventStrayProcesses
  visibility: public
  parameters:
  - name: prevent
    default: 'true'
  comment: '# * Indicate that an exception should be thrown if any process is not
    faked.

    # *

    # * @param  bool  $prevent

    # * @return $this'
- name: preventingStrayProcesses
  visibility: public
  parameters: []
  comment: '# * Determine if stray processes are being prevented.

    # *

    # * @return bool'
- name: assertRan
  visibility: public
  parameters:
  - name: callback
  comment: '# * Assert that a process was recorded matching a given truth test.

    # *

    # * @param  \Closure|string  $callback

    # * @return $this'
- name: assertRanTimes
  visibility: public
  parameters:
  - name: callback
  - name: times
    default: '1'
  comment: '# * Assert that a process was recorded a given number of times matching
    a given truth test.

    # *

    # * @param  \Closure|string  $callback

    # * @param  int  $times

    # * @return $this'
- name: assertNotRan
  visibility: public
  parameters:
  - name: callback
  comment: '# * Assert that a process was not recorded matching a given truth test.

    # *

    # * @param  \Closure|string  $callback

    # * @return $this'
- name: assertDidntRun
  visibility: public
  parameters:
  - name: callback
  comment: '# * Assert that a process was not recorded matching a given truth test.

    # *

    # * @param  \Closure|string  $callback

    # * @return $this'
- name: assertNothingRan
  visibility: public
  parameters: []
  comment: '# * Assert that no processes were recorded.

    # *

    # * @return $this'
- name: pool
  visibility: public
  parameters:
  - name: callback
  comment: '# * Start defining a pool of processes.

    # *

    # * @param  callable  $callback

    # * @return \Illuminate\Process\Pool'
- name: pipe
  visibility: public
  parameters:
  - name: callback
  - name: output
    default: 'null'
  comment: '# * Start defining a series of piped processes.

    # *

    # * @param  callable|array  $callback

    # * @return \Illuminate\Contracts\Process\ProcessResult'
- name: concurrently
  visibility: public
  parameters:
  - name: callback
  - name: output
    default: 'null'
  comment: '# * Run a pool of processes and wait for them to finish executing.

    # *

    # * @param  callable  $callback

    # * @param  callable|null  $output

    # * @return \Illuminate\Process\ProcessPoolResults'
- name: newPendingProcess
  visibility: public
  parameters: []
  comment: '# * Create a new pending process associated with this factory.

    # *

    # * @return \Illuminate\Process\PendingProcess'
- name: __call
  visibility: public
  parameters:
  - name: method
  - name: parameters
  comment: '# * Dynamically proxy methods to a new pending process instance.

    # *

    # * @param  string  $method

    # * @param  array  $parameters

    # * @return mixed'
traits:
- Closure
- Illuminate\Support\Traits\Macroable
interfaces: []
