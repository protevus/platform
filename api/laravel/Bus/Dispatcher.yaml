name: Dispatcher
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: QueueingDispatcher
  type: class
  source: Illuminate\Contracts\Bus\QueueingDispatcher
- name: Container
  type: class
  source: Illuminate\Contracts\Container\Container
- name: Queue
  type: class
  source: Illuminate\Contracts\Queue\Queue
- name: ShouldQueue
  type: class
  source: Illuminate\Contracts\Queue\ShouldQueue
- name: PendingChain
  type: class
  source: Illuminate\Foundation\Bus\PendingChain
- name: Pipeline
  type: class
  source: Illuminate\Pipeline\Pipeline
- name: InteractsWithQueue
  type: class
  source: Illuminate\Queue\InteractsWithQueue
- name: SyncJob
  type: class
  source: Illuminate\Queue\Jobs\SyncJob
- name: Collection
  type: class
  source: Illuminate\Support\Collection
- name: RuntimeException
  type: class
  source: RuntimeException
properties:
- name: container
  visibility: protected
  comment: '# * The container implementation.

    # *

    # * @var \Illuminate\Contracts\Container\Container'
- name: pipeline
  visibility: protected
  comment: '# * The pipeline instance for the bus.

    # *

    # * @var \Illuminate\Pipeline\Pipeline'
- name: pipes
  visibility: protected
  comment: '# * The pipes to send commands through before dispatching.

    # *

    # * @var array'
- name: handlers
  visibility: protected
  comment: '# * The command to handler mapping for non-self-handling events.

    # *

    # * @var array'
- name: queueResolver
  visibility: protected
  comment: '# * The queue resolver callback.

    # *

    # * @var \Closure|null'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: container
  - name: queueResolver
    default: 'null'
  comment: "# * The container implementation.\n# *\n# * @var \\Illuminate\\Contracts\\\
    Container\\Container\n# */\n# protected $container;\n# \n# /**\n# * The pipeline\
    \ instance for the bus.\n# *\n# * @var \\Illuminate\\Pipeline\\Pipeline\n# */\n\
    # protected $pipeline;\n# \n# /**\n# * The pipes to send commands through before\
    \ dispatching.\n# *\n# * @var array\n# */\n# protected $pipes = [];\n# \n# /**\n\
    # * The command to handler mapping for non-self-handling events.\n# *\n# * @var\
    \ array\n# */\n# protected $handlers = [];\n# \n# /**\n# * The queue resolver\
    \ callback.\n# *\n# * @var \\Closure|null\n# */\n# protected $queueResolver;\n\
    # \n# /**\n# * Create a new command dispatcher instance.\n# *\n# * @param  \\\
    Illuminate\\Contracts\\Container\\Container  $container\n# * @param  \\Closure|null\
    \  $queueResolver\n# * @return void"
- name: dispatch
  visibility: public
  parameters:
  - name: command
  comment: '# * Dispatch a command to its appropriate handler.

    # *

    # * @param  mixed  $command

    # * @return mixed'
- name: dispatchSync
  visibility: public
  parameters:
  - name: command
  - name: handler
    default: 'null'
  comment: '# * Dispatch a command to its appropriate handler in the current process.

    # *

    # * Queueable jobs will be dispatched to the "sync" queue.

    # *

    # * @param  mixed  $command

    # * @param  mixed  $handler

    # * @return mixed'
- name: dispatchNow
  visibility: public
  parameters:
  - name: command
  - name: handler
    default: 'null'
  comment: '# * Dispatch a command to its appropriate handler in the current process
    without using the synchronous queue.

    # *

    # * @param  mixed  $command

    # * @param  mixed  $handler

    # * @return mixed'
- name: findBatch
  visibility: public
  parameters:
  - name: batchId
  comment: '# * Attempt to find the batch with the given ID.

    # *

    # * @param  string  $batchId

    # * @return \Illuminate\Bus\Batch|null'
- name: batch
  visibility: public
  parameters:
  - name: jobs
  comment: '# * Create a new batch of queueable jobs.

    # *

    # * @param  \Illuminate\Support\Collection|array|mixed  $jobs

    # * @return \Illuminate\Bus\PendingBatch'
- name: chain
  visibility: public
  parameters:
  - name: jobs
  comment: '# * Create a new chain of queueable jobs.

    # *

    # * @param  \Illuminate\Support\Collection|array  $jobs

    # * @return \Illuminate\Foundation\Bus\PendingChain'
- name: hasCommandHandler
  visibility: public
  parameters:
  - name: command
  comment: '# * Determine if the given command has a handler.

    # *

    # * @param  mixed  $command

    # * @return bool'
- name: getCommandHandler
  visibility: public
  parameters:
  - name: command
  comment: '# * Retrieve the handler for a command.

    # *

    # * @param  mixed  $command

    # * @return bool|mixed'
- name: commandShouldBeQueued
  visibility: protected
  parameters:
  - name: command
  comment: '# * Determine if the given command should be queued.

    # *

    # * @param  mixed  $command

    # * @return bool'
- name: dispatchToQueue
  visibility: public
  parameters:
  - name: command
  comment: '# * Dispatch a command to its appropriate handler behind a queue.

    # *

    # * @param  mixed  $command

    # * @return mixed

    # *

    # * @throws \RuntimeException'
- name: pushCommandToQueue
  visibility: protected
  parameters:
  - name: queue
  - name: command
  comment: '# * Push the command onto the given queue instance.

    # *

    # * @param  \Illuminate\Contracts\Queue\Queue  $queue

    # * @param  mixed  $command

    # * @return mixed'
- name: dispatchAfterResponse
  visibility: public
  parameters:
  - name: command
  - name: handler
    default: 'null'
  comment: '# * Dispatch a command to its appropriate handler after the current process.

    # *

    # * @param  mixed  $command

    # * @param  mixed  $handler

    # * @return void'
- name: pipeThrough
  visibility: public
  parameters:
  - name: pipes
  comment: '# * Set the pipes through which commands should be piped before dispatching.

    # *

    # * @param  array  $pipes

    # * @return $this'
- name: map
  visibility: public
  parameters:
  - name: map
  comment: '# * Map a command to a handler.

    # *

    # * @param  array  $map

    # * @return $this'
traits:
- Closure
- Illuminate\Contracts\Bus\QueueingDispatcher
- Illuminate\Contracts\Container\Container
- Illuminate\Contracts\Queue\Queue
- Illuminate\Contracts\Queue\ShouldQueue
- Illuminate\Foundation\Bus\PendingChain
- Illuminate\Pipeline\Pipeline
- Illuminate\Queue\InteractsWithQueue
- Illuminate\Queue\Jobs\SyncJob
- Illuminate\Support\Collection
- RuntimeException
interfaces:
- QueueingDispatcher
