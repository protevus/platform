name: PendingBatch
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: BatchDispatched
  type: class
  source: Illuminate\Bus\Events\BatchDispatched
- name: Container
  type: class
  source: Illuminate\Contracts\Container\Container
- name: EventDispatcher
  type: class
  source: Illuminate\Contracts\Events\Dispatcher
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Collection
  type: class
  source: Illuminate\Support\Collection
- name: Conditionable
  type: class
  source: Illuminate\Support\Traits\Conditionable
- name: SerializableClosure
  type: class
  source: Laravel\SerializableClosure\SerializableClosure
- name: Throwable
  type: class
  source: Throwable
- name: Conditionable
  type: class
  source: Conditionable
properties:
- name: container
  visibility: protected
  comment: '# * The IoC container instance.

    # *

    # * @var \Illuminate\Contracts\Container\Container'
- name: name
  visibility: public
  comment: '# * The batch name.

    # *

    # * @var string'
- name: jobs
  visibility: public
  comment: '# * The jobs that belong to the batch.

    # *

    # * @var \Illuminate\Support\Collection'
- name: options
  visibility: public
  comment: '# * The batch options.

    # *

    # * @var array'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: container
  - name: jobs
  comment: "# * The IoC container instance.\n# *\n# * @var \\Illuminate\\Contracts\\\
    Container\\Container\n# */\n# protected $container;\n# \n# /**\n# * The batch\
    \ name.\n# *\n# * @var string\n# */\n# public $name = '';\n# \n# /**\n# * The\
    \ jobs that belong to the batch.\n# *\n# * @var \\Illuminate\\Support\\Collection\n\
    # */\n# public $jobs;\n# \n# /**\n# * The batch options.\n# *\n# * @var array\n\
    # */\n# public $options = [];\n# \n# /**\n# * Create a new pending batch instance.\n\
    # *\n# * @param  \\Illuminate\\Contracts\\Container\\Container  $container\n#\
    \ * @param  \\Illuminate\\Support\\Collection  $jobs\n# * @return void"
- name: add
  visibility: public
  parameters:
  - name: jobs
  comment: '# * Add jobs to the batch.

    # *

    # * @param  iterable|object|array  $jobs

    # * @return $this'
- name: before
  visibility: public
  parameters:
  - name: callback
  comment: '# * Add a callback to be executed when the batch is stored.

    # *

    # * @param  callable  $callback

    # * @return $this'
- name: beforeCallbacks
  visibility: public
  parameters: []
  comment: '# * Get the "before" callbacks that have been registered with the pending
    batch.

    # *

    # * @return array'
- name: progress
  visibility: public
  parameters:
  - name: callback
  comment: '# * Add a callback to be executed after a job in the batch have executed
    successfully.

    # *

    # * @param  callable  $callback

    # * @return $this'
- name: progressCallbacks
  visibility: public
  parameters: []
  comment: '# * Get the "progress" callbacks that have been registered with the pending
    batch.

    # *

    # * @return array'
- name: then
  visibility: public
  parameters:
  - name: callback
  comment: '# * Add a callback to be executed after all jobs in the batch have executed
    successfully.

    # *

    # * @param  callable  $callback

    # * @return $this'
- name: thenCallbacks
  visibility: public
  parameters: []
  comment: '# * Get the "then" callbacks that have been registered with the pending
    batch.

    # *

    # * @return array'
- name: catch
  visibility: public
  parameters:
  - name: callback
  comment: '# * Add a callback to be executed after the first failing job in the batch.

    # *

    # * @param  callable  $callback

    # * @return $this'
- name: catchCallbacks
  visibility: public
  parameters: []
  comment: '# * Get the "catch" callbacks that have been registered with the pending
    batch.

    # *

    # * @return array'
- name: finally
  visibility: public
  parameters:
  - name: callback
  comment: '# * Add a callback to be executed after the batch has finished executing.

    # *

    # * @param  callable  $callback

    # * @return $this'
- name: finallyCallbacks
  visibility: public
  parameters: []
  comment: '# * Get the "finally" callbacks that have been registered with the pending
    batch.

    # *

    # * @return array'
- name: allowFailures
  visibility: public
  parameters:
  - name: allowFailures
    default: 'true'
  comment: '# * Indicate that the batch should not be cancelled when a job within
    the batch fails.

    # *

    # * @param  bool  $allowFailures

    # * @return $this'
- name: allowsFailures
  visibility: public
  parameters: []
  comment: '# * Determine if the pending batch allows jobs to fail without cancelling
    the batch.

    # *

    # * @return bool'
- name: name
  visibility: public
  parameters:
  - name: name
  comment: '# * Set the name for the batch.

    # *

    # * @param  string  $name

    # * @return $this'
- name: onConnection
  visibility: public
  parameters:
  - name: connection
  comment: '# * Specify the queue connection that the batched jobs should run on.

    # *

    # * @param  string  $connection

    # * @return $this'
- name: connection
  visibility: public
  parameters: []
  comment: '# * Get the connection used by the pending batch.

    # *

    # * @return string|null'
- name: onQueue
  visibility: public
  parameters:
  - name: queue
  comment: '# * Specify the queue that the batched jobs should run on.

    # *

    # * @param  string  $queue

    # * @return $this'
- name: queue
  visibility: public
  parameters: []
  comment: '# * Get the queue used by the pending batch.

    # *

    # * @return string|null'
- name: withOption
  visibility: public
  parameters:
  - name: key
  - name: value
  comment: '# * Add additional data into the batch''s options array.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return $this'
- name: dispatch
  visibility: public
  parameters: []
  comment: '# * Dispatch the batch.

    # *

    # * @return \Illuminate\Bus\Batch

    # *

    # * @throws \Throwable'
- name: dispatchAfterResponse
  visibility: public
  parameters: []
  comment: '# * Dispatch the batch after the response is sent to the browser.

    # *

    # * @return \Illuminate\Bus\Batch'
- name: dispatchExistingBatch
  visibility: protected
  parameters:
  - name: batch
  comment: '# * Dispatch an existing batch.

    # *

    # * @param  \Illuminate\Bus\Batch  $batch

    # * @return void

    # *

    # * @throws \Throwable'
- name: dispatchIf
  visibility: public
  parameters:
  - name: boolean
  comment: '# * Dispatch the batch if the given truth test passes.

    # *

    # * @param  bool|\Closure  $boolean

    # * @return \Illuminate\Bus\Batch|null'
- name: dispatchUnless
  visibility: public
  parameters:
  - name: boolean
  comment: '# * Dispatch the batch unless the given truth test passes.

    # *

    # * @param  bool|\Closure  $boolean

    # * @return \Illuminate\Bus\Batch|null'
- name: store
  visibility: protected
  parameters:
  - name: repository
  comment: '# * Store the batch using the given repository.

    # *

    # * @param  \Illuminate\Bus\BatchRepository  $repository

    # * @return \Illuminate\Bus\Batch'
traits:
- Closure
- Illuminate\Bus\Events\BatchDispatched
- Illuminate\Contracts\Container\Container
- Illuminate\Support\Arr
- Illuminate\Support\Collection
- Illuminate\Support\Traits\Conditionable
- Laravel\SerializableClosure\SerializableClosure
- Throwable
- Conditionable
interfaces: []
