name: Queueable
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: CallQueuedClosure
  type: class
  source: Illuminate\Queue\CallQueuedClosure
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: PHPUnit
  type: class
  source: PHPUnit\Framework\Assert
- name: RuntimeException
  type: class
  source: RuntimeException
properties:
- name: connection
  visibility: public
  comment: '# * The name of the connection the job should be sent to.

    # *

    # * @var string|null'
- name: queue
  visibility: public
  comment: '# * The name of the queue the job should be sent to.

    # *

    # * @var string|null'
- name: delay
  visibility: public
  comment: '# * The number of seconds before the job should be made available.

    # *

    # * @var \DateTimeInterface|\DateInterval|array|int|null'
- name: afterCommit
  visibility: public
  comment: '# * Indicates whether the job should be dispatched after all database
    transactions have committed.

    # *

    # * @var bool|null'
- name: middleware
  visibility: public
  comment: '# * The middleware the job should be dispatched through.

    # *

    # * @var array'
- name: chained
  visibility: public
  comment: '# * The jobs that should run if this job is successful.

    # *

    # * @var array'
- name: chainConnection
  visibility: public
  comment: '# * The name of the connection the chain should be sent to.

    # *

    # * @var string|null'
- name: chainQueue
  visibility: public
  comment: '# * The name of the queue the chain should be sent to.

    # *

    # * @var string|null'
- name: chainCatchCallbacks
  visibility: public
  comment: '# * The callbacks to be executed on chain failure.

    # *

    # * @var array|null'
methods:
- name: onConnection
  visibility: public
  parameters:
  - name: connection
  comment: "# * The name of the connection the job should be sent to.\n# *\n# * @var\
    \ string|null\n# */\n# public $connection;\n# \n# /**\n# * The name of the queue\
    \ the job should be sent to.\n# *\n# * @var string|null\n# */\n# public $queue;\n\
    # \n# /**\n# * The number of seconds before the job should be made available.\n\
    # *\n# * @var \\DateTimeInterface|\\DateInterval|array|int|null\n# */\n# public\
    \ $delay;\n# \n# /**\n# * Indicates whether the job should be dispatched after\
    \ all database transactions have committed.\n# *\n# * @var bool|null\n# */\n#\
    \ public $afterCommit;\n# \n# /**\n# * The middleware the job should be dispatched\
    \ through.\n# *\n# * @var array\n# */\n# public $middleware = [];\n# \n# /**\n\
    # * The jobs that should run if this job is successful.\n# *\n# * @var array\n\
    # */\n# public $chained = [];\n# \n# /**\n# * The name of the connection the chain\
    \ should be sent to.\n# *\n# * @var string|null\n# */\n# public $chainConnection;\n\
    # \n# /**\n# * The name of the queue the chain should be sent to.\n# *\n# * @var\
    \ string|null\n# */\n# public $chainQueue;\n# \n# /**\n# * The callbacks to be\
    \ executed on chain failure.\n# *\n# * @var array|null\n# */\n# public $chainCatchCallbacks;\n\
    # \n# /**\n# * Set the desired connection for the job.\n# *\n# * @param  string|null\
    \  $connection\n# * @return $this"
- name: onQueue
  visibility: public
  parameters:
  - name: queue
  comment: '# * Set the desired queue for the job.

    # *

    # * @param  string|null  $queue

    # * @return $this'
- name: allOnConnection
  visibility: public
  parameters:
  - name: connection
  comment: '# * Set the desired connection for the chain.

    # *

    # * @param  string|null  $connection

    # * @return $this'
- name: allOnQueue
  visibility: public
  parameters:
  - name: queue
  comment: '# * Set the desired queue for the chain.

    # *

    # * @param  string|null  $queue

    # * @return $this'
- name: delay
  visibility: public
  parameters:
  - name: delay
  comment: '# * Set the desired delay in seconds for the job.

    # *

    # * @param  \DateTimeInterface|\DateInterval|array|int|null  $delay

    # * @return $this'
- name: withoutDelay
  visibility: public
  parameters: []
  comment: '# * Set the delay for the job to zero seconds.

    # *

    # * @return $this'
- name: afterCommit
  visibility: public
  parameters: []
  comment: '# * Indicate that the job should be dispatched after all database transactions
    have committed.

    # *

    # * @return $this'
- name: beforeCommit
  visibility: public
  parameters: []
  comment: '# * Indicate that the job should not wait until database transactions
    have been committed before dispatching.

    # *

    # * @return $this'
- name: through
  visibility: public
  parameters:
  - name: middleware
  comment: '# * Specify the middleware the job should be dispatched through.

    # *

    # * @param  array|object  $middleware

    # * @return $this'
- name: chain
  visibility: public
  parameters:
  - name: chain
  comment: '# * Set the jobs that should run if this job is successful.

    # *

    # * @param  array  $chain

    # * @return $this'
- name: prependToChain
  visibility: public
  parameters:
  - name: job
  comment: '# * Prepend a job to the current chain so that it is run after the currently
    running job.

    # *

    # * @param  mixed  $job

    # * @return $this'
- name: appendToChain
  visibility: public
  parameters:
  - name: job
  comment: '# * Append a job to the end of the current chain.

    # *

    # * @param  mixed  $job

    # * @return $this'
- name: serializeJob
  visibility: protected
  parameters:
  - name: job
  comment: '# * Serialize a job for queuing.

    # *

    # * @param  mixed  $job

    # * @return string

    # *

    # * @throws \RuntimeException'
- name: dispatchNextJobInChain
  visibility: public
  parameters: []
  comment: '# * Dispatch the next job on the chain.

    # *

    # * @return void'
- name: invokeChainCatchCallbacks
  visibility: public
  parameters:
  - name: e
  comment: '# * Invoke all of the chain''s failed job callbacks.

    # *

    # * @param  \Throwable  $e

    # * @return void'
- name: assertHasChain
  visibility: public
  parameters:
  - name: expectedChain
  comment: '# * Assert that the job has the given chain of jobs attached to it.

    # *

    # * @param  array  $expectedChain

    # * @return void'
- name: assertDoesntHaveChain
  visibility: public
  parameters: []
  comment: '# * Assert that the job has no remaining chained jobs.

    # *

    # * @return void'
traits:
- Closure
- Illuminate\Queue\CallQueuedClosure
- Illuminate\Support\Arr
- RuntimeException
interfaces: []
