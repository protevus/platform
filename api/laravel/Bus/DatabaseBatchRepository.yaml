name: DatabaseBatchRepository
class_comment: null
dependencies:
- name: CarbonImmutable
  type: class
  source: Carbon\CarbonImmutable
- name: Closure
  type: class
  source: Closure
- name: DateTimeInterface
  type: class
  source: DateTimeInterface
- name: Connection
  type: class
  source: Illuminate\Database\Connection
- name: PostgresConnection
  type: class
  source: Illuminate\Database\PostgresConnection
- name: Expression
  type: class
  source: Illuminate\Database\Query\Expression
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: Throwable
  type: class
  source: Throwable
properties:
- name: factory
  visibility: protected
  comment: '# * The batch factory instance.

    # *

    # * @var \Illuminate\Bus\BatchFactory'
- name: connection
  visibility: protected
  comment: '# * The database connection instance.

    # *

    # * @var \Illuminate\Database\Connection'
- name: table
  visibility: protected
  comment: '# * The database table to use to store batch information.

    # *

    # * @var string'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: factory
  - name: connection
  - name: table
  comment: "# * The batch factory instance.\n# *\n# * @var \\Illuminate\\Bus\\BatchFactory\n\
    # */\n# protected $factory;\n# \n# /**\n# * The database connection instance.\n\
    # *\n# * @var \\Illuminate\\Database\\Connection\n# */\n# protected $connection;\n\
    # \n# /**\n# * The database table to use to store batch information.\n# *\n# *\
    \ @var string\n# */\n# protected $table;\n# \n# /**\n# * Create a new batch repository\
    \ instance.\n# *\n# * @param  \\Illuminate\\Bus\\BatchFactory  $factory\n# * @param\
    \  \\Illuminate\\Database\\Connection  $connection\n# * @param  string  $table"
- name: get
  visibility: public
  parameters:
  - name: limit
    default: '50'
  - name: before
    default: 'null'
  comment: '# * Retrieve a list of batches.

    # *

    # * @param  int  $limit

    # * @param  mixed  $before

    # * @return \Illuminate\Bus\Batch[]'
- name: find
  visibility: public
  parameters:
  - name: batchId
  comment: '# * Retrieve information about an existing batch.

    # *

    # * @param  string  $batchId

    # * @return \Illuminate\Bus\Batch|null'
- name: store
  visibility: public
  parameters:
  - name: batch
  comment: '# * Store a new pending batch.

    # *

    # * @param  \Illuminate\Bus\PendingBatch  $batch

    # * @return \Illuminate\Bus\Batch'
- name: incrementTotalJobs
  visibility: public
  parameters:
  - name: batchId
  - name: amount
  comment: '# * Increment the total number of jobs within the batch.

    # *

    # * @param  string  $batchId

    # * @param  int  $amount

    # * @return void'
- name: decrementPendingJobs
  visibility: public
  parameters:
  - name: batchId
  - name: jobId
  comment: '# * Decrement the total number of pending jobs for the batch.

    # *

    # * @param  string  $batchId

    # * @param  string  $jobId

    # * @return \Illuminate\Bus\UpdatedBatchJobCounts'
- name: incrementFailedJobs
  visibility: public
  parameters:
  - name: batchId
  - name: jobId
  comment: '# * Increment the total number of failed jobs for the batch.

    # *

    # * @param  string  $batchId

    # * @param  string  $jobId

    # * @return \Illuminate\Bus\UpdatedBatchJobCounts'
- name: updateAtomicValues
  visibility: protected
  parameters:
  - name: batchId
  - name: callback
  comment: '# * Update an atomic value within the batch.

    # *

    # * @param  string  $batchId

    # * @param  \Closure  $callback

    # * @return int|null'
- name: markAsFinished
  visibility: public
  parameters:
  - name: batchId
  comment: '# * Mark the batch that has the given ID as finished.

    # *

    # * @param  string  $batchId

    # * @return void'
- name: cancel
  visibility: public
  parameters:
  - name: batchId
  comment: '# * Cancel the batch that has the given ID.

    # *

    # * @param  string  $batchId

    # * @return void'
- name: delete
  visibility: public
  parameters:
  - name: batchId
  comment: '# * Delete the batch that has the given ID.

    # *

    # * @param  string  $batchId

    # * @return void'
- name: prune
  visibility: public
  parameters:
  - name: before
  comment: '# * Prune all of the entries older than the given date.

    # *

    # * @param  \DateTimeInterface  $before

    # * @return int'
- name: pruneUnfinished
  visibility: public
  parameters:
  - name: before
  comment: '# * Prune all of the unfinished entries older than the given date.

    # *

    # * @param  \DateTimeInterface  $before

    # * @return int'
- name: pruneCancelled
  visibility: public
  parameters:
  - name: before
  comment: '# * Prune all of the cancelled entries older than the given date.

    # *

    # * @param  \DateTimeInterface  $before

    # * @return int'
- name: transaction
  visibility: public
  parameters:
  - name: callback
  comment: '# * Execute the given Closure within a storage specific transaction.

    # *

    # * @param  \Closure  $callback

    # * @return mixed'
- name: rollBack
  visibility: public
  parameters: []
  comment: '# * Rollback the last database transaction for the connection.

    # *

    # * @return void'
- name: serialize
  visibility: protected
  parameters:
  - name: value
  comment: '# * Serialize the given value.

    # *

    # * @param  mixed  $value

    # * @return string'
- name: unserialize
  visibility: protected
  parameters:
  - name: serialized
  comment: '# * Unserialize the given value.

    # *

    # * @param  string  $serialized

    # * @return mixed'
- name: toBatch
  visibility: protected
  parameters:
  - name: batch
  comment: '# * Convert the given raw batch to a Batch object.

    # *

    # * @param  object  $batch

    # * @return \Illuminate\Bus\Batch'
- name: getConnection
  visibility: public
  parameters: []
  comment: '# * Get the underlying database connection.

    # *

    # * @return \Illuminate\Database\Connection'
- name: setConnection
  visibility: public
  parameters:
  - name: connection
  comment: '# * Set the underlying database connection.

    # *

    # * @param  \Illuminate\Database\Connection  $connection

    # * @return void'
traits:
- Carbon\CarbonImmutable
- Closure
- DateTimeInterface
- Illuminate\Database\Connection
- Illuminate\Database\PostgresConnection
- Illuminate\Database\Query\Expression
- Illuminate\Support\Str
- Throwable
interfaces:
- PrunableBatchRepository
