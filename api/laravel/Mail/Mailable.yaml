name: Mailable
class_comment: null
dependencies:
- name: ConfigRepository
  type: class
  source: Illuminate\Config\Repository
- name: Container
  type: class
  source: Illuminate\Container\Container
- name: FilesystemFactory
  type: class
  source: Illuminate\Contracts\Filesystem\Factory
- name: Attachable
  type: class
  source: Illuminate\Contracts\Mail\Attachable
- name: MailFactory
  type: class
  source: Illuminate\Contracts\Mail\Factory
- name: MailableContract
  type: class
  source: Illuminate\Contracts\Mail\Mailable
- name: Queue
  type: class
  source: Illuminate\Contracts\Queue\Factory
- name: Htmlable
  type: class
  source: Illuminate\Contracts\Support\Htmlable
- name: Renderable
  type: class
  source: Illuminate\Contracts\Support\Renderable
- name: HasLocalePreference
  type: class
  source: Illuminate\Contracts\Translation\HasLocalePreference
- name: Collection
  type: class
  source: Illuminate\Support\Collection
- name: HtmlString
  type: class
  source: Illuminate\Support\HtmlString
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: Conditionable
  type: class
  source: Illuminate\Support\Traits\Conditionable
- name: ForwardsCalls
  type: class
  source: Illuminate\Support\Traits\ForwardsCalls
- name: Localizable
  type: class
  source: Illuminate\Support\Traits\Localizable
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: SeeInOrder
  type: class
  source: Illuminate\Testing\Constraints\SeeInOrder
- name: PHPUnit
  type: class
  source: PHPUnit\Framework\Assert
- name: ReflectionClass
  type: class
  source: ReflectionClass
- name: ReflectionProperty
  type: class
  source: ReflectionProperty
- name: MetadataHeader
  type: class
  source: Symfony\Component\Mailer\Header\MetadataHeader
- name: TagHeader
  type: class
  source: Symfony\Component\Mailer\Header\TagHeader
- name: Address
  type: class
  source: Symfony\Component\Mime\Address
properties:
- name: locale
  visibility: public
  comment: '# * The locale of the message.

    # *

    # * @var string'
- name: from
  visibility: public
  comment: '# * The person the message is from.

    # *

    # * @var array'
- name: to
  visibility: public
  comment: '# * The "to" recipients of the message.

    # *

    # * @var array'
- name: cc
  visibility: public
  comment: '# * The "cc" recipients of the message.

    # *

    # * @var array'
- name: bcc
  visibility: public
  comment: '# * The "bcc" recipients of the message.

    # *

    # * @var array'
- name: replyTo
  visibility: public
  comment: '# * The "reply to" recipients of the message.

    # *

    # * @var array'
- name: subject
  visibility: public
  comment: '# * The subject of the message.

    # *

    # * @var string'
- name: markdown
  visibility: public
  comment: '# * The Markdown template for the message (if applicable).

    # *

    # * @var string'
- name: html
  visibility: protected
  comment: '# * The HTML to use for the message.

    # *

    # * @var string'
- name: view
  visibility: public
  comment: '# * The view to use for the message.

    # *

    # * @var string'
- name: textView
  visibility: public
  comment: '# * The plain text view to use for the message.

    # *

    # * @var string'
- name: viewData
  visibility: public
  comment: '# * The view data for the message.

    # *

    # * @var array'
- name: attachments
  visibility: public
  comment: '# * The attachments for the message.

    # *

    # * @var array'
- name: rawAttachments
  visibility: public
  comment: '# * The raw attachments for the message.

    # *

    # * @var array'
- name: diskAttachments
  visibility: public
  comment: '# * The attachments from a storage disk.

    # *

    # * @var array'
- name: tags
  visibility: protected
  comment: '# * The tags for the message.

    # *

    # * @var array'
- name: metadata
  visibility: protected
  comment: '# * The metadata for the message.

    # *

    # * @var array'
- name: callbacks
  visibility: public
  comment: '# * The callbacks for the message.

    # *

    # * @var array'
- name: theme
  visibility: public
  comment: '# * The name of the theme that should be used when formatting the message.

    # *

    # * @var string|null'
- name: mailer
  visibility: public
  comment: '# * The name of the mailer that should send the message.

    # *

    # * @var string'
- name: assertionableRenderStrings
  visibility: protected
  comment: '# * The rendered mailable views for testing / assertions.

    # *

    # * @var array'
- name: viewDataCallback
  visibility: public
  comment: '# * The callback that should be invoked while building the view data.

    # *

    # * @var callable'
methods:
- name: send
  visibility: public
  parameters:
  - name: mailer
  comment: "# * The locale of the message.\n# *\n# * @var string\n# */\n# public $locale;\n\
    # \n# /**\n# * The person the message is from.\n# *\n# * @var array\n# */\n# public\
    \ $from = [];\n# \n# /**\n# * The \"to\" recipients of the message.\n# *\n# *\
    \ @var array\n# */\n# public $to = [];\n# \n# /**\n# * The \"cc\" recipients of\
    \ the message.\n# *\n# * @var array\n# */\n# public $cc = [];\n# \n# /**\n# *\
    \ The \"bcc\" recipients of the message.\n# *\n# * @var array\n# */\n# public\
    \ $bcc = [];\n# \n# /**\n# * The \"reply to\" recipients of the message.\n# *\n\
    # * @var array\n# */\n# public $replyTo = [];\n# \n# /**\n# * The subject of the\
    \ message.\n# *\n# * @var string\n# */\n# public $subject;\n# \n# /**\n# * The\
    \ Markdown template for the message (if applicable).\n# *\n# * @var string\n#\
    \ */\n# public $markdown;\n# \n# /**\n# * The HTML to use for the message.\n#\
    \ *\n# * @var string\n# */\n# protected $html;\n# \n# /**\n# * The view to use\
    \ for the message.\n# *\n# * @var string\n# */\n# public $view;\n# \n# /**\n#\
    \ * The plain text view to use for the message.\n# *\n# * @var string\n# */\n\
    # public $textView;\n# \n# /**\n# * The view data for the message.\n# *\n# * @var\
    \ array\n# */\n# public $viewData = [];\n# \n# /**\n# * The attachments for the\
    \ message.\n# *\n# * @var array\n# */\n# public $attachments = [];\n# \n# /**\n\
    # * The raw attachments for the message.\n# *\n# * @var array\n# */\n# public\
    \ $rawAttachments = [];\n# \n# /**\n# * The attachments from a storage disk.\n\
    # *\n# * @var array\n# */\n# public $diskAttachments = [];\n# \n# /**\n# * The\
    \ tags for the message.\n# *\n# * @var array\n# */\n# protected $tags = [];\n\
    # \n# /**\n# * The metadata for the message.\n# *\n# * @var array\n# */\n# protected\
    \ $metadata = [];\n# \n# /**\n# * The callbacks for the message.\n# *\n# * @var\
    \ array\n# */\n# public $callbacks = [];\n# \n# /**\n# * The name of the theme\
    \ that should be used when formatting the message.\n# *\n# * @var string|null\n\
    # */\n# public $theme;\n# \n# /**\n# * The name of the mailer that should send\
    \ the message.\n# *\n# * @var string\n# */\n# public $mailer;\n# \n# /**\n# *\
    \ The rendered mailable views for testing / assertions.\n# *\n# * @var array\n\
    # */\n# protected $assertionableRenderStrings;\n# \n# /**\n# * The callback that\
    \ should be invoked while building the view data.\n# *\n# * @var callable\n# */\n\
    # public static $viewDataCallback;\n# \n# /**\n# * Send the message using the\
    \ given mailer.\n# *\n# * @param  \\Illuminate\\Contracts\\Mail\\Factory|\\Illuminate\\\
    Contracts\\Mail\\Mailer  $mailer\n# * @return \\Illuminate\\Mail\\SentMessage|null"
- name: queue
  visibility: public
  parameters:
  - name: queue
  comment: '# * Queue the message for sending.

    # *

    # * @param  \Illuminate\Contracts\Queue\Factory  $queue

    # * @return mixed'
- name: later
  visibility: public
  parameters:
  - name: delay
  - name: queue
  comment: '# * Deliver the queued message after (n) seconds.

    # *

    # * @param  \DateTimeInterface|\DateInterval|int  $delay

    # * @param  \Illuminate\Contracts\Queue\Factory  $queue

    # * @return mixed'
- name: newQueuedJob
  visibility: protected
  parameters: []
  comment: '# * Make the queued mailable job instance.

    # *

    # * @return mixed'
- name: render
  visibility: public
  parameters: []
  comment: '# * Render the mailable into a view.

    # *

    # * @return string

    # *

    # * @throws \ReflectionException'
- name: buildView
  visibility: protected
  parameters: []
  comment: '# * Build the view for the message.

    # *

    # * @return array|string

    # *

    # * @throws \ReflectionException'
- name: buildMarkdownView
  visibility: protected
  parameters: []
  comment: '# * Build the Markdown view for the message.

    # *

    # * @return array

    # *

    # * @throws \ReflectionException'
- name: buildViewData
  visibility: public
  parameters: []
  comment: '# * Build the view data for the message.

    # *

    # * @return array

    # *

    # * @throws \ReflectionException'
- name: buildMarkdownHtml
  visibility: protected
  parameters:
  - name: viewData
  comment: '# * Build the HTML view for a Markdown message.

    # *

    # * @param  array  $viewData

    # * @return \Closure'
- name: buildMarkdownText
  visibility: protected
  parameters:
  - name: viewData
  comment: '# * Build the text view for a Markdown message.

    # *

    # * @param  array  $viewData

    # * @return \Closure'
- name: markdownRenderer
  visibility: protected
  parameters: []
  comment: '# * Resolves a Markdown instance with the mail''s theme.

    # *

    # * @return \Illuminate\Mail\Markdown'
- name: buildFrom
  visibility: protected
  parameters:
  - name: message
  comment: '# * Add the sender to the message.

    # *

    # * @param  \Illuminate\Mail\Message  $message

    # * @return $this'
- name: buildRecipients
  visibility: protected
  parameters:
  - name: message
  comment: '# * Add all of the recipients to the message.

    # *

    # * @param  \Illuminate\Mail\Message  $message

    # * @return $this'
- name: buildSubject
  visibility: protected
  parameters:
  - name: message
  comment: '# * Set the subject for the message.

    # *

    # * @param  \Illuminate\Mail\Message  $message

    # * @return $this'
- name: buildAttachments
  visibility: protected
  parameters:
  - name: message
  comment: '# * Add all of the attachments to the message.

    # *

    # * @param  \Illuminate\Mail\Message  $message

    # * @return $this'
- name: buildDiskAttachments
  visibility: protected
  parameters:
  - name: message
  comment: '# * Add all of the disk attachments to the message.

    # *

    # * @param  \Illuminate\Mail\Message  $message

    # * @return void'
- name: buildTags
  visibility: protected
  parameters:
  - name: message
  comment: '# * Add all defined tags to the message.

    # *

    # * @param  \Illuminate\Mail\Message  $message

    # * @return $this'
- name: buildMetadata
  visibility: protected
  parameters:
  - name: message
  comment: '# * Add all defined metadata to the message.

    # *

    # * @param  \Illuminate\Mail\Message  $message

    # * @return $this'
- name: runCallbacks
  visibility: protected
  parameters:
  - name: message
  comment: '# * Run the callbacks for the message.

    # *

    # * @param  \Illuminate\Mail\Message  $message

    # * @return $this'
- name: locale
  visibility: public
  parameters:
  - name: locale
  comment: '# * Set the locale of the message.

    # *

    # * @param  string  $locale

    # * @return $this'
- name: priority
  visibility: public
  parameters:
  - name: level
    default: '3'
  comment: '# * Set the priority of this message.

    # *

    # * The value is an integer where 1 is the highest priority and 5 is the lowest.

    # *

    # * @param  int  $level

    # * @return $this'
- name: from
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Set the sender of the message.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: hasFrom
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Determine if the given recipient is set on the mailable.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return bool'
- name: to
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Set the recipients of the message.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: hasTo
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Determine if the given recipient is set on the mailable.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return bool'
- name: cc
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Set the recipients of the message.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: hasCc
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Determine if the given recipient is set on the mailable.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return bool'
- name: bcc
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Set the recipients of the message.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: hasBcc
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Determine if the given recipient is set on the mailable.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return bool'
- name: replyTo
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Set the "reply to" address of the message.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: hasReplyTo
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Determine if the given replyTo is set on the mailable.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return bool'
- name: setAddress
  visibility: protected
  parameters:
  - name: address
  - name: name
    default: 'null'
  - name: property
    default: '''to'''
  comment: '# * Set the recipients of the message.

    # *

    # * All recipients are stored internally as [[''name'' => ?, ''address'' => ?]]

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @param  string  $property

    # * @return $this'
- name: addressesToArray
  visibility: protected
  parameters:
  - name: address
  - name: name
  comment: '# * Convert the given recipient arguments to an array.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return array'
- name: normalizeRecipient
  visibility: protected
  parameters:
  - name: recipient
  comment: '# * Convert the given recipient into an object.

    # *

    # * @param  mixed  $recipient

    # * @return object'
- name: hasRecipient
  visibility: protected
  parameters:
  - name: address
  - name: name
    default: 'null'
  - name: property
    default: '''to'''
  comment: '# * Determine if the given recipient is set on the mailable.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @param  string  $property

    # * @return bool'
- name: hasEnvelopeRecipient
  visibility: private
  parameters:
  - name: address
  - name: name
  - name: property
  comment: '# * Determine if the mailable "envelope" method defines a recipient.

    # *

    # * @param  string  $address

    # * @param  string|null  $name

    # * @param  string  $property

    # * @return bool'
- name: subject
  visibility: public
  parameters:
  - name: subject
  comment: '# * Set the subject of the message.

    # *

    # * @param  string  $subject

    # * @return $this'
- name: hasSubject
  visibility: public
  parameters:
  - name: subject
  comment: '# * Determine if the mailable has the given subject.

    # *

    # * @param  string  $subject

    # * @return bool'
- name: markdown
  visibility: public
  parameters:
  - name: view
  - name: data
    default: '[]'
  comment: '# * Set the Markdown template for the message.

    # *

    # * @param  string  $view

    # * @param  array  $data

    # * @return $this'
- name: view
  visibility: public
  parameters:
  - name: view
  - name: data
    default: '[]'
  comment: '# * Set the view and view data for the message.

    # *

    # * @param  string  $view

    # * @param  array  $data

    # * @return $this'
- name: html
  visibility: public
  parameters:
  - name: html
  comment: '# * Set the rendered HTML content for the message.

    # *

    # * @param  string  $html

    # * @return $this'
- name: text
  visibility: public
  parameters:
  - name: textView
  - name: data
    default: '[]'
  comment: '# * Set the plain text view for the message.

    # *

    # * @param  string  $textView

    # * @param  array  $data

    # * @return $this'
- name: with
  visibility: public
  parameters:
  - name: key
  - name: value
    default: 'null'
  comment: '# * Set the view data for the message.

    # *

    # * @param  string|array  $key

    # * @param  mixed  $value

    # * @return $this'
- name: attach
  visibility: public
  parameters:
  - name: file
  - name: options
    default: '[]'
  comment: '# * Attach a file to the message.

    # *

    # * @param  string|\Illuminate\Contracts\Mail\Attachable|\Illuminate\Mail\Attachment  $file

    # * @param  array  $options

    # * @return $this'
- name: attachMany
  visibility: public
  parameters:
  - name: files
  comment: '# * Attach multiple files to the message.

    # *

    # * @param  array  $files

    # * @return $this'
- name: hasAttachment
  visibility: public
  parameters:
  - name: file
  - name: options
    default: '[]'
  comment: '# * Determine if the mailable has the given attachment.

    # *

    # * @param  string|\Illuminate\Contracts\Mail\Attachable|\Illuminate\Mail\Attachment  $file

    # * @param  array  $options

    # * @return bool'
- name: hasEnvelopeAttachment
  visibility: private
  parameters:
  - name: attachment
  - name: options
    default: '[]'
  comment: '# * Determine if the mailable has the given envelope attachment.

    # *

    # * @param  \Illuminate\Mail\Attachment  $attachment

    # * @param  array  $options

    # * @return bool'
- name: attachFromStorage
  visibility: public
  parameters:
  - name: path
  - name: name
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * Attach a file to the message from storage.

    # *

    # * @param  string  $path

    # * @param  string|null  $name

    # * @param  array  $options

    # * @return $this'
- name: attachFromStorageDisk
  visibility: public
  parameters:
  - name: disk
  - name: path
  - name: name
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * Attach a file to the message from storage.

    # *

    # * @param  string  $disk

    # * @param  string  $path

    # * @param  string|null  $name

    # * @param  array  $options

    # * @return $this'
- name: hasAttachmentFromStorage
  visibility: public
  parameters:
  - name: path
  - name: name
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * Determine if the mailable has the given attachment from storage.

    # *

    # * @param  string  $path

    # * @param  string|null  $name

    # * @param  array  $options

    # * @return bool'
- name: hasAttachmentFromStorageDisk
  visibility: public
  parameters:
  - name: disk
  - name: path
  - name: name
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * Determine if the mailable has the given attachment from a specific
    storage disk.

    # *

    # * @param  string  $disk

    # * @param  string  $path

    # * @param  string|null  $name

    # * @param  array  $options

    # * @return bool'
- name: attachData
  visibility: public
  parameters:
  - name: data
  - name: name
  - name: options
    default: '[]'
  comment: '# * Attach in-memory data as an attachment.

    # *

    # * @param  string  $data

    # * @param  string  $name

    # * @param  array  $options

    # * @return $this'
- name: hasAttachedData
  visibility: public
  parameters:
  - name: data
  - name: name
  - name: options
    default: '[]'
  comment: '# * Determine if the mailable has the given data as an attachment.

    # *

    # * @param  string  $data

    # * @param  string  $name

    # * @param  array  $options

    # * @return bool'
- name: tag
  visibility: public
  parameters:
  - name: value
  comment: '# * Add a tag header to the message when supported by the underlying transport.

    # *

    # * @param  string  $value

    # * @return $this'
- name: hasTag
  visibility: public
  parameters:
  - name: value
  comment: '# * Determine if the mailable has the given tag.

    # *

    # * @param  string  $value

    # * @return bool'
- name: metadata
  visibility: public
  parameters:
  - name: key
  - name: value
  comment: '# * Add a metadata header to the message when supported by the underlying
    transport.

    # *

    # * @param  string  $key

    # * @param  string  $value

    # * @return $this'
- name: hasMetadata
  visibility: public
  parameters:
  - name: key
  - name: value
  comment: '# * Determine if the mailable has the given metadata.

    # *

    # * @param  string  $key

    # * @param  string  $value

    # * @return bool'
- name: assertFrom
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Assert that the mailable is from the given address.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: assertTo
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Assert that the mailable has the given recipient.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: assertHasTo
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Assert that the mailable has the given recipient.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: assertHasCc
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Assert that the mailable has the given recipient.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: assertHasBcc
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Assert that the mailable has the given recipient.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: assertHasReplyTo
  visibility: public
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Assert that the mailable has the given "reply to" address.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return $this'
- name: formatAssertionRecipient
  visibility: private
  parameters:
  - name: address
  - name: name
    default: 'null'
  comment: '# * Format the mailable recipient for display in an assertion message.

    # *

    # * @param  object|array|string  $address

    # * @param  string|null  $name

    # * @return string'
- name: assertHasSubject
  visibility: public
  parameters:
  - name: subject
  comment: '# * Assert that the mailable has the given subject.

    # *

    # * @param  string  $subject

    # * @return $this'
- name: assertSeeInHtml
  visibility: public
  parameters:
  - name: string
  - name: escape
    default: 'true'
  comment: '# * Assert that the given text is present in the HTML email body.

    # *

    # * @param  string  $string

    # * @param  bool  $escape

    # * @return $this'
- name: assertDontSeeInHtml
  visibility: public
  parameters:
  - name: string
  - name: escape
    default: 'true'
  comment: '# * Assert that the given text is not present in the HTML email body.

    # *

    # * @param  string  $string

    # * @param  bool  $escape

    # * @return $this'
- name: assertSeeInOrderInHtml
  visibility: public
  parameters:
  - name: strings
  - name: escape
    default: 'true'
  comment: '# * Assert that the given text strings are present in order in the HTML
    email body.

    # *

    # * @param  array  $strings

    # * @param  bool  $escape

    # * @return $this'
- name: assertSeeInText
  visibility: public
  parameters:
  - name: string
  comment: '# * Assert that the given text is present in the plain-text email body.

    # *

    # * @param  string  $string

    # * @return $this'
- name: assertDontSeeInText
  visibility: public
  parameters:
  - name: string
  comment: '# * Assert that the given text is not present in the plain-text email
    body.

    # *

    # * @param  string  $string

    # * @return $this'
- name: assertSeeInOrderInText
  visibility: public
  parameters:
  - name: strings
  comment: '# * Assert that the given text strings are present in order in the plain-text
    email body.

    # *

    # * @param  array  $strings

    # * @return $this'
- name: assertHasAttachment
  visibility: public
  parameters:
  - name: file
  - name: options
    default: '[]'
  comment: '# * Assert the mailable has the given attachment.

    # *

    # * @param  string|\Illuminate\Contracts\Mail\Attachable|\Illuminate\Mail\Attachment  $file

    # * @param  array  $options

    # * @return $this'
- name: assertHasAttachedData
  visibility: public
  parameters:
  - name: data
  - name: name
  - name: options
    default: '[]'
  comment: '# * Assert the mailable has the given data as an attachment.

    # *

    # * @param  string  $data

    # * @param  string  $name

    # * @param  array  $options

    # * @return $this'
- name: assertHasAttachmentFromStorage
  visibility: public
  parameters:
  - name: path
  - name: name
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * Assert the mailable has the given attachment from storage.

    # *

    # * @param  string  $path

    # * @param  string|null  $name

    # * @param  array  $options

    # * @return $this'
- name: assertHasAttachmentFromStorageDisk
  visibility: public
  parameters:
  - name: disk
  - name: path
  - name: name
    default: 'null'
  - name: options
    default: '[]'
  comment: '# * Assert the mailable has the given attachment from a specific storage
    disk.

    # *

    # * @param  string  $disk

    # * @param  string  $path

    # * @param  string|null  $name

    # * @param  array  $options

    # * @return $this'
- name: assertHasTag
  visibility: public
  parameters:
  - name: tag
  comment: '# * Assert that the mailable has the given tag.

    # *

    # * @param  string  $tag

    # * @return $this'
- name: assertHasMetadata
  visibility: public
  parameters:
  - name: key
  - name: value
  comment: '# * Assert that the mailable has the given metadata.

    # *

    # * @param  string  $key

    # * @param  string  $value

    # * @return $this'
- name: renderForAssertions
  visibility: protected
  parameters: []
  comment: '# * Render the HTML and plain-text version of the mailable into views
    for assertions.

    # *

    # * @return array

    # *

    # * @throws \ReflectionException'
- name: prepareMailableForDelivery
  visibility: protected
  parameters: []
  comment: '# * Prepare the mailable instance for delivery.

    # *

    # * @return void'
- name: ensureHeadersAreHydrated
  visibility: private
  parameters: []
  comment: '# * Ensure the mailable''s headers are hydrated from the "headers" method.

    # *

    # * @return void'
- name: ensureEnvelopeIsHydrated
  visibility: private
  parameters: []
  comment: '# * Ensure the mailable''s "envelope" data is hydrated from the "envelope"
    method.

    # *

    # * @return void'
- name: ensureContentIsHydrated
  visibility: private
  parameters: []
  comment: '# * Ensure the mailable''s content is hydrated from the "content" method.

    # *

    # * @return void'
- name: ensureAttachmentsAreHydrated
  visibility: private
  parameters: []
  comment: '# * Ensure the mailable''s attachments are hydrated from the "attachments"
    method.

    # *

    # * @return void'
- name: mailer
  visibility: public
  parameters:
  - name: mailer
  comment: '# * Set the name of the mailer that should send the message.

    # *

    # * @param  string  $mailer

    # * @return $this'
- name: withSymfonyMessage
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a callback to be called with the Symfony message instance.

    # *

    # * @param  callable  $callback

    # * @return $this'
- name: buildViewDataUsing
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a callback to be called while building the view data.

    # *

    # * @param  callable  $callback

    # * @return void'
- name: __call
  visibility: public
  parameters:
  - name: method
  - name: parameters
  comment: '# * Dynamically bind parameters to the message.

    # *

    # * @param  string  $method

    # * @param  array  $parameters

    # * @return $this

    # *

    # * @throws \BadMethodCallException'
traits:
- Illuminate\Container\Container
- Illuminate\Contracts\Mail\Attachable
- Illuminate\Contracts\Support\Htmlable
- Illuminate\Contracts\Support\Renderable
- Illuminate\Contracts\Translation\HasLocalePreference
- Illuminate\Support\Collection
- Illuminate\Support\HtmlString
- Illuminate\Support\Str
- Illuminate\Support\Traits\Conditionable
- Illuminate\Support\Traits\ForwardsCalls
- Illuminate\Support\Traits\Localizable
- Illuminate\Support\Traits\Macroable
- Illuminate\Testing\Constraints\SeeInOrder
- ReflectionClass
- ReflectionProperty
- Symfony\Component\Mailer\Header\MetadataHeader
- Symfony\Component\Mailer\Header\TagHeader
- Symfony\Component\Mime\Address
interfaces:
- MailableContract
