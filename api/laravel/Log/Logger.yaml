name: Logger
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: Dispatcher
  type: class
  source: Illuminate\Contracts\Events\Dispatcher
- name: Arrayable
  type: class
  source: Illuminate\Contracts\Support\Arrayable
- name: Jsonable
  type: class
  source: Illuminate\Contracts\Support\Jsonable
- name: MessageLogged
  type: class
  source: Illuminate\Log\Events\MessageLogged
- name: Conditionable
  type: class
  source: Illuminate\Support\Traits\Conditionable
- name: LoggerInterface
  type: class
  source: Psr\Log\LoggerInterface
- name: RuntimeException
  type: class
  source: RuntimeException
- name: Conditionable
  type: class
  source: Conditionable
properties:
- name: logger
  visibility: protected
  comment: '# * The underlying logger implementation.

    # *

    # * @var \Psr\Log\LoggerInterface'
- name: dispatcher
  visibility: protected
  comment: '# * The event dispatcher instance.

    # *

    # * @var \Illuminate\Contracts\Events\Dispatcher|null'
- name: context
  visibility: protected
  comment: '# * Any context to be added to logs.

    # *

    # * @var array'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: logger
  - name: dispatcher
    default: 'null'
  comment: "# * The underlying logger implementation.\n# *\n# * @var \\Psr\\Log\\\
    LoggerInterface\n# */\n# protected $logger;\n# \n# /**\n# * The event dispatcher\
    \ instance.\n# *\n# * @var \\Illuminate\\Contracts\\Events\\Dispatcher|null\n\
    # */\n# protected $dispatcher;\n# \n# /**\n# * Any context to be added to logs.\n\
    # *\n# * @var array\n# */\n# protected $context = [];\n# \n# /**\n# * Create a\
    \ new log writer instance.\n# *\n# * @param  \\Psr\\Log\\LoggerInterface  $logger\n\
    # * @param  \\Illuminate\\Contracts\\Events\\Dispatcher|null  $dispatcher\n# *\
    \ @return void"
- name: emergency
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Log an emergency message to the logs.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: alert
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Log an alert message to the logs.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: critical
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Log a critical message to the logs.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: error
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Log an error message to the logs.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: warning
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Log a warning message to the logs.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: notice
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Log a notice to the logs.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: info
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Log an informational message to the logs.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: debug
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Log a debug message to the logs.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: log
  visibility: public
  parameters:
  - name: level
  - name: message
  - name: context
    default: '[]'
  comment: '# * Log a message to the logs.

    # *

    # * @param  string  $level

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: write
  visibility: public
  parameters:
  - name: level
  - name: message
  - name: context
    default: '[]'
  comment: '# * Dynamically pass log calls into the writer.

    # *

    # * @param  string  $level

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: writeLog
  visibility: protected
  parameters:
  - name: level
  - name: message
  - name: context
  comment: '# * Write a message to the log.

    # *

    # * @param  string  $level

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @param  array  $context

    # * @return void'
- name: withContext
  visibility: public
  parameters:
  - name: context
    default: '[]'
  comment: '# * Add context to all future logs.

    # *

    # * @param  array  $context

    # * @return $this'
- name: withoutContext
  visibility: public
  parameters: []
  comment: '# * Flush the existing context array.

    # *

    # * @return $this'
- name: listen
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a new callback handler for when a log event is triggered.

    # *

    # * @param  \Closure  $callback

    # * @return void

    # *

    # * @throws \RuntimeException'
- name: fireLogEvent
  visibility: protected
  parameters:
  - name: level
  - name: message
  - name: context
    default: '[]'
  comment: '# * Fires a log event.

    # *

    # * @param  string  $level

    # * @param  string  $message

    # * @param  array  $context

    # * @return void'
- name: formatMessage
  visibility: protected
  parameters:
  - name: message
  comment: '# * Format the parameters for the logger.

    # *

    # * @param  \Illuminate\Contracts\Support\Arrayable|\Illuminate\Contracts\Support\Jsonable|\Illuminate\Support\Stringable|array|string  $message

    # * @return string'
- name: getLogger
  visibility: public
  parameters: []
  comment: '# * Get the underlying logger implementation.

    # *

    # * @return \Psr\Log\LoggerInterface'
- name: getEventDispatcher
  visibility: public
  parameters: []
  comment: '# * Get the event dispatcher instance.

    # *

    # * @return \Illuminate\Contracts\Events\Dispatcher'
- name: setEventDispatcher
  visibility: public
  parameters:
  - name: dispatcher
  comment: '# * Set the event dispatcher instance.

    # *

    # * @param  \Illuminate\Contracts\Events\Dispatcher  $dispatcher

    # * @return void'
- name: __call
  visibility: public
  parameters:
  - name: method
  - name: parameters
  comment: '# * Dynamically proxy method calls to the underlying logger.

    # *

    # * @param  string  $method

    # * @param  array  $parameters

    # * @return mixed'
traits:
- Closure
- Illuminate\Contracts\Events\Dispatcher
- Illuminate\Contracts\Support\Arrayable
- Illuminate\Contracts\Support\Jsonable
- Illuminate\Log\Events\MessageLogged
- Illuminate\Support\Traits\Conditionable
- Psr\Log\LoggerInterface
- RuntimeException
- Conditionable
interfaces:
- LoggerInterface
