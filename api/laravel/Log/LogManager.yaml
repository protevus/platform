name: LogManager
class_comment: '# * @mixin \Illuminate\Log\Logger'
dependencies:
- name: Closure
  type: class
  source: Closure
- name: ContextRepository
  type: class
  source: Illuminate\Log\Context\Repository
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: InvalidArgumentException
  type: class
  source: InvalidArgumentException
- name: LineFormatter
  type: class
  source: Monolog\Formatter\LineFormatter
- name: ErrorLogHandler
  type: class
  source: Monolog\Handler\ErrorLogHandler
- name: FingersCrossedHandler
  type: class
  source: Monolog\Handler\FingersCrossedHandler
- name: FormattableHandlerInterface
  type: class
  source: Monolog\Handler\FormattableHandlerInterface
- name: HandlerInterface
  type: class
  source: Monolog\Handler\HandlerInterface
- name: RotatingFileHandler
  type: class
  source: Monolog\Handler\RotatingFileHandler
- name: SlackWebhookHandler
  type: class
  source: Monolog\Handler\SlackWebhookHandler
- name: StreamHandler
  type: class
  source: Monolog\Handler\StreamHandler
- name: SyslogHandler
  type: class
  source: Monolog\Handler\SyslogHandler
- name: WhatFailureGroupHandler
  type: class
  source: Monolog\Handler\WhatFailureGroupHandler
- name: Monolog
  type: class
  source: Monolog\Logger
- name: ProcessorInterface
  type: class
  source: Monolog\Processor\ProcessorInterface
- name: PsrLogMessageProcessor
  type: class
  source: Monolog\Processor\PsrLogMessageProcessor
- name: LoggerInterface
  type: class
  source: Psr\Log\LoggerInterface
- name: Throwable
  type: class
  source: Throwable
- name: ParsesLogConfiguration
  type: class
  source: ParsesLogConfiguration
properties:
- name: app
  visibility: protected
  comment: "# * @mixin \\Illuminate\\Log\\Logger\n# */\n# class LogManager implements\
    \ LoggerInterface\n# {\n# use ParsesLogConfiguration;\n# \n# /**\n# * The application\
    \ instance.\n# *\n# * @var \\Illuminate\\Contracts\\Foundation\\Application"
- name: channels
  visibility: protected
  comment: '# * The array of resolved channels.

    # *

    # * @var array'
- name: sharedContext
  visibility: protected
  comment: '# * The context shared across channels and stacks.

    # *

    # * @var array'
- name: customCreators
  visibility: protected
  comment: '# * The registered custom driver creators.

    # *

    # * @var array'
- name: dateFormat
  visibility: protected
  comment: '# * The standard date format to use when writing logs.

    # *

    # * @var string'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: app
  comment: "# * @mixin \\Illuminate\\Log\\Logger\n# */\n# class LogManager implements\
    \ LoggerInterface\n# {\n# use ParsesLogConfiguration;\n# \n# /**\n# * The application\
    \ instance.\n# *\n# * @var \\Illuminate\\Contracts\\Foundation\\Application\n\
    # */\n# protected $app;\n# \n# /**\n# * The array of resolved channels.\n# *\n\
    # * @var array\n# */\n# protected $channels = [];\n# \n# /**\n# * The context\
    \ shared across channels and stacks.\n# *\n# * @var array\n# */\n# protected $sharedContext\
    \ = [];\n# \n# /**\n# * The registered custom driver creators.\n# *\n# * @var\
    \ array\n# */\n# protected $customCreators = [];\n# \n# /**\n# * The standard\
    \ date format to use when writing logs.\n# *\n# * @var string\n# */\n# protected\
    \ $dateFormat = 'Y-m-d H:i:s';\n# \n# /**\n# * Create a new Log manager instance.\n\
    # *\n# * @param  \\Illuminate\\Contracts\\Foundation\\Application  $app\n# * @return\
    \ void"
- name: build
  visibility: public
  parameters:
  - name: config
  comment: '# * Build an on-demand log channel.

    # *

    # * @param  array  $config

    # * @return \Psr\Log\LoggerInterface'
- name: stack
  visibility: public
  parameters:
  - name: channels
  - name: channel
    default: 'null'
  comment: '# * Create a new, on-demand aggregate logger instance.

    # *

    # * @param  array  $channels

    # * @param  string|null  $channel

    # * @return \Psr\Log\LoggerInterface'
- name: channel
  visibility: public
  parameters:
  - name: channel
    default: 'null'
  comment: '# * Get a log channel instance.

    # *

    # * @param  string|null  $channel

    # * @return \Psr\Log\LoggerInterface'
- name: driver
  visibility: public
  parameters:
  - name: driver
    default: 'null'
  comment: '# * Get a log driver instance.

    # *

    # * @param  string|null  $driver

    # * @return \Psr\Log\LoggerInterface'
- name: get
  visibility: protected
  parameters:
  - name: name
  - name: config
    default: 'null'
  comment: '# * Attempt to get the log from the local cache.

    # *

    # * @param  string  $name

    # * @param  array|null  $config

    # * @return \Psr\Log\LoggerInterface'
- name: tap
  visibility: protected
  parameters:
  - name: name
  - name: logger
  comment: '# * Apply the configured taps for the logger.

    # *

    # * @param  string  $name

    # * @param  \Illuminate\Log\Logger  $logger

    # * @return \Illuminate\Log\Logger'
- name: parseTap
  visibility: protected
  parameters:
  - name: tap
  comment: '# * Parse the given tap class string into a class name and arguments string.

    # *

    # * @param  string  $tap

    # * @return array'
- name: createEmergencyLogger
  visibility: protected
  parameters: []
  comment: '# * Create an emergency log handler to avoid white screens of death.

    # *

    # * @return \Psr\Log\LoggerInterface'
- name: resolve
  visibility: protected
  parameters:
  - name: name
  - name: config
    default: 'null'
  comment: '# * Resolve the given log instance by name.

    # *

    # * @param  string  $name

    # * @param  array|null  $config

    # * @return \Psr\Log\LoggerInterface

    # *

    # * @throws \InvalidArgumentException'
- name: callCustomCreator
  visibility: protected
  parameters:
  - name: config
  comment: '# * Call a custom driver creator.

    # *

    # * @param  array  $config

    # * @return mixed'
- name: createCustomDriver
  visibility: protected
  parameters:
  - name: config
  comment: '# * Create a custom log driver instance.

    # *

    # * @param  array  $config

    # * @return \Psr\Log\LoggerInterface'
- name: createStackDriver
  visibility: protected
  parameters:
  - name: config
  comment: '# * Create an aggregate log driver instance.

    # *

    # * @param  array  $config

    # * @return \Psr\Log\LoggerInterface'
- name: createSingleDriver
  visibility: protected
  parameters:
  - name: config
  comment: '# * Create an instance of the single file log driver.

    # *

    # * @param  array  $config

    # * @return \Psr\Log\LoggerInterface'
- name: createDailyDriver
  visibility: protected
  parameters:
  - name: config
  comment: '# * Create an instance of the daily file log driver.

    # *

    # * @param  array  $config

    # * @return \Psr\Log\LoggerInterface'
- name: createSlackDriver
  visibility: protected
  parameters:
  - name: config
  comment: '# * Create an instance of the Slack log driver.

    # *

    # * @param  array  $config

    # * @return \Psr\Log\LoggerInterface'
- name: createSyslogDriver
  visibility: protected
  parameters:
  - name: config
  comment: '# * Create an instance of the syslog log driver.

    # *

    # * @param  array  $config

    # * @return \Psr\Log\LoggerInterface'
- name: createErrorlogDriver
  visibility: protected
  parameters:
  - name: config
  comment: '# * Create an instance of the "error log" log driver.

    # *

    # * @param  array  $config

    # * @return \Psr\Log\LoggerInterface'
- name: createMonologDriver
  visibility: protected
  parameters:
  - name: config
  comment: '# * Create an instance of any handler available in Monolog.

    # *

    # * @param  array  $config

    # * @return \Psr\Log\LoggerInterface

    # *

    # * @throws \InvalidArgumentException

    # * @throws \Illuminate\Contracts\Container\BindingResolutionException'
- name: prepareHandlers
  visibility: protected
  parameters:
  - name: handlers
  comment: '# * Prepare the handlers for usage by Monolog.

    # *

    # * @param  array  $handlers

    # * @return array'
- name: prepareHandler
  visibility: protected
  parameters:
  - name: handler
  - name: config
    default: '[]'
  comment: '# * Prepare the handler for usage by Monolog.

    # *

    # * @param  \Monolog\Handler\HandlerInterface  $handler

    # * @param  array  $config

    # * @return \Monolog\Handler\HandlerInterface'
- name: formatter
  visibility: protected
  parameters: []
  comment: '# * Get a Monolog formatter instance.

    # *

    # * @return \Monolog\Formatter\FormatterInterface'
- name: shareContext
  visibility: public
  parameters:
  - name: context
  comment: '# * Share context across channels and stacks.

    # *

    # * @param  array  $context

    # * @return $this'
- name: sharedContext
  visibility: public
  parameters: []
  comment: '# * The context shared across channels and stacks.

    # *

    # * @return array'
- name: withoutContext
  visibility: public
  parameters: []
  comment: '# * Flush the log context on all currently resolved channels.

    # *

    # * @return $this'
- name: flushSharedContext
  visibility: public
  parameters: []
  comment: '# * Flush the shared context.

    # *

    # * @return $this'
- name: getFallbackChannelName
  visibility: protected
  parameters: []
  comment: '# * Get fallback log channel name.

    # *

    # * @return string'
- name: configurationFor
  visibility: protected
  parameters:
  - name: name
  comment: '# * Get the log connection configuration.

    # *

    # * @param  string  $name

    # * @return array'
- name: getDefaultDriver
  visibility: public
  parameters: []
  comment: '# * Get the default log driver name.

    # *

    # * @return string|null'
- name: setDefaultDriver
  visibility: public
  parameters:
  - name: name
  comment: '# * Set the default log driver name.

    # *

    # * @param  string  $name

    # * @return void'
- name: extend
  visibility: public
  parameters:
  - name: driver
  - name: callback
  comment: '# * Register a custom driver creator Closure.

    # *

    # * @param  string  $driver

    # * @param  \Closure  $callback

    # * @return $this'
- name: forgetChannel
  visibility: public
  parameters:
  - name: driver
    default: 'null'
  comment: '# * Unset the given channel instance.

    # *

    # * @param  string|null  $driver

    # * @return void'
- name: parseDriver
  visibility: protected
  parameters:
  - name: driver
  comment: '# * Parse the driver name.

    # *

    # * @param  string|null  $driver

    # * @return string|null'
- name: getChannels
  visibility: public
  parameters: []
  comment: '# * Get all of the resolved log channels.

    # *

    # * @return array'
- name: emergency
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * System is unusable.

    # *

    # * @param  string|\Stringable  $message

    # * @param  array  $context

    # * @return void'
- name: alert
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Action must be taken immediately.

    # *

    # * Example: Entire website down, database unavailable, etc. This should

    # * trigger the SMS alerts and wake you up.

    # *

    # * @param  string|\Stringable  $message

    # * @param  array  $context

    # * @return void'
- name: critical
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Critical conditions.

    # *

    # * Example: Application component unavailable, unexpected exception.

    # *

    # * @param  string|\Stringable  $message

    # * @param  array  $context

    # * @return void'
- name: error
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Runtime errors that do not require immediate action but should typically

    # * be logged and monitored.

    # *

    # * @param  string|\Stringable  $message

    # * @param  array  $context

    # * @return void'
- name: warning
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Exceptional occurrences that are not errors.

    # *

    # * Example: Use of deprecated APIs, poor use of an API, undesirable things

    # * that are not necessarily wrong.

    # *

    # * @param  string|\Stringable  $message

    # * @param  array  $context

    # * @return void'
- name: notice
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Normal but significant events.

    # *

    # * @param  string|\Stringable  $message

    # * @param  array  $context

    # * @return void'
- name: info
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Interesting events.

    # *

    # * Example: User logs in, SQL logs.

    # *

    # * @param  string|\Stringable  $message

    # * @param  array  $context

    # * @return void'
- name: debug
  visibility: public
  parameters:
  - name: message
  - name: context
    default: '[]'
  comment: '# * Detailed debug information.

    # *

    # * @param  string|\Stringable  $message

    # * @param  array  $context

    # * @return void'
- name: log
  visibility: public
  parameters:
  - name: level
  - name: message
  - name: context
    default: '[]'
  comment: '# * Logs with an arbitrary level.

    # *

    # * @param  mixed  $level

    # * @param  string|\Stringable  $message

    # * @param  array  $context

    # * @return void'
- name: setApplication
  visibility: public
  parameters:
  - name: app
  comment: '# * Set the application instance used by the manager.

    # *

    # * @param  \Illuminate\Contracts\Foundation\Application  $app

    # * @return $this'
- name: __call
  visibility: public
  parameters:
  - name: method
  - name: parameters
  comment: '# * Dynamically call the default driver instance.

    # *

    # * @param  string  $method

    # * @param  array  $parameters

    # * @return mixed'
traits:
- Closure
- Illuminate\Support\Str
- InvalidArgumentException
- Monolog\Formatter\LineFormatter
- Monolog\Handler\ErrorLogHandler
- Monolog\Handler\FingersCrossedHandler
- Monolog\Handler\FormattableHandlerInterface
- Monolog\Handler\HandlerInterface
- Monolog\Handler\RotatingFileHandler
- Monolog\Handler\SlackWebhookHandler
- Monolog\Handler\StreamHandler
- Monolog\Handler\SyslogHandler
- Monolog\Handler\WhatFailureGroupHandler
- Monolog\Processor\ProcessorInterface
- Monolog\Processor\PsrLogMessageProcessor
- Psr\Log\LoggerInterface
- Throwable
- ParsesLogConfiguration
interfaces:
- LoggerInterface
