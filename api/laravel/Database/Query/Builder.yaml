name: Builder
class_comment: null
dependencies:
- name: BackedEnum
  type: class
  source: BackedEnum
- name: CarbonPeriod
  type: class
  source: Carbon\CarbonPeriod
- name: Closure
  type: class
  source: Closure
- name: DateTimeInterface
  type: class
  source: DateTimeInterface
- name: BuilderContract
  type: class
  source: Illuminate\Contracts\Database\Query\Builder
- name: ConditionExpression
  type: class
  source: Illuminate\Contracts\Database\Query\ConditionExpression
- name: ExpressionContract
  type: class
  source: Illuminate\Contracts\Database\Query\Expression
- name: Arrayable
  type: class
  source: Illuminate\Contracts\Support\Arrayable
- name: BuildsQueries
  type: class
  source: Illuminate\Database\Concerns\BuildsQueries
- name: ExplainsQueries
  type: class
  source: Illuminate\Database\Concerns\ExplainsQueries
- name: ConnectionInterface
  type: class
  source: Illuminate\Database\ConnectionInterface
- name: EloquentBuilder
  type: class
  source: Illuminate\Database\Eloquent\Builder
- name: Relation
  type: class
  source: Illuminate\Database\Eloquent\Relations\Relation
- name: Grammar
  type: class
  source: Illuminate\Database\Query\Grammars\Grammar
- name: Processor
  type: class
  source: Illuminate\Database\Query\Processors\Processor
- name: Paginator
  type: class
  source: Illuminate\Pagination\Paginator
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Collection
  type: class
  source: Illuminate\Support\Collection
- name: LazyCollection
  type: class
  source: Illuminate\Support\LazyCollection
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: ForwardsCalls
  type: class
  source: Illuminate\Support\Traits\ForwardsCalls
- name: Macroable
  type: class
  source: Illuminate\Support\Traits\Macroable
- name: InvalidArgumentException
  type: class
  source: InvalidArgumentException
- name: LogicException
  type: class
  source: LogicException
- name: RuntimeException
  type: class
  source: RuntimeException
- name: UnitEnum
  type: class
  source: UnitEnum
properties:
- name: connection
  visibility: public
  comment: "# @use \\Illuminate\\Database\\Concerns\\BuildsQueries<object> */\n# use\
    \ BuildsQueries, ExplainsQueries, ForwardsCalls, Macroable {\n# __call as macroCall;\n\
    # }\n# \n# /**\n# * The database connection instance.\n# *\n# * @var \\Illuminate\\\
    Database\\ConnectionInterface"
- name: grammar
  visibility: public
  comment: '# * The database query grammar instance.

    # *

    # * @var \Illuminate\Database\Query\Grammars\Grammar'
- name: processor
  visibility: public
  comment: '# * The database query post processor instance.

    # *

    # * @var \Illuminate\Database\Query\Processors\Processor'
- name: bindings
  visibility: public
  comment: '# * The current query value bindings.

    # *

    # * @var array'
- name: aggregate
  visibility: public
  comment: '# * An aggregate function and column to be run.

    # *

    # * @var array'
- name: columns
  visibility: public
  comment: '# * The columns that should be returned.

    # *

    # * @var array|null'
- name: distinct
  visibility: public
  comment: '# * Indicates if the query returns distinct results.

    # *

    # * Occasionally contains the columns that should be distinct.

    # *

    # * @var bool|array'
- name: from
  visibility: public
  comment: '# * The table which the query is targeting.

    # *

    # * @var \Illuminate\Database\Query\Expression|string'
- name: indexHint
  visibility: public
  comment: '# * The index hint for the query.

    # *

    # * @var \Illuminate\Database\Query\IndexHint'
- name: joins
  visibility: public
  comment: '# * The table joins for the query.

    # *

    # * @var array'
- name: wheres
  visibility: public
  comment: '# * The where constraints for the query.

    # *

    # * @var array'
- name: groups
  visibility: public
  comment: '# * The groupings for the query.

    # *

    # * @var array'
- name: havings
  visibility: public
  comment: '# * The having constraints for the query.

    # *

    # * @var array'
- name: orders
  visibility: public
  comment: '# * The orderings for the query.

    # *

    # * @var array'
- name: limit
  visibility: public
  comment: '# * The maximum number of records to return.

    # *

    # * @var int'
- name: groupLimit
  visibility: public
  comment: '# * The maximum number of records to return per group.

    # *

    # * @var array'
- name: offset
  visibility: public
  comment: '# * The number of records to skip.

    # *

    # * @var int'
- name: unions
  visibility: public
  comment: '# * The query union statements.

    # *

    # * @var array'
- name: unionLimit
  visibility: public
  comment: '# * The maximum number of union records to return.

    # *

    # * @var int'
- name: unionOffset
  visibility: public
  comment: '# * The number of union records to skip.

    # *

    # * @var int'
- name: unionOrders
  visibility: public
  comment: '# * The orderings for the union query.

    # *

    # * @var array'
- name: lock
  visibility: public
  comment: '# * Indicates whether row locking is being used.

    # *

    # * @var string|bool'
- name: beforeQueryCallbacks
  visibility: public
  comment: '# * The callbacks that should be invoked before the query is executed.

    # *

    # * @var array'
- name: afterQueryCallbacks
  visibility: protected
  comment: '# * The callbacks that should be invoked after retrieving data from the
    database.

    # *

    # * @var array'
- name: operators
  visibility: public
  comment: '# * All of the available clause operators.

    # *

    # * @var string[]'
- name: bitwiseOperators
  visibility: public
  comment: '# * All of the available bitwise operators.

    # *

    # * @var string[]'
- name: useWritePdo
  visibility: public
  comment: '# * Whether to use write pdo for the select.

    # *

    # * @var bool'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: connection
  - name: grammar
    default: 'null'
  - name: processor
    default: 'null'
  comment: "# @use \\Illuminate\\Database\\Concerns\\BuildsQueries<object> */\n# use\
    \ BuildsQueries, ExplainsQueries, ForwardsCalls, Macroable {\n# __call as macroCall;\n\
    # }\n# \n# /**\n# * The database connection instance.\n# *\n# * @var \\Illuminate\\\
    Database\\ConnectionInterface\n# */\n# public $connection;\n# \n# /**\n# * The\
    \ database query grammar instance.\n# *\n# * @var \\Illuminate\\Database\\Query\\\
    Grammars\\Grammar\n# */\n# public $grammar;\n# \n# /**\n# * The database query\
    \ post processor instance.\n# *\n# * @var \\Illuminate\\Database\\Query\\Processors\\\
    Processor\n# */\n# public $processor;\n# \n# /**\n# * The current query value\
    \ bindings.\n# *\n# * @var array\n# */\n# public $bindings = [\n# 'select' =>\
    \ [],\n# 'from' => [],\n# 'join' => [],\n# 'where' => [],\n# 'groupBy' => [],\n\
    # 'having' => [],\n# 'order' => [],\n# 'union' => [],\n# 'unionOrder' => [],\n\
    # ];\n# \n# /**\n# * An aggregate function and column to be run.\n# *\n# * @var\
    \ array\n# */\n# public $aggregate;\n# \n# /**\n# * The columns that should be\
    \ returned.\n# *\n# * @var array|null\n# */\n# public $columns;\n# \n# /**\n#\
    \ * Indicates if the query returns distinct results.\n# *\n# * Occasionally contains\
    \ the columns that should be distinct.\n# *\n# * @var bool|array\n# */\n# public\
    \ $distinct = false;\n# \n# /**\n# * The table which the query is targeting.\n\
    # *\n# * @var \\Illuminate\\Database\\Query\\Expression|string\n# */\n# public\
    \ $from;\n# \n# /**\n# * The index hint for the query.\n# *\n# * @var \\Illuminate\\\
    Database\\Query\\IndexHint\n# */\n# public $indexHint;\n# \n# /**\n# * The table\
    \ joins for the query.\n# *\n# * @var array\n# */\n# public $joins;\n# \n# /**\n\
    # * The where constraints for the query.\n# *\n# * @var array\n# */\n# public\
    \ $wheres = [];\n# \n# /**\n# * The groupings for the query.\n# *\n# * @var array\n\
    # */\n# public $groups;\n# \n# /**\n# * The having constraints for the query.\n\
    # *\n# * @var array\n# */\n# public $havings;\n# \n# /**\n# * The orderings for\
    \ the query.\n# *\n# * @var array\n# */\n# public $orders;\n# \n# /**\n# * The\
    \ maximum number of records to return.\n# *\n# * @var int\n# */\n# public $limit;\n\
    # \n# /**\n# * The maximum number of records to return per group.\n# *\n# * @var\
    \ array\n# */\n# public $groupLimit;\n# \n# /**\n# * The number of records to\
    \ skip.\n# *\n# * @var int\n# */\n# public $offset;\n# \n# /**\n# * The query\
    \ union statements.\n# *\n# * @var array\n# */\n# public $unions;\n# \n# /**\n\
    # * The maximum number of union records to return.\n# *\n# * @var int\n# */\n\
    # public $unionLimit;\n# \n# /**\n# * The number of union records to skip.\n#\
    \ *\n# * @var int\n# */\n# public $unionOffset;\n# \n# /**\n# * The orderings\
    \ for the union query.\n# *\n# * @var array\n# */\n# public $unionOrders;\n# \n\
    # /**\n# * Indicates whether row locking is being used.\n# *\n# * @var string|bool\n\
    # */\n# public $lock;\n# \n# /**\n# * The callbacks that should be invoked before\
    \ the query is executed.\n# *\n# * @var array\n# */\n# public $beforeQueryCallbacks\
    \ = [];\n# \n# /**\n# * The callbacks that should be invoked after retrieving\
    \ data from the database.\n# *\n# * @var array\n# */\n# protected $afterQueryCallbacks\
    \ = [];\n# \n# /**\n# * All of the available clause operators.\n# *\n# * @var\
    \ string[]\n# */\n# public $operators = [\n# '=', '<', '>', '<=', '>=', '<>',\
    \ '!=', '<=>',\n# 'like', 'like binary', 'not like', 'ilike',\n# '&', '|', '^',\
    \ '<<', '>>', '&~', 'is', 'is not',\n# 'rlike', 'not rlike', 'regexp', 'not regexp',\n\
    # '~', '~*', '!~', '!~*', 'similar to',\n# 'not similar to', 'not ilike', '~~*',\
    \ '!~~*',\n# ];\n# \n# /**\n# * All of the available bitwise operators.\n# *\n\
    # * @var string[]\n# */\n# public $bitwiseOperators = [\n# '&', '|', '^', '<<',\
    \ '>>', '&~',\n# ];\n# \n# /**\n# * Whether to use write pdo for the select.\n\
    # *\n# * @var bool\n# */\n# public $useWritePdo = false;\n# \n# /**\n# * Create\
    \ a new query builder instance.\n# *\n# * @param  \\Illuminate\\Database\\ConnectionInterface\
    \  $connection\n# * @param  \\Illuminate\\Database\\Query\\Grammars\\Grammar|null\
    \  $grammar\n# * @param  \\Illuminate\\Database\\Query\\Processors\\Processor|null\
    \  $processor\n# * @return void"
- name: select
  visibility: public
  parameters:
  - name: columns
    default: '[''*'']'
  comment: '# * Set the columns to be selected.

    # *

    # * @param  array|mixed  $columns

    # * @return $this'
- name: selectSub
  visibility: public
  parameters:
  - name: query
  - name: as
  comment: '# * Add a subselect expression to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @param  string  $as

    # * @return $this

    # *

    # * @throws \InvalidArgumentException'
- name: selectRaw
  visibility: public
  parameters:
  - name: expression
  - name: bindings
    default: '[]'
  comment: '# * Add a new "raw" select expression to the query.

    # *

    # * @param  string  $expression

    # * @param  array  $bindings

    # * @return $this'
- name: fromSub
  visibility: public
  parameters:
  - name: query
  - name: as
  comment: '# * Makes "from" fetch from a subquery.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @param  string  $as

    # * @return $this

    # *

    # * @throws \InvalidArgumentException'
- name: fromRaw
  visibility: public
  parameters:
  - name: expression
  - name: bindings
    default: '[]'
  comment: '# * Add a raw from clause to the query.

    # *

    # * @param  string  $expression

    # * @param  mixed  $bindings

    # * @return $this'
- name: createSub
  visibility: protected
  parameters:
  - name: query
  comment: '# * Creates a subquery and parse it.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @return array'
- name: parseSub
  visibility: protected
  parameters:
  - name: query
  comment: '# * Parse the subquery into SQL and bindings.

    # *

    # * @param  mixed  $query

    # * @return array

    # *

    # * @throws \InvalidArgumentException'
- name: prependDatabaseNameIfCrossDatabaseQuery
  visibility: protected
  parameters:
  - name: query
  comment: '# * Prepend the database name if the given query is on another database.

    # *

    # * @param  mixed  $query

    # * @return mixed'
- name: addSelect
  visibility: public
  parameters:
  - name: column
  comment: '# * Add a new select column to the query.

    # *

    # * @param  array|mixed  $column

    # * @return $this'
- name: distinct
  visibility: public
  parameters: []
  comment: '# * Force the query to only return distinct results.

    # *

    # * @return $this'
- name: from
  visibility: public
  parameters:
  - name: table
  - name: as
    default: 'null'
  comment: '# * Set the table which the query is targeting.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|\Illuminate\Contracts\Database\Query\Expression|string  $table

    # * @param  string|null  $as

    # * @return $this'
- name: useIndex
  visibility: public
  parameters:
  - name: index
  comment: '# * Add an index hint to suggest a query index.

    # *

    # * @param  string  $index

    # * @return $this'
- name: forceIndex
  visibility: public
  parameters:
  - name: index
  comment: '# * Add an index hint to force a query index.

    # *

    # * @param  string  $index

    # * @return $this'
- name: ignoreIndex
  visibility: public
  parameters:
  - name: index
  comment: '# * Add an index hint to ignore a query index.

    # *

    # * @param  string  $index

    # * @return $this'
- name: join
  visibility: public
  parameters:
  - name: table
  - name: first
  - name: operator
    default: 'null'
  - name: second
    default: 'null'
  - name: type
    default: '''inner'''
  - name: where
    default: 'false'
  comment: '# * Add a join clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $table

    # * @param  \Closure|\Illuminate\Contracts\Database\Query\Expression|string  $first

    # * @param  string|null  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|null  $second

    # * @param  string  $type

    # * @param  bool  $where

    # * @return $this'
- name: joinWhere
  visibility: public
  parameters:
  - name: table
  - name: first
  - name: operator
  - name: second
  - name: type
    default: '''inner'''
  comment: '# * Add a "join where" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $table

    # * @param  \Closure|\Illuminate\Contracts\Database\Query\Expression|string  $first

    # * @param  string  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $second

    # * @param  string  $type

    # * @return $this'
- name: joinSub
  visibility: public
  parameters:
  - name: query
  - name: as
  - name: first
  - name: operator
    default: 'null'
  - name: second
    default: 'null'
  - name: type
    default: '''inner'''
  - name: where
    default: 'false'
  comment: '# * Add a subquery join clause to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @param  string  $as

    # * @param  \Closure|\Illuminate\Contracts\Database\Query\Expression|string  $first

    # * @param  string|null  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|null  $second

    # * @param  string  $type

    # * @param  bool  $where

    # * @return $this

    # *

    # * @throws \InvalidArgumentException'
- name: joinLateral
  visibility: public
  parameters:
  - name: query
  - name: as
  - name: type
    default: '''inner'''
  comment: '# * Add a lateral join clause to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @param  string  $as

    # * @param  string  $type

    # * @return $this'
- name: leftJoinLateral
  visibility: public
  parameters:
  - name: query
  - name: as
  comment: '# * Add a lateral left join to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @param  string  $as

    # * @return $this'
- name: leftJoin
  visibility: public
  parameters:
  - name: table
  - name: first
  - name: operator
    default: 'null'
  - name: second
    default: 'null'
  comment: '# * Add a left join to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $table

    # * @param  \Closure|\Illuminate\Contracts\Database\Query\Expression|string  $first

    # * @param  string|null  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|null  $second

    # * @return $this'
- name: leftJoinWhere
  visibility: public
  parameters:
  - name: table
  - name: first
  - name: operator
  - name: second
  comment: '# * Add a "join where" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $table

    # * @param  \Closure|\Illuminate\Contracts\Database\Query\Expression|string  $first

    # * @param  string  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|null  $second

    # * @return $this'
- name: leftJoinSub
  visibility: public
  parameters:
  - name: query
  - name: as
  - name: first
  - name: operator
    default: 'null'
  - name: second
    default: 'null'
  comment: '# * Add a subquery left join to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @param  string  $as

    # * @param  \Closure|\Illuminate\Contracts\Database\Query\Expression|string  $first

    # * @param  string|null  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|null  $second

    # * @return $this'
- name: rightJoin
  visibility: public
  parameters:
  - name: table
  - name: first
  - name: operator
    default: 'null'
  - name: second
    default: 'null'
  comment: '# * Add a right join to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $table

    # * @param  \Closure|string  $first

    # * @param  string|null  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|null  $second

    # * @return $this'
- name: rightJoinWhere
  visibility: public
  parameters:
  - name: table
  - name: first
  - name: operator
  - name: second
  comment: '# * Add a "right join where" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $table

    # * @param  \Closure|\Illuminate\Contracts\Database\Query\Expression|string  $first

    # * @param  string  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $second

    # * @return $this'
- name: rightJoinSub
  visibility: public
  parameters:
  - name: query
  - name: as
  - name: first
  - name: operator
    default: 'null'
  - name: second
    default: 'null'
  comment: '# * Add a subquery right join to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @param  string  $as

    # * @param  \Closure|\Illuminate\Contracts\Database\Query\Expression|string  $first

    # * @param  string|null  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|null  $second

    # * @return $this'
- name: crossJoin
  visibility: public
  parameters:
  - name: table
  - name: first
    default: 'null'
  - name: operator
    default: 'null'
  - name: second
    default: 'null'
  comment: '# * Add a "cross join" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $table

    # * @param  \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null  $first

    # * @param  string|null  $operator

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|null  $second

    # * @return $this'
- name: crossJoinSub
  visibility: public
  parameters:
  - name: query
  - name: as
  comment: '# * Add a subquery cross join to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @param  string  $as

    # * @return $this'
- name: newJoinClause
  visibility: protected
  parameters:
  - name: parentQuery
  - name: type
  - name: table
  comment: '# * Get a new join clause.

    # *

    # * @param  \Illuminate\Database\Query\Builder  $parentQuery

    # * @param  string  $type

    # * @param  string  $table

    # * @return \Illuminate\Database\Query\JoinClause'
- name: newJoinLateralClause
  visibility: protected
  parameters:
  - name: parentQuery
  - name: type
  - name: table
  comment: '# * Get a new join lateral clause.

    # *

    # * @param  \Illuminate\Database\Query\Builder  $parentQuery

    # * @param  string  $type

    # * @param  string  $table

    # * @return \Illuminate\Database\Query\JoinLateralClause'
- name: mergeWheres
  visibility: public
  parameters:
  - name: wheres
  - name: bindings
  comment: '# * Merge an array of where clauses and bindings.

    # *

    # * @param  array  $wheres

    # * @param  array  $bindings

    # * @return $this'
- name: where
  visibility: public
  parameters:
  - name: column
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a basic where clause to the query.

    # *

    # * @param  \Closure|string|array|\Illuminate\Contracts\Database\Query\Expression  $column

    # * @param  mixed  $operator

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @return $this'
- name: addArrayOfWheres
  visibility: protected
  parameters:
  - name: column
  - name: boolean
  - name: method
    default: '''where'''
  comment: '# * Add an array of where clauses to the query.

    # *

    # * @param  array  $column

    # * @param  string  $boolean

    # * @param  string  $method

    # * @return $this'
- name: prepareValueAndOperator
  visibility: public
  parameters:
  - name: value
  - name: operator
  - name: useDefault
    default: 'false'
  comment: '# * Prepare the value and operator for a where clause.

    # *

    # * @param  string  $value

    # * @param  string  $operator

    # * @param  bool  $useDefault

    # * @return array

    # *

    # * @throws \InvalidArgumentException'
- name: invalidOperatorAndValue
  visibility: protected
  parameters:
  - name: operator
  - name: value
  comment: '# * Determine if the given operator and value combination is legal.

    # *

    # * Prevents using Null values with invalid operators.

    # *

    # * @param  string  $operator

    # * @param  mixed  $value

    # * @return bool'
- name: invalidOperator
  visibility: protected
  parameters:
  - name: operator
  comment: '# * Determine if the given operator is supported.

    # *

    # * @param  string  $operator

    # * @return bool'
- name: isBitwiseOperator
  visibility: protected
  parameters:
  - name: operator
  comment: '# * Determine if the operator is a bitwise operator.

    # *

    # * @param  string  $operator

    # * @return bool'
- name: orWhere
  visibility: public
  parameters:
  - name: column
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  comment: '# * Add an "or where" clause to the query.

    # *

    # * @param  \Closure|string|array|\Illuminate\Contracts\Database\Query\Expression  $column

    # * @param  mixed  $operator

    # * @param  mixed  $value

    # * @return $this'
- name: whereNot
  visibility: public
  parameters:
  - name: column
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a basic "where not" clause to the query.

    # *

    # * @param  \Closure|string|array|\Illuminate\Contracts\Database\Query\Expression  $column

    # * @param  mixed  $operator

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereNot
  visibility: public
  parameters:
  - name: column
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  comment: '# * Add an "or where not" clause to the query.

    # *

    # * @param  \Closure|string|array|\Illuminate\Contracts\Database\Query\Expression  $column

    # * @param  mixed  $operator

    # * @param  mixed  $value

    # * @return $this'
- name: whereColumn
  visibility: public
  parameters:
  - name: first
  - name: operator
    default: 'null'
  - name: second
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where" clause comparing two columns to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|array  $first

    # * @param  string|null  $operator

    # * @param  string|null  $second

    # * @param  string|null  $boolean

    # * @return $this'
- name: orWhereColumn
  visibility: public
  parameters:
  - name: first
  - name: operator
    default: 'null'
  - name: second
    default: 'null'
  comment: '# * Add an "or where" clause comparing two columns to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string|array  $first

    # * @param  string|null  $operator

    # * @param  string|null  $second

    # * @return $this'
- name: whereRaw
  visibility: public
  parameters:
  - name: sql
  - name: bindings
    default: '[]'
  - name: boolean
    default: '''and'''
  comment: '# * Add a raw where clause to the query.

    # *

    # * @param  string  $sql

    # * @param  mixed  $bindings

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereRaw
  visibility: public
  parameters:
  - name: sql
  - name: bindings
    default: '[]'
  comment: '# * Add a raw or where clause to the query.

    # *

    # * @param  string  $sql

    # * @param  mixed  $bindings

    # * @return $this'
- name: whereIn
  visibility: public
  parameters:
  - name: column
  - name: values
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a "where in" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  mixed  $values

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: orWhereIn
  visibility: public
  parameters:
  - name: column
  - name: values
  comment: '# * Add an "or where in" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  mixed  $values

    # * @return $this'
- name: whereNotIn
  visibility: public
  parameters:
  - name: column
  - name: values
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where not in" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  mixed  $values

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereNotIn
  visibility: public
  parameters:
  - name: column
  - name: values
  comment: '# * Add an "or where not in" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  mixed  $values

    # * @return $this'
- name: whereIntegerInRaw
  visibility: public
  parameters:
  - name: column
  - name: values
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a "where in raw" clause for integer values to the query.

    # *

    # * @param  string  $column

    # * @param  \Illuminate\Contracts\Support\Arrayable|array  $values

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: orWhereIntegerInRaw
  visibility: public
  parameters:
  - name: column
  - name: values
  comment: '# * Add an "or where in raw" clause for integer values to the query.

    # *

    # * @param  string  $column

    # * @param  \Illuminate\Contracts\Support\Arrayable|array  $values

    # * @return $this'
- name: whereIntegerNotInRaw
  visibility: public
  parameters:
  - name: column
  - name: values
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where not in raw" clause for integer values to the query.

    # *

    # * @param  string  $column

    # * @param  \Illuminate\Contracts\Support\Arrayable|array  $values

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereIntegerNotInRaw
  visibility: public
  parameters:
  - name: column
  - name: values
  comment: '# * Add an "or where not in raw" clause for integer values to the query.

    # *

    # * @param  string  $column

    # * @param  \Illuminate\Contracts\Support\Arrayable|array  $values

    # * @return $this'
- name: whereNull
  visibility: public
  parameters:
  - name: columns
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a "where null" clause to the query.

    # *

    # * @param  string|array|\Illuminate\Contracts\Database\Query\Expression  $columns

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: orWhereNull
  visibility: public
  parameters:
  - name: column
  comment: '# * Add an "or where null" clause to the query.

    # *

    # * @param  string|array|\Illuminate\Contracts\Database\Query\Expression  $column

    # * @return $this'
- name: whereNotNull
  visibility: public
  parameters:
  - name: columns
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where not null" clause to the query.

    # *

    # * @param  string|array|\Illuminate\Contracts\Database\Query\Expression  $columns

    # * @param  string  $boolean

    # * @return $this'
- name: whereBetween
  visibility: public
  parameters:
  - name: column
  - name: values
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a where between statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  iterable  $values

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: whereBetweenColumns
  visibility: public
  parameters:
  - name: column
  - name: values
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a where between statement using columns to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  array  $values

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: orWhereBetween
  visibility: public
  parameters:
  - name: column
  - name: values
  comment: '# * Add an or where between statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  iterable  $values

    # * @return $this'
- name: orWhereBetweenColumns
  visibility: public
  parameters:
  - name: column
  - name: values
  comment: '# * Add an or where between statement using columns to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  array  $values

    # * @return $this'
- name: whereNotBetween
  visibility: public
  parameters:
  - name: column
  - name: values
  - name: boolean
    default: '''and'''
  comment: '# * Add a where not between statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  iterable  $values

    # * @param  string  $boolean

    # * @return $this'
- name: whereNotBetweenColumns
  visibility: public
  parameters:
  - name: column
  - name: values
  - name: boolean
    default: '''and'''
  comment: '# * Add a where not between statement using columns to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  array  $values

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereNotBetween
  visibility: public
  parameters:
  - name: column
  - name: values
  comment: '# * Add an or where not between statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  iterable  $values

    # * @return $this'
- name: orWhereNotBetweenColumns
  visibility: public
  parameters:
  - name: column
  - name: values
  comment: '# * Add an or where not between statement using columns to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  array  $values

    # * @return $this'
- name: orWhereNotNull
  visibility: public
  parameters:
  - name: column
  comment: '# * Add an "or where not null" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @return $this'
- name: whereDate
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where date" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|null  $operator

    # * @param  \DateTimeInterface|string|null  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereDate
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  comment: '# * Add an "or where date" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|null  $operator

    # * @param  \DateTimeInterface|string|null  $value

    # * @return $this'
- name: whereTime
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where time" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|null  $operator

    # * @param  \DateTimeInterface|string|null  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereTime
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  comment: '# * Add an "or where time" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|null  $operator

    # * @param  \DateTimeInterface|string|null  $value

    # * @return $this'
- name: whereDay
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where day" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|int|null  $operator

    # * @param  \DateTimeInterface|string|int|null  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereDay
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  comment: '# * Add an "or where day" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|int|null  $operator

    # * @param  \DateTimeInterface|string|int|null  $value

    # * @return $this'
- name: whereMonth
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where month" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|int|null  $operator

    # * @param  \DateTimeInterface|string|int|null  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereMonth
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  comment: '# * Add an "or where month" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|int|null  $operator

    # * @param  \DateTimeInterface|string|int|null  $value

    # * @return $this'
- name: whereYear
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where year" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|int|null  $operator

    # * @param  \DateTimeInterface|string|int|null  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereYear
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  comment: '# * Add an "or where year" statement to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  \DateTimeInterface|string|int|null  $operator

    # * @param  \DateTimeInterface|string|int|null  $value

    # * @return $this'
- name: addDateBasedWhere
  visibility: protected
  parameters:
  - name: type
  - name: column
  - name: operator
  - name: value
  - name: boolean
    default: '''and'''
  comment: '# * Add a date based (year, month, day, time) statement to the query.

    # *

    # * @param  string  $type

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  string  $operator

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @return $this'
- name: whereNested
  visibility: public
  parameters:
  - name: callback
  - name: boolean
    default: '''and'''
  comment: '# * Add a nested where statement to the query.

    # *

    # * @param  \Closure  $callback

    # * @param  string  $boolean

    # * @return $this'
- name: forNestedWhere
  visibility: public
  parameters: []
  comment: '# * Create a new query instance for nested where condition.

    # *

    # * @return \Illuminate\Database\Query\Builder'
- name: addNestedWhereQuery
  visibility: public
  parameters:
  - name: query
  - name: boolean
    default: '''and'''
  comment: '# * Add another query builder as a nested where to the query builder.

    # *

    # * @param  \Illuminate\Database\Query\Builder  $query

    # * @param  string  $boolean

    # * @return $this'
- name: whereSub
  visibility: protected
  parameters:
  - name: column
  - name: operator
  - name: callback
  - name: boolean
  comment: '# * Add a full sub-select to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  string  $operator

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>  $callback

    # * @param  string  $boolean

    # * @return $this'
- name: whereExists
  visibility: public
  parameters:
  - name: callback
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add an exists clause to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>  $callback

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: orWhereExists
  visibility: public
  parameters:
  - name: callback
  - name: not
    default: 'false'
  comment: '# * Add an or exists clause to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>  $callback

    # * @param  bool  $not

    # * @return $this'
- name: whereNotExists
  visibility: public
  parameters:
  - name: callback
  - name: boolean
    default: '''and'''
  comment: '# * Add a where not exists clause to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>  $callback

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereNotExists
  visibility: public
  parameters:
  - name: callback
  comment: '# * Add a where not exists clause to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>  $callback

    # * @return $this'
- name: addWhereExistsQuery
  visibility: public
  parameters:
  - name: query
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add an exists clause to the query.

    # *

    # * @param  \Illuminate\Database\Query\Builder  $query

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: whereRowValues
  visibility: public
  parameters:
  - name: columns
  - name: operator
  - name: values
  - name: boolean
    default: '''and'''
  comment: '# * Adds a where condition using row values.

    # *

    # * @param  array  $columns

    # * @param  string  $operator

    # * @param  array  $values

    # * @param  string  $boolean

    # * @return $this

    # *

    # * @throws \InvalidArgumentException'
- name: orWhereRowValues
  visibility: public
  parameters:
  - name: columns
  - name: operator
  - name: values
  comment: '# * Adds an or where condition using row values.

    # *

    # * @param  array  $columns

    # * @param  string  $operator

    # * @param  array  $values

    # * @return $this'
- name: whereJsonContains
  visibility: public
  parameters:
  - name: column
  - name: value
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a "where JSON contains" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: orWhereJsonContains
  visibility: public
  parameters:
  - name: column
  - name: value
  comment: '# * Add an "or where JSON contains" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $value

    # * @return $this'
- name: whereJsonDoesntContain
  visibility: public
  parameters:
  - name: column
  - name: value
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where JSON not contains" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereJsonDoesntContain
  visibility: public
  parameters:
  - name: column
  - name: value
  comment: '# * Add an "or where JSON not contains" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $value

    # * @return $this'
- name: whereJsonOverlaps
  visibility: public
  parameters:
  - name: column
  - name: value
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a "where JSON overlaps" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: orWhereJsonOverlaps
  visibility: public
  parameters:
  - name: column
  - name: value
  comment: '# * Add an "or where JSON overlaps" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $value

    # * @return $this'
- name: whereJsonDoesntOverlap
  visibility: public
  parameters:
  - name: column
  - name: value
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where JSON not overlap" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereJsonDoesntOverlap
  visibility: public
  parameters:
  - name: column
  - name: value
  comment: '# * Add an "or where JSON not overlap" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $value

    # * @return $this'
- name: whereJsonContainsKey
  visibility: public
  parameters:
  - name: column
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a clause that determines if a JSON path exists to the query.

    # *

    # * @param  string  $column

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: orWhereJsonContainsKey
  visibility: public
  parameters:
  - name: column
  comment: '# * Add an "or" clause that determines if a JSON path exists to the query.

    # *

    # * @param  string  $column

    # * @return $this'
- name: whereJsonDoesntContainKey
  visibility: public
  parameters:
  - name: column
  - name: boolean
    default: '''and'''
  comment: '# * Add a clause that determines if a JSON path does not exist to the
    query.

    # *

    # * @param  string  $column

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereJsonDoesntContainKey
  visibility: public
  parameters:
  - name: column
  comment: '# * Add an "or" clause that determines if a JSON path does not exist to
    the query.

    # *

    # * @param  string  $column

    # * @return $this'
- name: whereJsonLength
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where JSON length" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $operator

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereJsonLength
  visibility: public
  parameters:
  - name: column
  - name: operator
  - name: value
    default: 'null'
  comment: '# * Add an "or where JSON length" clause to the query.

    # *

    # * @param  string  $column

    # * @param  mixed  $operator

    # * @param  mixed  $value

    # * @return $this'
- name: dynamicWhere
  visibility: public
  parameters:
  - name: method
  - name: parameters
  comment: '# * Handles dynamic "where" clauses to the query.

    # *

    # * @param  string  $method

    # * @param  array  $parameters

    # * @return $this'
- name: addDynamic
  visibility: protected
  parameters:
  - name: segment
  - name: connector
  - name: parameters
  - name: index
  comment: '# * Add a single dynamic where clause statement to the query.

    # *

    # * @param  string  $segment

    # * @param  string  $connector

    # * @param  array  $parameters

    # * @param  int  $index

    # * @return void'
- name: whereFullText
  visibility: public
  parameters:
  - name: columns
  - name: value
  - name: options
    default: '[]'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where fulltext" clause to the query.

    # *

    # * @param  string|string[]  $columns

    # * @param  string  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereFullText
  visibility: public
  parameters:
  - name: columns
  - name: value
  - name: options
    default: '[]'
  comment: '# * Add a "or where fulltext" clause to the query.

    # *

    # * @param  string|string[]  $columns

    # * @param  string  $value

    # * @return $this'
- name: whereAll
  visibility: public
  parameters:
  - name: columns
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "where" clause to the query for multiple columns with "and"
    conditions between them.

    # *

    # * @param  string[]  $columns

    # * @param  mixed  $operator

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereAll
  visibility: public
  parameters:
  - name: columns
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  comment: '# * Add an "or where" clause to the query for multiple columns with "and"
    conditions between them.

    # *

    # * @param  string[]  $columns

    # * @param  string  $operator

    # * @param  mixed  $value

    # * @return $this'
- name: whereAny
  visibility: public
  parameters:
  - name: columns
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add an "where" clause to the query for multiple columns with "or"
    conditions between them.

    # *

    # * @param  string[]  $columns

    # * @param  string  $operator

    # * @param  mixed  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orWhereAny
  visibility: public
  parameters:
  - name: columns
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  comment: '# * Add an "or where" clause to the query for multiple columns with "or"
    conditions between them.

    # *

    # * @param  string[]  $columns

    # * @param  string  $operator

    # * @param  mixed  $value

    # * @return $this'
- name: groupBy
  visibility: public
  parameters:
  - name: '...$groups'
  comment: '# * Add a "group by" clause to the query.

    # *

    # * @param  array|\Illuminate\Contracts\Database\Query\Expression|string  ...$groups

    # * @return $this'
- name: groupByRaw
  visibility: public
  parameters:
  - name: sql
  - name: bindings
    default: '[]'
  comment: '# * Add a raw groupBy clause to the query.

    # *

    # * @param  string  $sql

    # * @param  array  $bindings

    # * @return $this'
- name: having
  visibility: public
  parameters:
  - name: column
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  - name: boolean
    default: '''and'''
  comment: '# * Add a "having" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|\Closure|string  $column

    # * @param  string|int|float|null  $operator

    # * @param  string|int|float|null  $value

    # * @param  string  $boolean

    # * @return $this'
- name: orHaving
  visibility: public
  parameters:
  - name: column
  - name: operator
    default: 'null'
  - name: value
    default: 'null'
  comment: '# * Add an "or having" clause to the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|\Closure|string  $column

    # * @param  string|int|float|null  $operator

    # * @param  string|int|float|null  $value

    # * @return $this'
- name: havingNested
  visibility: public
  parameters:
  - name: callback
  - name: boolean
    default: '''and'''
  comment: '# * Add a nested having statement to the query.

    # *

    # * @param  \Closure  $callback

    # * @param  string  $boolean

    # * @return $this'
- name: addNestedHavingQuery
  visibility: public
  parameters:
  - name: query
  - name: boolean
    default: '''and'''
  comment: '# * Add another query builder as a nested having to the query builder.

    # *

    # * @param  \Illuminate\Database\Query\Builder  $query

    # * @param  string  $boolean

    # * @return $this'
- name: havingNull
  visibility: public
  parameters:
  - name: columns
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a "having null" clause to the query.

    # *

    # * @param  string|array  $columns

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: orHavingNull
  visibility: public
  parameters:
  - name: column
  comment: '# * Add an "or having null" clause to the query.

    # *

    # * @param  string  $column

    # * @return $this'
- name: havingNotNull
  visibility: public
  parameters:
  - name: columns
  - name: boolean
    default: '''and'''
  comment: '# * Add a "having not null" clause to the query.

    # *

    # * @param  string|array  $columns

    # * @param  string  $boolean

    # * @return $this'
- name: orHavingNotNull
  visibility: public
  parameters:
  - name: column
  comment: '# * Add an "or having not null" clause to the query.

    # *

    # * @param  string  $column

    # * @return $this'
- name: havingBetween
  visibility: public
  parameters:
  - name: column
  - name: values
  - name: boolean
    default: '''and'''
  - name: not
    default: 'false'
  comment: '# * Add a "having between " clause to the query.

    # *

    # * @param  string  $column

    # * @param  iterable  $values

    # * @param  string  $boolean

    # * @param  bool  $not

    # * @return $this'
- name: havingRaw
  visibility: public
  parameters:
  - name: sql
  - name: bindings
    default: '[]'
  - name: boolean
    default: '''and'''
  comment: '# * Add a raw having clause to the query.

    # *

    # * @param  string  $sql

    # * @param  array  $bindings

    # * @param  string  $boolean

    # * @return $this'
- name: orHavingRaw
  visibility: public
  parameters:
  - name: sql
  - name: bindings
    default: '[]'
  comment: '# * Add a raw or having clause to the query.

    # *

    # * @param  string  $sql

    # * @param  array  $bindings

    # * @return $this'
- name: orderBy
  visibility: public
  parameters:
  - name: column
  - name: direction
    default: '''asc'''
  comment: '# * Add an "order by" clause to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|\Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  string  $direction

    # * @return $this

    # *

    # * @throws \InvalidArgumentException'
- name: orderByDesc
  visibility: public
  parameters:
  - name: column
  comment: '# * Add a descending "order by" clause to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|\Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @return $this'
- name: latest
  visibility: public
  parameters:
  - name: column
    default: '''created_at'''
  comment: '# * Add an "order by" clause for a timestamp to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @return $this'
- name: oldest
  visibility: public
  parameters:
  - name: column
    default: '''created_at'''
  comment: '# * Add an "order by" clause for a timestamp to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @return $this'
- name: inRandomOrder
  visibility: public
  parameters:
  - name: seed
    default: ''''''
  comment: '# * Put the query''s results in random order.

    # *

    # * @param  string|int  $seed

    # * @return $this'
- name: orderByRaw
  visibility: public
  parameters:
  - name: sql
  - name: bindings
    default: '[]'
  comment: '# * Add a raw "order by" clause to the query.

    # *

    # * @param  string  $sql

    # * @param  array  $bindings

    # * @return $this'
- name: skip
  visibility: public
  parameters:
  - name: value
  comment: '# * Alias to set the "offset" value of the query.

    # *

    # * @param  int  $value

    # * @return $this'
- name: offset
  visibility: public
  parameters:
  - name: value
  comment: '# * Set the "offset" value of the query.

    # *

    # * @param  int  $value

    # * @return $this'
- name: take
  visibility: public
  parameters:
  - name: value
  comment: '# * Alias to set the "limit" value of the query.

    # *

    # * @param  int  $value

    # * @return $this'
- name: limit
  visibility: public
  parameters:
  - name: value
  comment: '# * Set the "limit" value of the query.

    # *

    # * @param  int  $value

    # * @return $this'
- name: groupLimit
  visibility: public
  parameters:
  - name: value
  - name: column
  comment: '# * Add a "group limit" clause to the query.

    # *

    # * @param  int  $value

    # * @param  string  $column

    # * @return $this'
- name: forPage
  visibility: public
  parameters:
  - name: page
  - name: perPage
    default: '15'
  comment: '# * Set the limit and offset for a given page.

    # *

    # * @param  int  $page

    # * @param  int  $perPage

    # * @return $this'
- name: forPageBeforeId
  visibility: public
  parameters:
  - name: perPage
    default: '15'
  - name: lastId
    default: '0'
  - name: column
    default: '''id'''
  comment: '# * Constrain the query to the previous "page" of results before a given
    ID.

    # *

    # * @param  int  $perPage

    # * @param  int|null  $lastId

    # * @param  string  $column

    # * @return $this'
- name: forPageAfterId
  visibility: public
  parameters:
  - name: perPage
    default: '15'
  - name: lastId
    default: '0'
  - name: column
    default: '''id'''
  comment: '# * Constrain the query to the next "page" of results after a given ID.

    # *

    # * @param  int  $perPage

    # * @param  int|null  $lastId

    # * @param  string  $column

    # * @return $this'
- name: reorder
  visibility: public
  parameters:
  - name: column
    default: 'null'
  - name: direction
    default: '''asc'''
  comment: '# * Remove all existing orders and optionally add a new order.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null  $column

    # * @param  string  $direction

    # * @return $this'
- name: removeExistingOrdersFor
  visibility: protected
  parameters:
  - name: column
  comment: '# * Get an array with all orders with a given column removed.

    # *

    # * @param  string  $column

    # * @return array'
- name: union
  visibility: public
  parameters:
  - name: query
  - name: all
    default: 'false'
  comment: '# * Add a union statement to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>  $query

    # * @param  bool  $all

    # * @return $this'
- name: unionAll
  visibility: public
  parameters:
  - name: query
  comment: '# * Add a union all statement to the query.

    # *

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>  $query

    # * @return $this'
- name: lock
  visibility: public
  parameters:
  - name: value
    default: 'true'
  comment: '# * Lock the selected rows in the table.

    # *

    # * @param  string|bool  $value

    # * @return $this'
- name: lockForUpdate
  visibility: public
  parameters: []
  comment: '# * Lock the selected rows in the table for updating.

    # *

    # * @return $this'
- name: sharedLock
  visibility: public
  parameters: []
  comment: '# * Share lock the selected rows in the table.

    # *

    # * @return $this'
- name: beforeQuery
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a closure to be invoked before the query is executed.

    # *

    # * @param  callable  $callback

    # * @return $this'
- name: applyBeforeQueryCallbacks
  visibility: public
  parameters: []
  comment: '# * Invoke the "before query" modification callbacks.

    # *

    # * @return void'
- name: afterQuery
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a closure to be invoked after the query is executed.

    # *

    # * @param  \Closure  $callback

    # * @return $this'
- name: applyAfterQueryCallbacks
  visibility: public
  parameters:
  - name: result
  comment: '# * Invoke the "after query" modification callbacks.

    # *

    # * @param  mixed  $result

    # * @return mixed'
- name: toSql
  visibility: public
  parameters: []
  comment: '# * Get the SQL representation of the query.

    # *

    # * @return string'
- name: toRawSql
  visibility: public
  parameters: []
  comment: '# * Get the raw SQL representation of the query with embedded bindings.

    # *

    # * @return string'
- name: find
  visibility: public
  parameters:
  - name: id
  - name: columns
    default: '[''*'']'
  comment: '# * Execute a query for a single record by ID.

    # *

    # * @param  int|string  $id

    # * @param  array|string  $columns

    # * @return object|null'
- name: findOr
  visibility: public
  parameters:
  - name: id
  - name: columns
    default: '[''*'']'
  - name: callback
    default: 'null'
  comment: '# * Execute a query for a single record by ID or call a callback.

    # *

    # * @template TValue

    # *

    # * @param  mixed  $id

    # * @param  (\Closure(): TValue)|list<string>|string  $columns

    # * @param  (\Closure(): TValue)|null  $callback

    # * @return object|TValue'
- name: value
  visibility: public
  parameters:
  - name: column
  comment: '# * Get a single column''s value from the first result of a query.

    # *

    # * @param  string  $column

    # * @return mixed'
- name: rawValue
  visibility: public
  parameters:
  - name: expression
  - name: bindings
    default: '[]'
  comment: '# * Get a single expression value from the first result of a query.

    # *

    # * @param  string  $expression

    # * @param  array  $bindings

    # * @return mixed'
- name: soleValue
  visibility: public
  parameters:
  - name: column
  comment: '# * Get a single column''s value from the first result of a query if it''s
    the sole matching record.

    # *

    # * @param  string  $column

    # * @return mixed

    # *

    # * @throws \Illuminate\Database\RecordsNotFoundException

    # * @throws \Illuminate\Database\MultipleRecordsFoundException'
- name: get
  visibility: public
  parameters:
  - name: columns
    default: '[''*'']'
  comment: '# * Execute the query as a "select" statement.

    # *

    # * @param  array|string  $columns

    # * @return \Illuminate\Support\Collection'
- name: runSelect
  visibility: protected
  parameters: []
  comment: '# * Run the query as a "select" statement against the connection.

    # *

    # * @return array'
- name: withoutGroupLimitKeys
  visibility: protected
  parameters:
  - name: items
  comment: '# * Remove the group limit keys from the results in the collection.

    # *

    # * @param  \Illuminate\Support\Collection  $items

    # * @return \Illuminate\Support\Collection'
- name: paginate
  visibility: public
  parameters:
  - name: perPage
    default: '15'
  - name: columns
    default: '[''*'']'
  - name: pageName
    default: '''page'''
  - name: page
    default: 'null'
  - name: total
    default: 'null'
  comment: '# * Paginate the given query into a simple paginator.

    # *

    # * @param  int|\Closure  $perPage

    # * @param  array|string  $columns

    # * @param  string  $pageName

    # * @param  int|null  $page

    # * @param  \Closure|int|null  $total

    # * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator'
- name: simplePaginate
  visibility: public
  parameters:
  - name: perPage
    default: '15'
  - name: columns
    default: '[''*'']'
  - name: pageName
    default: '''page'''
  - name: page
    default: 'null'
  comment: '# * Get a paginator only supporting simple next and previous links.

    # *

    # * This is more efficient on larger data-sets, etc.

    # *

    # * @param  int  $perPage

    # * @param  array|string  $columns

    # * @param  string  $pageName

    # * @param  int|null  $page

    # * @return \Illuminate\Contracts\Pagination\Paginator'
- name: cursorPaginate
  visibility: public
  parameters:
  - name: perPage
    default: '15'
  - name: columns
    default: '[''*'']'
  - name: cursorName
    default: '''cursor'''
  - name: cursor
    default: 'null'
  comment: '# * Get a paginator only supporting simple next and previous links.

    # *

    # * This is more efficient on larger data-sets, etc.

    # *

    # * @param  int|null  $perPage

    # * @param  array|string  $columns

    # * @param  string  $cursorName

    # * @param  \Illuminate\Pagination\Cursor|string|null  $cursor

    # * @return \Illuminate\Contracts\Pagination\CursorPaginator'
- name: ensureOrderForCursorPagination
  visibility: protected
  parameters:
  - name: shouldReverse
    default: 'false'
  comment: '# * Ensure the proper order by required for cursor pagination.

    # *

    # * @param  bool  $shouldReverse

    # * @return \Illuminate\Support\Collection'
- name: getCountForPagination
  visibility: public
  parameters:
  - name: columns
    default: '[''*'']'
  comment: '# * Get the count of the total records for the paginator.

    # *

    # * @param  array  $columns

    # * @return int'
- name: runPaginationCountQuery
  visibility: protected
  parameters:
  - name: columns
    default: '[''*'']'
  comment: '# * Run a pagination count query.

    # *

    # * @param  array  $columns

    # * @return array'
- name: cloneForPaginationCount
  visibility: protected
  parameters: []
  comment: '# * Clone the existing query instance for usage in a pagination subquery.

    # *

    # * @return self'
- name: withoutSelectAliases
  visibility: protected
  parameters:
  - name: columns
  comment: '# * Remove the column aliases since they will break count queries.

    # *

    # * @param  array  $columns

    # * @return array'
- name: cursor
  visibility: public
  parameters: []
  comment: '# * Get a lazy collection for the given query.

    # *

    # * @return \Illuminate\Support\LazyCollection'
- name: enforceOrderBy
  visibility: protected
  parameters: []
  comment: '# * Throw an exception if the query doesn''t have an orderBy clause.

    # *

    # * @return void

    # *

    # * @throws \RuntimeException'
- name: pluck
  visibility: public
  parameters:
  - name: column
  - name: key
    default: 'null'
  comment: '# * Get a collection instance containing the values of a given column.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @param  string|null  $key

    # * @return \Illuminate\Support\Collection'
- name: stripTableForPluck
  visibility: protected
  parameters:
  - name: column
  comment: '# * Strip off the table name or alias from a column identifier.

    # *

    # * @param  string  $column

    # * @return string|null'
- name: pluckFromObjectColumn
  visibility: protected
  parameters:
  - name: queryResult
  - name: column
  - name: key
  comment: '# * Retrieve column values from rows represented as objects.

    # *

    # * @param  array  $queryResult

    # * @param  string  $column

    # * @param  string  $key

    # * @return \Illuminate\Support\Collection'
- name: pluckFromArrayColumn
  visibility: protected
  parameters:
  - name: queryResult
  - name: column
  - name: key
  comment: '# * Retrieve column values from rows represented as arrays.

    # *

    # * @param  array  $queryResult

    # * @param  string  $column

    # * @param  string  $key

    # * @return \Illuminate\Support\Collection'
- name: implode
  visibility: public
  parameters:
  - name: column
  - name: glue
    default: ''''''
  comment: '# * Concatenate values of a given column as a string.

    # *

    # * @param  string  $column

    # * @param  string  $glue

    # * @return string'
- name: exists
  visibility: public
  parameters: []
  comment: '# * Determine if any rows exist for the current query.

    # *

    # * @return bool'
- name: doesntExist
  visibility: public
  parameters: []
  comment: '# * Determine if no rows exist for the current query.

    # *

    # * @return bool'
- name: existsOr
  visibility: public
  parameters:
  - name: callback
  comment: '# * Execute the given callback if no rows exist for the current query.

    # *

    # * @param  \Closure  $callback

    # * @return mixed'
- name: doesntExistOr
  visibility: public
  parameters:
  - name: callback
  comment: '# * Execute the given callback if rows exist for the current query.

    # *

    # * @param  \Closure  $callback

    # * @return mixed'
- name: count
  visibility: public
  parameters:
  - name: columns
    default: '''*'''
  comment: '# * Retrieve the "count" result of the query.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $columns

    # * @return int'
- name: min
  visibility: public
  parameters:
  - name: column
  comment: '# * Retrieve the minimum value of a given column.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @return mixed'
- name: max
  visibility: public
  parameters:
  - name: column
  comment: '# * Retrieve the maximum value of a given column.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @return mixed'
- name: sum
  visibility: public
  parameters:
  - name: column
  comment: '# * Retrieve the sum of the values of a given column.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @return mixed'
- name: avg
  visibility: public
  parameters:
  - name: column
  comment: '# * Retrieve the average of the values of a given column.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @return mixed'
- name: average
  visibility: public
  parameters:
  - name: column
  comment: '# * Alias for the "avg" method.

    # *

    # * @param  \Illuminate\Contracts\Database\Query\Expression|string  $column

    # * @return mixed'
- name: aggregate
  visibility: public
  parameters:
  - name: function
  - name: columns
    default: '[''*'']'
  comment: '# * Execute an aggregate function on the database.

    # *

    # * @param  string  $function

    # * @param  array  $columns

    # * @return mixed'
- name: numericAggregate
  visibility: public
  parameters:
  - name: function
  - name: columns
    default: '[''*'']'
  comment: '# * Execute a numeric aggregate function on the database.

    # *

    # * @param  string  $function

    # * @param  array  $columns

    # * @return float|int'
- name: setAggregate
  visibility: protected
  parameters:
  - name: function
  - name: columns
  comment: '# * Set the aggregate property without running the query.

    # *

    # * @param  string  $function

    # * @param  array  $columns

    # * @return $this'
- name: onceWithColumns
  visibility: protected
  parameters:
  - name: columns
  - name: callback
  comment: '# * Execute the given callback while selecting the given columns.

    # *

    # * After running the callback, the columns are reset to the original value.

    # *

    # * @param  array  $columns

    # * @param  callable  $callback

    # * @return mixed'
- name: insert
  visibility: public
  parameters:
  - name: values
  comment: '# * Insert new records into the database.

    # *

    # * @param  array  $values

    # * @return bool'
- name: insertOrIgnore
  visibility: public
  parameters:
  - name: values
  comment: '# * Insert new records into the database while ignoring errors.

    # *

    # * @param  array  $values

    # * @return int'
- name: insertGetId
  visibility: public
  parameters:
  - name: values
  - name: sequence
    default: 'null'
  comment: '# * Insert a new record and get the value of the primary key.

    # *

    # * @param  array  $values

    # * @param  string|null  $sequence

    # * @return int'
- name: insertUsing
  visibility: public
  parameters:
  - name: columns
  - name: query
  comment: '# * Insert new records into the table using a subquery.

    # *

    # * @param  array  $columns

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @return int'
- name: insertOrIgnoreUsing
  visibility: public
  parameters:
  - name: columns
  - name: query
  comment: '# * Insert new records into the table using a subquery while ignoring
    errors.

    # *

    # * @param  array  $columns

    # * @param  \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<*>|string  $query

    # * @return int'
- name: update
  visibility: public
  parameters:
  - name: values
  comment: '# * Update records in the database.

    # *

    # * @param  array  $values

    # * @return int'
- name: updateFrom
  visibility: public
  parameters:
  - name: values
  comment: '# * Update records in a PostgreSQL database using the update from syntax.

    # *

    # * @param  array  $values

    # * @return int'
- name: updateOrInsert
  visibility: public
  parameters:
  - name: attributes
  - name: values
    default: '[]'
  comment: '# * Insert or update a record matching the attributes, and fill it with
    values.

    # *

    # * @param  array  $attributes

    # * @param  array|callable  $values

    # * @return bool'
- name: upsert
  visibility: public
  parameters:
  - name: values
  - name: uniqueBy
  - name: update
    default: 'null'
  comment: '# * Insert new records or update the existing ones.

    # *

    # * @param  array  $values

    # * @param  array|string  $uniqueBy

    # * @param  array|null  $update

    # * @return int'
- name: increment
  visibility: public
  parameters:
  - name: column
  - name: amount
    default: '1'
  - name: extra
    default: '[]'
  comment: '# * Increment a column''s value by a given amount.

    # *

    # * @param  string  $column

    # * @param  float|int  $amount

    # * @param  array  $extra

    # * @return int

    # *

    # * @throws \InvalidArgumentException'
- name: incrementEach
  visibility: public
  parameters:
  - name: columns
  - name: extra
    default: '[]'
  comment: '# * Increment the given column''s values by the given amounts.

    # *

    # * @param  array<string, float|int|numeric-string>  $columns

    # * @param  array<string, mixed>  $extra

    # * @return int

    # *

    # * @throws \InvalidArgumentException'
- name: decrement
  visibility: public
  parameters:
  - name: column
  - name: amount
    default: '1'
  - name: extra
    default: '[]'
  comment: '# * Decrement a column''s value by a given amount.

    # *

    # * @param  string  $column

    # * @param  float|int  $amount

    # * @param  array  $extra

    # * @return int

    # *

    # * @throws \InvalidArgumentException'
- name: decrementEach
  visibility: public
  parameters:
  - name: columns
  - name: extra
    default: '[]'
  comment: '# * Decrement the given column''s values by the given amounts.

    # *

    # * @param  array<string, float|int|numeric-string>  $columns

    # * @param  array<string, mixed>  $extra

    # * @return int

    # *

    # * @throws \InvalidArgumentException'
- name: delete
  visibility: public
  parameters:
  - name: id
    default: 'null'
  comment: '# * Delete records from the database.

    # *

    # * @param  mixed  $id

    # * @return int'
- name: truncate
  visibility: public
  parameters: []
  comment: '# * Run a truncate statement on the table.

    # *

    # * @return void'
- name: newQuery
  visibility: public
  parameters: []
  comment: '# * Get a new instance of the query builder.

    # *

    # * @return \Illuminate\Database\Query\Builder'
- name: forSubQuery
  visibility: protected
  parameters: []
  comment: '# * Create a new query instance for a sub-query.

    # *

    # * @return \Illuminate\Database\Query\Builder'
- name: getColumns
  visibility: public
  parameters: []
  comment: '# * Get all of the query builder''s columns in a text-only array with
    all expressions evaluated.

    # *

    # * @return array'
- name: raw
  visibility: public
  parameters:
  - name: value
  comment: '# * Create a raw database expression.

    # *

    # * @param  mixed  $value

    # * @return \Illuminate\Contracts\Database\Query\Expression'
- name: getUnionBuilders
  visibility: protected
  parameters: []
  comment: '# * Get the query builder instances that are used in the union of the
    query.

    # *

    # * @return \Illuminate\Support\Collection'
- name: getBindings
  visibility: public
  parameters: []
  comment: '# * Get the current query value bindings in a flattened array.

    # *

    # * @return array'
- name: getRawBindings
  visibility: public
  parameters: []
  comment: '# * Get the raw array of bindings.

    # *

    # * @return array'
- name: setBindings
  visibility: public
  parameters:
  - name: bindings
  - name: type
    default: '''where'''
  comment: '# * Set the bindings on the query builder.

    # *

    # * @param  array  $bindings

    # * @param  string  $type

    # * @return $this

    # *

    # * @throws \InvalidArgumentException'
- name: addBinding
  visibility: public
  parameters:
  - name: value
  - name: type
    default: '''where'''
  comment: '# * Add a binding to the query.

    # *

    # * @param  mixed  $value

    # * @param  string  $type

    # * @return $this

    # *

    # * @throws \InvalidArgumentException'
- name: castBinding
  visibility: public
  parameters:
  - name: value
  comment: '# * Cast the given binding value.

    # *

    # * @param  mixed  $value

    # * @return mixed'
- name: mergeBindings
  visibility: public
  parameters:
  - name: query
  comment: '# * Merge an array of bindings into our bindings.

    # *

    # * @param  \Illuminate\Database\Query\Builder  $query

    # * @return $this'
- name: cleanBindings
  visibility: public
  parameters:
  - name: bindings
  comment: '# * Remove all of the expressions from a list of bindings.

    # *

    # * @param  array  $bindings

    # * @return array'
- name: flattenValue
  visibility: protected
  parameters:
  - name: value
  comment: '# * Get a scalar type value from an unknown type of input.

    # *

    # * @param  mixed  $value

    # * @return mixed'
- name: defaultKeyName
  visibility: protected
  parameters: []
  comment: '# * Get the default key name of the table.

    # *

    # * @return string'
- name: getConnection
  visibility: public
  parameters: []
  comment: '# * Get the database connection instance.

    # *

    # * @return \Illuminate\Database\ConnectionInterface'
- name: getProcessor
  visibility: public
  parameters: []
  comment: '# * Get the database query processor instance.

    # *

    # * @return \Illuminate\Database\Query\Processors\Processor'
- name: getGrammar
  visibility: public
  parameters: []
  comment: '# * Get the query grammar instance.

    # *

    # * @return \Illuminate\Database\Query\Grammars\Grammar'
- name: useWritePdo
  visibility: public
  parameters: []
  comment: '# * Use the "write" PDO connection when executing the query.

    # *

    # * @return $this'
- name: isQueryable
  visibility: protected
  parameters:
  - name: value
  comment: '# * Determine if the value is a query builder instance or a Closure.

    # *

    # * @param  mixed  $value

    # * @return bool'
- name: clone
  visibility: public
  parameters: []
  comment: '# * Clone the query.

    # *

    # * @return static'
- name: cloneWithout
  visibility: public
  parameters:
  - name: properties
  comment: '# * Clone the query without the given properties.

    # *

    # * @param  array  $properties

    # * @return static'
- name: cloneWithoutBindings
  visibility: public
  parameters:
  - name: except
  comment: '# * Clone the query without the given bindings.

    # *

    # * @param  array  $except

    # * @return static'
- name: dump
  visibility: public
  parameters:
  - name: '...$args'
  comment: '# * Dump the current SQL and bindings.

    # *

    # * @param  mixed  ...$args

    # * @return $this'
- name: dumpRawSql
  visibility: public
  parameters: []
  comment: '# * Dump the raw current SQL with embedded bindings.

    # *

    # * @return $this'
- name: dd
  visibility: public
  parameters: []
  comment: '# * Die and dump the current SQL and bindings.

    # *

    # * @return never'
- name: ddRawSql
  visibility: public
  parameters: []
  comment: '# * Die and dump the current SQL with embedded bindings.

    # *

    # * @return never'
- name: __call
  visibility: public
  parameters:
  - name: method
  - name: parameters
  comment: '# * Handle dynamic method calls into the method.

    # *

    # * @param  string  $method

    # * @param  array  $parameters

    # * @return mixed

    # *

    # * @throws \BadMethodCallException'
traits:
- BackedEnum
- Carbon\CarbonPeriod
- Closure
- DateTimeInterface
- Illuminate\Contracts\Database\Query\ConditionExpression
- Illuminate\Contracts\Support\Arrayable
- Illuminate\Database\Concerns\BuildsQueries
- Illuminate\Database\Concerns\ExplainsQueries
- Illuminate\Database\ConnectionInterface
- Illuminate\Database\Eloquent\Relations\Relation
- Illuminate\Database\Query\Grammars\Grammar
- Illuminate\Database\Query\Processors\Processor
- Illuminate\Pagination\Paginator
- Illuminate\Support\Arr
- Illuminate\Support\Collection
- Illuminate\Support\LazyCollection
- Illuminate\Support\Str
- Illuminate\Support\Traits\ForwardsCalls
- Illuminate\Support\Traits\Macroable
- InvalidArgumentException
- LogicException
- RuntimeException
- UnitEnum
interfaces:
- BuilderContract
