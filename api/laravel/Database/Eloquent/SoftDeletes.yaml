name: SoftDeletes
class_comment: null
dependencies: []
properties:
- name: forceDeleting
  visibility: protected
  comment: '# * @method static \Illuminate\Database\Eloquent\Builder<static> withTrashed(bool
    $withTrashed = true)

    # * @method static \Illuminate\Database\Eloquent\Builder<static> onlyTrashed()

    # * @method static \Illuminate\Database\Eloquent\Builder<static> withoutTrashed()

    # * @method static static restoreOrCreate(array<string, mixed> $attributes = [],
    array<string, mixed> $values = [])

    # * @method static static createOrRestore(array<string, mixed> $attributes = [],
    array<string, mixed> $values = [])

    # *

    # * @mixin \Illuminate\Database\Eloquent\Model

    # */

    # trait SoftDeletes

    # {

    # /**

    # * Indicates if the model is currently force deleting.

    # *

    # * @var bool'
methods:
- name: bootSoftDeletes
  visibility: public
  parameters: []
  comment: "# * @method static \\Illuminate\\Database\\Eloquent\\Builder<static> withTrashed(bool\
    \ $withTrashed = true)\n# * @method static \\Illuminate\\Database\\Eloquent\\\
    Builder<static> onlyTrashed()\n# * @method static \\Illuminate\\Database\\Eloquent\\\
    Builder<static> withoutTrashed()\n# * @method static static restoreOrCreate(array<string,\
    \ mixed> $attributes = [], array<string, mixed> $values = [])\n# * @method static\
    \ static createOrRestore(array<string, mixed> $attributes = [], array<string,\
    \ mixed> $values = [])\n# *\n# * @mixin \\Illuminate\\Database\\Eloquent\\Model\n\
    # */\n# trait SoftDeletes\n# {\n# /**\n# * Indicates if the model is currently\
    \ force deleting.\n# *\n# * @var bool\n# */\n# protected $forceDeleting = false;\n\
    # \n# /**\n# * Boot the soft deleting trait for a model.\n# *\n# * @return void"
- name: initializeSoftDeletes
  visibility: public
  parameters: []
  comment: '# * Initialize the soft deleting trait for an instance.

    # *

    # * @return void'
- name: forceDelete
  visibility: public
  parameters: []
  comment: '# * Force a hard delete on a soft deleted model.

    # *

    # * @return bool|null'
- name: forceDeleteQuietly
  visibility: public
  parameters: []
  comment: '# * Force a hard delete on a soft deleted model without raising any events.

    # *

    # * @return bool|null'
- name: performDeleteOnModel
  visibility: protected
  parameters: []
  comment: '# * Perform the actual delete query on this model instance.

    # *

    # * @return mixed'
- name: runSoftDelete
  visibility: protected
  parameters: []
  comment: '# * Perform the actual delete query on this model instance.

    # *

    # * @return void'
- name: restore
  visibility: public
  parameters: []
  comment: '# * Restore a soft-deleted model instance.

    # *

    # * @return bool'
- name: restoreQuietly
  visibility: public
  parameters: []
  comment: '# * Restore a soft-deleted model instance without raising any events.

    # *

    # * @return bool'
- name: trashed
  visibility: public
  parameters: []
  comment: '# * Determine if the model instance has been soft-deleted.

    # *

    # * @return bool'
- name: softDeleted
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a "softDeleted" model event callback with the dispatcher.

    # *

    # * @param  \Illuminate\Events\QueuedClosure|\Closure|string  $callback

    # * @return void'
- name: restoring
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a "restoring" model event callback with the dispatcher.

    # *

    # * @param  \Illuminate\Events\QueuedClosure|\Closure|string  $callback

    # * @return void'
- name: restored
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a "restored" model event callback with the dispatcher.

    # *

    # * @param  \Illuminate\Events\QueuedClosure|\Closure|string  $callback

    # * @return void'
- name: forceDeleting
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a "forceDeleting" model event callback with the dispatcher.

    # *

    # * @param  \Illuminate\Events\QueuedClosure|\Closure|string  $callback

    # * @return void'
- name: forceDeleted
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a "forceDeleted" model event callback with the dispatcher.

    # *

    # * @param  \Illuminate\Events\QueuedClosure|\Closure|string  $callback

    # * @return void'
- name: isForceDeleting
  visibility: public
  parameters: []
  comment: '# * Determine if the model is currently force deleting.

    # *

    # * @return bool'
- name: getDeletedAtColumn
  visibility: public
  parameters: []
  comment: '# * Get the name of the "deleted at" column.

    # *

    # * @return string'
- name: getQualifiedDeletedAtColumn
  visibility: public
  parameters: []
  comment: '# * Get the fully qualified "deleted at" column.

    # *

    # * @return string'
traits: []
interfaces: []
