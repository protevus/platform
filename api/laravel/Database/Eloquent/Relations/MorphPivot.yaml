name: MorphPivot
class_comment: null
dependencies: []
properties:
- name: morphType
  visibility: protected
  comment: '# * The type of the polymorphic relation.

    # *

    # * Explicitly define this so it''s not included in saved attributes.

    # *

    # * @var string'
- name: morphClass
  visibility: protected
  comment: '# * The value of the polymorphic relation.

    # *

    # * Explicitly define this so it''s not included in saved attributes.

    # *

    # * @var string'
methods:
- name: setKeysForSaveQuery
  visibility: protected
  parameters:
  - name: query
  comment: "# * The type of the polymorphic relation.\n# *\n# * Explicitly define\
    \ this so it's not included in saved attributes.\n# *\n# * @var string\n# */\n\
    # protected $morphType;\n# \n# /**\n# * The value of the polymorphic relation.\n\
    # *\n# * Explicitly define this so it's not included in saved attributes.\n# *\n\
    # * @var string\n# */\n# protected $morphClass;\n# \n# /**\n# * Set the keys for\
    \ a save update query.\n# *\n# * @param  \\Illuminate\\Database\\Eloquent\\Builder<static>\
    \  $query\n# * @return \\Illuminate\\Database\\Eloquent\\Builder<static>"
- name: setKeysForSelectQuery
  visibility: protected
  parameters:
  - name: query
  comment: '# * Set the keys for a select query.

    # *

    # * @param  \Illuminate\Database\Eloquent\Builder<static>  $query

    # * @return \Illuminate\Database\Eloquent\Builder<static>'
- name: delete
  visibility: public
  parameters: []
  comment: '# * Delete the pivot model record from the database.

    # *

    # * @return int'
- name: getMorphType
  visibility: public
  parameters: []
  comment: '# * Get the morph type for the pivot.

    # *

    # * @return string'
- name: setMorphType
  visibility: public
  parameters:
  - name: morphType
  comment: '# * Set the morph type for the pivot.

    # *

    # * @param  string  $morphType

    # * @return $this'
- name: setMorphClass
  visibility: public
  parameters:
  - name: morphClass
  comment: '# * Set the morph class for the pivot.

    # *

    # * @param  string  $morphClass

    # * @return \Illuminate\Database\Eloquent\Relations\MorphPivot'
- name: getQueueableId
  visibility: public
  parameters: []
  comment: '# * Get the queueable identity for the entity.

    # *

    # * @return mixed'
- name: newQueryForRestoration
  visibility: public
  parameters:
  - name: ids
  comment: '# * Get a new query to restore one or more models by their queueable IDs.

    # *

    # * @param  array|int  $ids

    # * @return \Illuminate\Database\Eloquent\Builder<static>'
- name: newQueryForCollectionRestoration
  visibility: protected
  parameters:
  - name: ids
  comment: '# * Get a new query to restore multiple models by their queueable IDs.

    # *

    # * @param  array  $ids

    # * @return \Illuminate\Database\Eloquent\Builder<static>'
traits: []
interfaces: []
