name: HasAttributes
class_comment: null
dependencies:
- name: BackedEnum
  type: class
  source: BackedEnum
- name: BigDecimal
  type: class
  source: Brick\Math\BigDecimal
- name: BrickMathException
  type: class
  source: Brick\Math\Exception\MathException
- name: RoundingMode
  type: class
  source: Brick\Math\RoundingMode
- name: CarbonImmutable
  type: class
  source: Carbon\CarbonImmutable
- name: CarbonInterface
  type: class
  source: Carbon\CarbonInterface
- name: DateTimeImmutable
  type: class
  source: DateTimeImmutable
- name: DateTimeInterface
  type: class
  source: DateTimeInterface
- name: Castable
  type: class
  source: Illuminate\Contracts\Database\Eloquent\Castable
- name: CastsInboundAttributes
  type: class
  source: Illuminate\Contracts\Database\Eloquent\CastsInboundAttributes
- name: Arrayable
  type: class
  source: Illuminate\Contracts\Support\Arrayable
- name: AsArrayObject
  type: class
  source: Illuminate\Database\Eloquent\Casts\AsArrayObject
- name: AsCollection
  type: class
  source: Illuminate\Database\Eloquent\Casts\AsCollection
- name: AsEncryptedArrayObject
  type: class
  source: Illuminate\Database\Eloquent\Casts\AsEncryptedArrayObject
- name: AsEncryptedCollection
  type: class
  source: Illuminate\Database\Eloquent\Casts\AsEncryptedCollection
- name: AsEnumArrayObject
  type: class
  source: Illuminate\Database\Eloquent\Casts\AsEnumArrayObject
- name: AsEnumCollection
  type: class
  source: Illuminate\Database\Eloquent\Casts\AsEnumCollection
- name: Attribute
  type: class
  source: Illuminate\Database\Eloquent\Casts\Attribute
- name: Json
  type: class
  source: Illuminate\Database\Eloquent\Casts\Json
- name: InvalidCastException
  type: class
  source: Illuminate\Database\Eloquent\InvalidCastException
- name: JsonEncodingException
  type: class
  source: Illuminate\Database\Eloquent\JsonEncodingException
- name: MissingAttributeException
  type: class
  source: Illuminate\Database\Eloquent\MissingAttributeException
- name: Relation
  type: class
  source: Illuminate\Database\Eloquent\Relations\Relation
- name: LazyLoadingViolationException
  type: class
  source: Illuminate\Database\LazyLoadingViolationException
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Carbon
  type: class
  source: Illuminate\Support\Carbon
- name: BaseCollection
  type: class
  source: Illuminate\Support\Collection
- name: MathException
  type: class
  source: Illuminate\Support\Exceptions\MathException
- name: Crypt
  type: class
  source: Illuminate\Support\Facades\Crypt
- name: Date
  type: class
  source: Illuminate\Support\Facades\Date
- name: Hash
  type: class
  source: Illuminate\Support\Facades\Hash
- name: Str
  type: class
  source: Illuminate\Support\Str
- name: InvalidArgumentException
  type: class
  source: InvalidArgumentException
- name: LogicException
  type: class
  source: LogicException
- name: ReflectionClass
  type: class
  source: ReflectionClass
- name: ReflectionMethod
  type: class
  source: ReflectionMethod
- name: ReflectionNamedType
  type: class
  source: ReflectionNamedType
- name: RuntimeException
  type: class
  source: RuntimeException
- name: ValueError
  type: class
  source: ValueError
properties:
- name: attributes
  visibility: protected
  comment: '# * The model''s attributes.

    # *

    # * @var array'
- name: original
  visibility: protected
  comment: '# * The model attribute''s original state.

    # *

    # * @var array'
- name: changes
  visibility: protected
  comment: '# * The changed model attributes.

    # *

    # * @var array'
- name: casts
  visibility: protected
  comment: '# * The attributes that should be cast.

    # *

    # * @var array'
- name: classCastCache
  visibility: protected
  comment: '# * The attributes that have been cast using custom classes.

    # *

    # * @var array'
- name: attributeCastCache
  visibility: protected
  comment: '# * The attributes that have been cast using "Attribute" return type mutators.

    # *

    # * @var array'
- name: primitiveCastTypes
  visibility: protected
  comment: '# * The built-in, primitive cast types supported by Eloquent.

    # *

    # * @var string[]'
- name: dateFormat
  visibility: protected
  comment: '# * The storage format of the model''s date columns.

    # *

    # * @var string'
- name: appends
  visibility: protected
  comment: '# * The accessors to append to the model''s array form.

    # *

    # * @var array'
- name: snakeAttributes
  visibility: public
  comment: '# * Indicates whether attributes are snake cased on arrays.

    # *

    # * @var bool'
- name: mutatorCache
  visibility: protected
  comment: '# * The cache of the mutated attributes for each class.

    # *

    # * @var array'
- name: attributeMutatorCache
  visibility: protected
  comment: '# * The cache of the "Attribute" return type marked mutated attributes
    for each class.

    # *

    # * @var array'
- name: getAttributeMutatorCache
  visibility: protected
  comment: '# * The cache of the "Attribute" return type marked mutated, gettable
    attributes for each class.

    # *

    # * @var array'
- name: setAttributeMutatorCache
  visibility: protected
  comment: '# * The cache of the "Attribute" return type marked mutated, settable
    attributes for each class.

    # *

    # * @var array'
- name: castTypeCache
  visibility: protected
  comment: '# * The cache of the converted cast types.

    # *

    # * @var array'
- name: encrypter
  visibility: public
  comment: '# * The encrypter instance that is used to encrypt attributes.

    # *

    # * @var \Illuminate\Contracts\Encryption\Encrypter|null'
methods:
- name: initializeHasAttributes
  visibility: protected
  parameters: []
  comment: "# * The model's attributes.\n# *\n# * @var array\n# */\n# protected $attributes\
    \ = [];\n# \n# /**\n# * The model attribute's original state.\n# *\n# * @var array\n\
    # */\n# protected $original = [];\n# \n# /**\n# * The changed model attributes.\n\
    # *\n# * @var array\n# */\n# protected $changes = [];\n# \n# /**\n# * The attributes\
    \ that should be cast.\n# *\n# * @var array\n# */\n# protected $casts = [];\n\
    # \n# /**\n# * The attributes that have been cast using custom classes.\n# *\n\
    # * @var array\n# */\n# protected $classCastCache = [];\n# \n# /**\n# * The attributes\
    \ that have been cast using \"Attribute\" return type mutators.\n# *\n# * @var\
    \ array\n# */\n# protected $attributeCastCache = [];\n# \n# /**\n# * The built-in,\
    \ primitive cast types supported by Eloquent.\n# *\n# * @var string[]\n# */\n\
    # protected static $primitiveCastTypes = [\n# 'array',\n# 'bool',\n# 'boolean',\n\
    # 'collection',\n# 'custom_datetime',\n# 'date',\n# 'datetime',\n# 'decimal',\n\
    # 'double',\n# 'encrypted',\n# 'encrypted:array',\n# 'encrypted:collection',\n\
    # 'encrypted:json',\n# 'encrypted:object',\n# 'float',\n# 'hashed',\n# 'immutable_date',\n\
    # 'immutable_datetime',\n# 'immutable_custom_datetime',\n# 'int',\n# 'integer',\n\
    # 'json',\n# 'object',\n# 'real',\n# 'string',\n# 'timestamp',\n# ];\n# \n# /**\n\
    # * The storage format of the model's date columns.\n# *\n# * @var string\n# */\n\
    # protected $dateFormat;\n# \n# /**\n# * The accessors to append to the model's\
    \ array form.\n# *\n# * @var array\n# */\n# protected $appends = [];\n# \n# /**\n\
    # * Indicates whether attributes are snake cased on arrays.\n# *\n# * @var bool\n\
    # */\n# public static $snakeAttributes = true;\n# \n# /**\n# * The cache of the\
    \ mutated attributes for each class.\n# *\n# * @var array\n# */\n# protected static\
    \ $mutatorCache = [];\n# \n# /**\n# * The cache of the \"Attribute\" return type\
    \ marked mutated attributes for each class.\n# *\n# * @var array\n# */\n# protected\
    \ static $attributeMutatorCache = [];\n# \n# /**\n# * The cache of the \"Attribute\"\
    \ return type marked mutated, gettable attributes for each class.\n# *\n# * @var\
    \ array\n# */\n# protected static $getAttributeMutatorCache = [];\n# \n# /**\n\
    # * The cache of the \"Attribute\" return type marked mutated, settable attributes\
    \ for each class.\n# *\n# * @var array\n# */\n# protected static $setAttributeMutatorCache\
    \ = [];\n# \n# /**\n# * The cache of the converted cast types.\n# *\n# * @var\
    \ array\n# */\n# protected static $castTypeCache = [];\n# \n# /**\n# * The encrypter\
    \ instance that is used to encrypt attributes.\n# *\n# * @var \\Illuminate\\Contracts\\\
    Encryption\\Encrypter|null\n# */\n# public static $encrypter;\n# \n# /**\n# *\
    \ Initialize the trait.\n# *\n# * @return void"
- name: attributesToArray
  visibility: public
  parameters: []
  comment: '# * Convert the model''s attributes to an array.

    # *

    # * @return array'
- name: addDateAttributesToArray
  visibility: protected
  parameters:
  - name: attributes
  comment: '# * Add the date attributes to the attributes array.

    # *

    # * @param  array  $attributes

    # * @return array'
- name: addMutatedAttributesToArray
  visibility: protected
  parameters:
  - name: attributes
  - name: mutatedAttributes
  comment: '# * Add the mutated attributes to the attributes array.

    # *

    # * @param  array  $attributes

    # * @param  array  $mutatedAttributes

    # * @return array'
- name: addCastAttributesToArray
  visibility: protected
  parameters:
  - name: attributes
  - name: mutatedAttributes
  comment: '# * Add the casted attributes to the attributes array.

    # *

    # * @param  array  $attributes

    # * @param  array  $mutatedAttributes

    # * @return array'
- name: getArrayableAttributes
  visibility: protected
  parameters: []
  comment: '# * Get an attribute array of all arrayable attributes.

    # *

    # * @return array'
- name: getArrayableAppends
  visibility: protected
  parameters: []
  comment: '# * Get all of the appendable values that are arrayable.

    # *

    # * @return array'
- name: relationsToArray
  visibility: public
  parameters: []
  comment: '# * Get the model''s relationships in array form.

    # *

    # * @return array'
- name: getArrayableRelations
  visibility: protected
  parameters: []
  comment: '# * Get an attribute array of all arrayable relations.

    # *

    # * @return array'
- name: getArrayableItems
  visibility: protected
  parameters:
  - name: values
  comment: '# * Get an attribute array of all arrayable values.

    # *

    # * @param  array  $values

    # * @return array'
- name: hasAttribute
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine whether an attribute exists on the model.

    # *

    # * @param  string  $key

    # * @return bool'
- name: getAttribute
  visibility: public
  parameters:
  - name: key
  comment: '# * Get an attribute from the model.

    # *

    # * @param  string  $key

    # * @return mixed'
- name: throwMissingAttributeExceptionIfApplicable
  visibility: protected
  parameters:
  - name: key
  comment: '# * Either throw a missing attribute exception or return null depending
    on Eloquent''s configuration.

    # *

    # * @param  string  $key

    # * @return null

    # *

    # * @throws \Illuminate\Database\Eloquent\MissingAttributeException'
- name: getAttributeValue
  visibility: public
  parameters:
  - name: key
  comment: '# * Get a plain attribute (not a relationship).

    # *

    # * @param  string  $key

    # * @return mixed'
- name: getAttributeFromArray
  visibility: protected
  parameters:
  - name: key
  comment: '# * Get an attribute from the $attributes array.

    # *

    # * @param  string  $key

    # * @return mixed'
- name: getRelationValue
  visibility: public
  parameters:
  - name: key
  comment: '# * Get a relationship.

    # *

    # * @param  string  $key

    # * @return mixed'
- name: isRelation
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if the given key is a relationship method on the model.

    # *

    # * @param  string  $key

    # * @return bool'
- name: handleLazyLoadingViolation
  visibility: protected
  parameters:
  - name: key
  comment: '# * Handle a lazy loading violation.

    # *

    # * @param  string  $key

    # * @return mixed'
- name: getRelationshipFromMethod
  visibility: protected
  parameters:
  - name: method
  comment: '# * Get a relationship value from a method.

    # *

    # * @param  string  $method

    # * @return mixed

    # *

    # * @throws \LogicException'
- name: hasGetMutator
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if a get mutator exists for an attribute.

    # *

    # * @param  string  $key

    # * @return bool'
- name: hasAttributeMutator
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if a "Attribute" return type marked mutator exists for an
    attribute.

    # *

    # * @param  string  $key

    # * @return bool'
- name: hasAttributeGetMutator
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if a "Attribute" return type marked get mutator exists for
    an attribute.

    # *

    # * @param  string  $key

    # * @return bool'
- name: mutateAttribute
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Get the value of an attribute using its mutator.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: mutateAttributeMarkedAttribute
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Get the value of an "Attribute" return type marked attribute using
    its mutator.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: mutateAttributeForArray
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Get the value of an attribute using its mutator for array conversion.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: mergeCasts
  visibility: public
  parameters:
  - name: casts
  comment: '# * Merge new casts with existing casts on the model.

    # *

    # * @param  array  $casts

    # * @return $this'
- name: ensureCastsAreStringValues
  visibility: protected
  parameters:
  - name: casts
  comment: '# * Ensure that the given casts are strings.

    # *

    # * @param  array  $casts

    # * @return array'
- name: castAttribute
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Cast an attribute to a native PHP type.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: getClassCastableAttributeValue
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Cast the given attribute using a custom cast class.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: getEnumCastableAttributeValue
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Cast the given attribute to an enum.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: getCastType
  visibility: protected
  parameters:
  - name: key
  comment: '# * Get the type of cast for a model attribute.

    # *

    # * @param  string  $key

    # * @return string'
- name: deviateClassCastableAttribute
  visibility: protected
  parameters:
  - name: method
  - name: key
  - name: value
  comment: '# * Increment or decrement the given attribute using the custom cast class.

    # *

    # * @param  string  $method

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: serializeClassCastableAttribute
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Serialize the given attribute using the custom cast class.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: isCustomDateTimeCast
  visibility: protected
  parameters:
  - name: cast
  comment: '# * Determine if the cast type is a custom date time cast.

    # *

    # * @param  string  $cast

    # * @return bool'
- name: isImmutableCustomDateTimeCast
  visibility: protected
  parameters:
  - name: cast
  comment: '# * Determine if the cast type is an immutable custom date time cast.

    # *

    # * @param  string  $cast

    # * @return bool'
- name: isDecimalCast
  visibility: protected
  parameters:
  - name: cast
  comment: '# * Determine if the cast type is a decimal cast.

    # *

    # * @param  string  $cast

    # * @return bool'
- name: setAttribute
  visibility: public
  parameters:
  - name: key
  - name: value
  comment: '# * Set a given attribute on the model.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: hasSetMutator
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if a set mutator exists for an attribute.

    # *

    # * @param  string  $key

    # * @return bool'
- name: hasAttributeSetMutator
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if an "Attribute" return type marked set mutator exists
    for an attribute.

    # *

    # * @param  string  $key

    # * @return bool'
- name: setMutatedAttributeValue
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Set the value of an attribute using its mutator.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: setAttributeMarkedMutatedAttributeValue
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Set the value of a "Attribute" return type marked attribute using
    its mutator.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: isDateAttribute
  visibility: protected
  parameters:
  - name: key
  comment: '# * Determine if the given attribute is a date or date castable.

    # *

    # * @param  string  $key

    # * @return bool'
- name: fillJsonAttribute
  visibility: public
  parameters:
  - name: key
  - name: value
  comment: '# * Set a given JSON attribute on the model.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return $this'
- name: setClassCastableAttribute
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Set the value of a class castable attribute.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return void'
- name: setEnumCastableAttribute
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Set the value of an enum castable attribute.

    # *

    # * @param  string  $key

    # * @param  \UnitEnum|string|int  $value

    # * @return void'
- name: getEnumCaseFromValue
  visibility: protected
  parameters:
  - name: enumClass
  - name: value
  comment: '# * Get an enum case instance from a given class and value.

    # *

    # * @param  string  $enumClass

    # * @param  string|int  $value

    # * @return \UnitEnum|\BackedEnum'
- name: getStorableEnumValue
  visibility: protected
  parameters:
  - name: expectedEnum
  - name: value
  comment: '# * Get the storable value from the given enum.

    # *

    # * @param  string  $expectedEnum

    # * @param  \UnitEnum|\BackedEnum  $value

    # * @return string|int'
- name: getArrayAttributeWithValue
  visibility: protected
  parameters:
  - name: path
  - name: key
  - name: value
  comment: '# * Get an array attribute with the given key and value set.

    # *

    # * @param  string  $path

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return $this'
- name: getArrayAttributeByKey
  visibility: protected
  parameters:
  - name: key
  comment: '# * Get an array attribute or return an empty array if it is not set.

    # *

    # * @param  string  $key

    # * @return array'
- name: castAttributeAsJson
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Cast the given attribute to JSON.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return string'
- name: asJson
  visibility: protected
  parameters:
  - name: value
  comment: '# * Encode the given value as JSON.

    # *

    # * @param  mixed  $value

    # * @return string'
- name: fromJson
  visibility: public
  parameters:
  - name: value
  - name: asObject
    default: 'false'
  comment: '# * Decode the given JSON back into an array or object.

    # *

    # * @param  string  $value

    # * @param  bool  $asObject

    # * @return mixed'
- name: fromEncryptedString
  visibility: public
  parameters:
  - name: value
  comment: '# * Decrypt the given encrypted string.

    # *

    # * @param  string  $value

    # * @return mixed'
- name: castAttributeAsEncryptedString
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Cast the given attribute to an encrypted string.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return string'
- name: encryptUsing
  visibility: public
  parameters:
  - name: encrypter
  comment: '# * Set the encrypter instance that will be used to encrypt attributes.

    # *

    # * @param  \Illuminate\Contracts\Encryption\Encrypter|null  $encrypter

    # * @return void'
- name: currentEncrypter
  visibility: protected
  parameters: []
  comment: '# * Get the current encrypter being used by the model.

    # *

    # * @return \Illuminate\Contracts\Encryption\Encrypter'
- name: castAttributeAsHashedString
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Cast the given attribute to a hashed string.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return string'
- name: fromFloat
  visibility: public
  parameters:
  - name: value
  comment: '# * Decode the given float.

    # *

    # * @param  mixed  $value

    # * @return mixed'
- name: asDecimal
  visibility: protected
  parameters:
  - name: value
  - name: decimals
  comment: '# * Return a decimal as string.

    # *

    # * @param  float|string  $value

    # * @param  int  $decimals

    # * @return string'
- name: asDate
  visibility: protected
  parameters:
  - name: value
  comment: '# * Return a timestamp as DateTime object with time set to 00:00:00.

    # *

    # * @param  mixed  $value

    # * @return \Illuminate\Support\Carbon'
- name: asDateTime
  visibility: protected
  parameters:
  - name: value
  comment: '# * Return a timestamp as DateTime object.

    # *

    # * @param  mixed  $value

    # * @return \Illuminate\Support\Carbon'
- name: isStandardDateFormat
  visibility: protected
  parameters:
  - name: value
  comment: '# * Determine if the given value is a standard date format.

    # *

    # * @param  string  $value

    # * @return bool'
- name: fromDateTime
  visibility: public
  parameters:
  - name: value
  comment: '# * Convert a DateTime to a storable string.

    # *

    # * @param  mixed  $value

    # * @return string|null'
- name: asTimestamp
  visibility: protected
  parameters:
  - name: value
  comment: '# * Return a timestamp as unix timestamp.

    # *

    # * @param  mixed  $value

    # * @return int'
- name: serializeDate
  visibility: protected
  parameters:
  - name: date
  comment: '# * Prepare a date for array / JSON serialization.

    # *

    # * @param  \DateTimeInterface  $date

    # * @return string'
- name: getDates
  visibility: public
  parameters: []
  comment: '# * Get the attributes that should be converted to dates.

    # *

    # * @return array'
- name: getDateFormat
  visibility: public
  parameters: []
  comment: '# * Get the format for database stored dates.

    # *

    # * @return string'
- name: setDateFormat
  visibility: public
  parameters:
  - name: format
  comment: '# * Set the date format used by the model.

    # *

    # * @param  string  $format

    # * @return $this'
- name: hasCast
  visibility: public
  parameters:
  - name: key
  - name: types
    default: 'null'
  comment: '# * Determine whether an attribute should be cast to a native type.

    # *

    # * @param  string  $key

    # * @param  array|string|null  $types

    # * @return bool'
- name: getCasts
  visibility: public
  parameters: []
  comment: '# * Get the attributes that should be cast.

    # *

    # * @return array'
- name: casts
  visibility: protected
  parameters: []
  comment: '# * Get the attributes that should be cast.

    # *

    # * @return array'
- name: isDateCastable
  visibility: protected
  parameters:
  - name: key
  comment: '# * Determine whether a value is Date / DateTime castable for inbound
    manipulation.

    # *

    # * @param  string  $key

    # * @return bool'
- name: isDateCastableWithCustomFormat
  visibility: protected
  parameters:
  - name: key
  comment: '# * Determine whether a value is Date / DateTime custom-castable for inbound
    manipulation.

    # *

    # * @param  string  $key

    # * @return bool'
- name: isJsonCastable
  visibility: protected
  parameters:
  - name: key
  comment: '# * Determine whether a value is JSON castable for inbound manipulation.

    # *

    # * @param  string  $key

    # * @return bool'
- name: isEncryptedCastable
  visibility: protected
  parameters:
  - name: key
  comment: '# * Determine whether a value is an encrypted castable for inbound manipulation.

    # *

    # * @param  string  $key

    # * @return bool'
- name: isClassCastable
  visibility: protected
  parameters:
  - name: key
  comment: '# * Determine if the given key is cast using a custom class.

    # *

    # * @param  string  $key

    # * @return bool

    # *

    # * @throws \Illuminate\Database\Eloquent\InvalidCastException'
- name: isEnumCastable
  visibility: protected
  parameters:
  - name: key
  comment: '# * Determine if the given key is cast using an enum.

    # *

    # * @param  string  $key

    # * @return bool'
- name: isClassDeviable
  visibility: protected
  parameters:
  - name: key
  comment: '# * Determine if the key is deviable using a custom class.

    # *

    # * @param  string  $key

    # * @return bool

    # *

    # * @throws \Illuminate\Database\Eloquent\InvalidCastException'
- name: isClassSerializable
  visibility: protected
  parameters:
  - name: key
  comment: '# * Determine if the key is serializable using a custom class.

    # *

    # * @param  string  $key

    # * @return bool

    # *

    # * @throws \Illuminate\Database\Eloquent\InvalidCastException'
- name: resolveCasterClass
  visibility: protected
  parameters:
  - name: key
  comment: '# * Resolve the custom caster class for a given key.

    # *

    # * @param  string  $key

    # * @return mixed'
- name: parseCasterClass
  visibility: protected
  parameters:
  - name: class
  comment: '# * Parse the given caster class, removing any arguments.

    # *

    # * @param  string  $class

    # * @return string'
- name: mergeAttributesFromCachedCasts
  visibility: protected
  parameters: []
  comment: '# * Merge the cast class and attribute cast attributes back into the model.

    # *

    # * @return void'
- name: mergeAttributesFromClassCasts
  visibility: protected
  parameters: []
  comment: '# * Merge the cast class attributes back into the model.

    # *

    # * @return void'
- name: mergeAttributesFromAttributeCasts
  visibility: protected
  parameters: []
  comment: '# * Merge the cast class attributes back into the model.

    # *

    # * @return void'
- name: normalizeCastClassResponse
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Normalize the response from a custom class caster.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return array'
- name: getAttributes
  visibility: public
  parameters: []
  comment: '# * Get all of the current attributes on the model.

    # *

    # * @return array'
- name: getAttributesForInsert
  visibility: protected
  parameters: []
  comment: '# * Get all of the current attributes on the model for an insert operation.

    # *

    # * @return array'
- name: setRawAttributes
  visibility: public
  parameters:
  - name: attributes
  - name: sync
    default: 'false'
  comment: '# * Set the array of model attributes. No checking is done.

    # *

    # * @param  array  $attributes

    # * @param  bool  $sync

    # * @return $this'
- name: getOriginal
  visibility: public
  parameters:
  - name: key
    default: 'null'
  - name: default
    default: 'null'
  comment: '# * Get the model''s original attribute values.

    # *

    # * @param  string|null  $key

    # * @param  mixed  $default

    # * @return mixed|array'
- name: getOriginalWithoutRewindingModel
  visibility: protected
  parameters:
  - name: key
    default: 'null'
  - name: default
    default: 'null'
  comment: '# * Get the model''s original attribute values.

    # *

    # * @param  string|null  $key

    # * @param  mixed  $default

    # * @return mixed|array'
- name: getRawOriginal
  visibility: public
  parameters:
  - name: key
    default: 'null'
  - name: default
    default: 'null'
  comment: '# * Get the model''s raw original attribute values.

    # *

    # * @param  string|null  $key

    # * @param  mixed  $default

    # * @return mixed|array'
- name: only
  visibility: public
  parameters:
  - name: attributes
  comment: '# * Get a subset of the model''s attributes.

    # *

    # * @param  array|mixed  $attributes

    # * @return array'
- name: syncOriginal
  visibility: public
  parameters: []
  comment: '# * Sync the original attributes with the current.

    # *

    # * @return $this'
- name: syncOriginalAttribute
  visibility: public
  parameters:
  - name: attribute
  comment: '# * Sync a single original attribute with its current value.

    # *

    # * @param  string  $attribute

    # * @return $this'
- name: syncOriginalAttributes
  visibility: public
  parameters:
  - name: attributes
  comment: '# * Sync multiple original attribute with their current values.

    # *

    # * @param  array|string  $attributes

    # * @return $this'
- name: syncChanges
  visibility: public
  parameters: []
  comment: '# * Sync the changed attributes.

    # *

    # * @return $this'
- name: isDirty
  visibility: public
  parameters:
  - name: attributes
    default: 'null'
  comment: '# * Determine if the model or any of the given attribute(s) have been
    modified.

    # *

    # * @param  array|string|null  $attributes

    # * @return bool'
- name: isClean
  visibility: public
  parameters:
  - name: attributes
    default: 'null'
  comment: '# * Determine if the model or all the given attribute(s) have remained
    the same.

    # *

    # * @param  array|string|null  $attributes

    # * @return bool'
- name: discardChanges
  visibility: public
  parameters: []
  comment: '# * Discard attribute changes and reset the attributes to their original
    state.

    # *

    # * @return $this'
- name: wasChanged
  visibility: public
  parameters:
  - name: attributes
    default: 'null'
  comment: '# * Determine if the model or any of the given attribute(s) were changed
    when the model was last saved.

    # *

    # * @param  array|string|null  $attributes

    # * @return bool'
- name: hasChanges
  visibility: protected
  parameters:
  - name: changes
  - name: attributes
    default: 'null'
  comment: '# * Determine if any of the given attributes were changed when the model
    was last saved.

    # *

    # * @param  array  $changes

    # * @param  array|string|null  $attributes

    # * @return bool'
- name: getDirty
  visibility: public
  parameters: []
  comment: '# * Get the attributes that have been changed since the last sync.

    # *

    # * @return array'
- name: getDirtyForUpdate
  visibility: protected
  parameters: []
  comment: '# * Get the attributes that have been changed since the last sync for
    an update operation.

    # *

    # * @return array'
- name: getChanges
  visibility: public
  parameters: []
  comment: '# * Get the attributes that were changed when the model was last saved.

    # *

    # * @return array'
- name: originalIsEquivalent
  visibility: public
  parameters:
  - name: key
  comment: '# * Determine if the new and old values for a given key are equivalent.

    # *

    # * @param  string  $key

    # * @return bool'
- name: transformModelValue
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Transform a raw model value using mutators, casts, etc.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: append
  visibility: public
  parameters:
  - name: attributes
  comment: '# * Append attributes to query when building a query.

    # *

    # * @param  array|string  $attributes

    # * @return $this'
- name: getAppends
  visibility: public
  parameters: []
  comment: '# * Get the accessors that are being appended to model arrays.

    # *

    # * @return array'
- name: setAppends
  visibility: public
  parameters:
  - name: appends
  comment: '# * Set the accessors to append to model arrays.

    # *

    # * @param  array  $appends

    # * @return $this'
- name: hasAppended
  visibility: public
  parameters:
  - name: attribute
  comment: '# * Return whether the accessor attribute has been appended.

    # *

    # * @param  string  $attribute

    # * @return bool'
- name: getMutatedAttributes
  visibility: public
  parameters: []
  comment: '# * Get the mutated attributes for a given instance.

    # *

    # * @return array'
- name: cacheMutatedAttributes
  visibility: public
  parameters:
  - name: classOrInstance
  comment: '# * Extract and cache all the mutated attributes of a class.

    # *

    # * @param  object|string  $classOrInstance

    # * @return void'
- name: getMutatorMethods
  visibility: protected
  parameters:
  - name: class
  comment: '# * Get all of the attribute mutator methods.

    # *

    # * @param  mixed  $class

    # * @return array'
- name: getAttributeMarkedMutatorMethods
  visibility: protected
  parameters:
  - name: class
  comment: '# * Get all of the "Attribute" return typed attribute mutator methods.

    # *

    # * @param  mixed  $class

    # * @return array'
traits:
- BackedEnum
- Brick\Math\BigDecimal
- Brick\Math\RoundingMode
- Carbon\CarbonImmutable
- Carbon\CarbonInterface
- DateTimeImmutable
- DateTimeInterface
- Illuminate\Contracts\Database\Eloquent\Castable
- Illuminate\Contracts\Database\Eloquent\CastsInboundAttributes
- Illuminate\Contracts\Support\Arrayable
- Illuminate\Database\Eloquent\Casts\AsArrayObject
- Illuminate\Database\Eloquent\Casts\AsCollection
- Illuminate\Database\Eloquent\Casts\AsEncryptedArrayObject
- Illuminate\Database\Eloquent\Casts\AsEncryptedCollection
- Illuminate\Database\Eloquent\Casts\AsEnumArrayObject
- Illuminate\Database\Eloquent\Casts\AsEnumCollection
- Illuminate\Database\Eloquent\Casts\Attribute
- Illuminate\Database\Eloquent\Casts\Json
- Illuminate\Database\Eloquent\InvalidCastException
- Illuminate\Database\Eloquent\JsonEncodingException
- Illuminate\Database\Eloquent\MissingAttributeException
- Illuminate\Database\Eloquent\Relations\Relation
- Illuminate\Database\LazyLoadingViolationException
- Illuminate\Support\Arr
- Illuminate\Support\Carbon
- Illuminate\Support\Exceptions\MathException
- Illuminate\Support\Facades\Crypt
- Illuminate\Support\Facades\Date
- Illuminate\Support\Facades\Hash
- Illuminate\Support\Str
- InvalidArgumentException
- LogicException
- ReflectionClass
- ReflectionMethod
- ReflectionNamedType
- RuntimeException
- ValueError
interfaces: []
