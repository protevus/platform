name: TrimStrings
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: Str
  type: class
  source: Illuminate\Support\Str
properties:
- name: except
  visibility: protected
  comment: '# * The attributes that should not be trimmed.

    # *

    # * @var array<int, string>'
- name: neverTrim
  visibility: protected
  comment: '# * The globally ignored attributes that should not be trimmed.

    # *

    # * @var array'
- name: skipCallbacks
  visibility: protected
  comment: '# * All of the registered skip callbacks.

    # *

    # * @var array'
methods:
- name: handle
  visibility: public
  parameters:
  - name: request
  - name: next
  comment: "# * The attributes that should not be trimmed.\n# *\n# * @var array<int,\
    \ string>\n# */\n# protected $except = [\n# 'current_password',\n# 'password',\n\
    # 'password_confirmation',\n# ];\n# \n# /**\n# * The globally ignored attributes\
    \ that should not be trimmed.\n# *\n# * @var array\n# */\n# protected static $neverTrim\
    \ = [];\n# \n# /**\n# * All of the registered skip callbacks.\n# *\n# * @var array\n\
    # */\n# protected static $skipCallbacks = [];\n# \n# /**\n# * Handle an incoming\
    \ request.\n# *\n# * @param  \\Illuminate\\Http\\Request  $request\n# * @param\
    \  \\Closure  $next\n# * @return mixed"
- name: transform
  visibility: protected
  parameters:
  - name: key
  - name: value
  comment: '# * Transform the given value.

    # *

    # * @param  string  $key

    # * @param  mixed  $value

    # * @return mixed'
- name: shouldSkip
  visibility: protected
  parameters:
  - name: key
  - name: except
  comment: '# * Determine if the given key should be skipped.

    # *

    # * @param  string  $key

    # * @param  array  $except

    # * @return bool'
- name: except
  visibility: public
  parameters:
  - name: attributes
  comment: '# * Indicate that the given attributes should never be trimmed.

    # *

    # * @param  array|string  $attributes

    # * @return void'
- name: skipWhen
  visibility: public
  parameters:
  - name: callback
  comment: '# * Register a callback that instructs the middleware to be skipped.

    # *

    # * @param  \Closure  $callback

    # * @return void'
- name: flushState
  visibility: public
  parameters: []
  comment: '# * Flush the middleware''s global state.

    # *

    # * @return void'
traits:
- Closure
- Illuminate\Support\Arr
- Illuminate\Support\Str
interfaces: []
