name: PreventRequestsDuringMaintenance
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: ErrorException
  type: class
  source: ErrorException
- name: Application
  type: class
  source: Illuminate\Contracts\Foundation\Application
- name: MaintenanceModeBypassCookie
  type: class
  source: Illuminate\Foundation\Http\MaintenanceModeBypassCookie
- name: ExcludesPaths
  type: class
  source: Illuminate\Foundation\Http\Middleware\Concerns\ExcludesPaths
- name: Arr
  type: class
  source: Illuminate\Support\Arr
- name: HttpException
  type: class
  source: Symfony\Component\HttpKernel\Exception\HttpException
- name: ExcludesPaths
  type: class
  source: ExcludesPaths
properties:
- name: app
  visibility: protected
  comment: '# * The application implementation.

    # *

    # * @var \Illuminate\Contracts\Foundation\Application'
- name: except
  visibility: protected
  comment: '# * The URIs that should be excluded.

    # *

    # * @var array<int, string>'
- name: neverPrevent
  visibility: protected
  comment: '# * The URIs that should be accessible during maintenance.

    # *

    # * @var array'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: app
  comment: "# * The application implementation.\n# *\n# * @var \\Illuminate\\Contracts\\\
    Foundation\\Application\n# */\n# protected $app;\n# \n# /**\n# * The URIs that\
    \ should be excluded.\n# *\n# * @var array<int, string>\n# */\n# protected $except\
    \ = [];\n# \n# /**\n# * The URIs that should be accessible during maintenance.\n\
    # *\n# * @var array\n# */\n# protected static $neverPrevent = [];\n# \n# /**\n\
    # * Create a new middleware instance.\n# *\n# * @param  \\Illuminate\\Contracts\\\
    Foundation\\Application  $app\n# * @return void"
- name: handle
  visibility: public
  parameters:
  - name: request
  - name: next
  comment: '# * Handle an incoming request.

    # *

    # * @param  \Illuminate\Http\Request  $request

    # * @param  \Closure  $next

    # * @return mixed

    # *

    # * @throws \Symfony\Component\HttpKernel\Exception\HttpException

    # * @throws \ErrorException'
- name: hasValidBypassCookie
  visibility: protected
  parameters:
  - name: request
  - name: data
  comment: '# * Determine if the incoming request has a maintenance mode bypass cookie.

    # *

    # * @param  \Illuminate\Http\Request  $request

    # * @param  array  $data

    # * @return bool'
- name: bypassResponse
  visibility: protected
  parameters:
  - name: secret
  comment: '# * Redirect the user back to the root of the application with a maintenance
    mode bypass cookie.

    # *

    # * @param  string  $secret

    # * @return \Illuminate\Http\RedirectResponse'
- name: getHeaders
  visibility: protected
  parameters:
  - name: data
  comment: '# * Get the headers that should be sent with the response.

    # *

    # * @param  array  $data

    # * @return array'
- name: getExcludedPaths
  visibility: public
  parameters: []
  comment: '# * Get the URIs that should be excluded.

    # *

    # * @return array'
- name: except
  visibility: public
  parameters:
  - name: uris
  comment: '# * Indicate that the given URIs should always be accessible.

    # *

    # * @param  array|string  $uris

    # * @return void'
- name: flushState
  visibility: public
  parameters: []
  comment: '# * Flush the state of the middleware.

    # *

    # * @return void'
traits:
- Closure
- ErrorException
- Illuminate\Contracts\Foundation\Application
- Illuminate\Foundation\Http\MaintenanceModeBypassCookie
- Illuminate\Foundation\Http\Middleware\Concerns\ExcludesPaths
- Illuminate\Support\Arr
- Symfony\Component\HttpKernel\Exception\HttpException
- ExcludesPaths
interfaces: []
