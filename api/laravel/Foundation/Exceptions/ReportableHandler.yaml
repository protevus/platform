name: ReportableHandler
class_comment: null
dependencies:
- name: ReflectsClosures
  type: class
  source: Illuminate\Support\Traits\ReflectsClosures
- name: Throwable
  type: class
  source: Throwable
- name: ReflectsClosures
  type: class
  source: ReflectsClosures
properties:
- name: callback
  visibility: protected
  comment: '# * The underlying callback.

    # *

    # * @var callable'
- name: shouldStop
  visibility: protected
  comment: '# * Indicates if reporting should stop after invoking this handler.

    # *

    # * @var bool'
methods:
- name: __construct
  visibility: public
  parameters:
  - name: callback
  comment: "# * The underlying callback.\n# *\n# * @var callable\n# */\n# protected\
    \ $callback;\n# \n# /**\n# * Indicates if reporting should stop after invoking\
    \ this handler.\n# *\n# * @var bool\n# */\n# protected $shouldStop = false;\n\
    # \n# /**\n# * Create a new reportable handler instance.\n# *\n# * @param  callable\
    \  $callback\n# * @return void"
- name: __invoke
  visibility: public
  parameters:
  - name: e
  comment: '# * Invoke the handler.

    # *

    # * @param  \Throwable  $e

    # * @return bool'
- name: handles
  visibility: public
  parameters:
  - name: e
  comment: '# * Determine if the callback handles the given exception.

    # *

    # * @param  \Throwable  $e

    # * @return bool'
- name: stop
  visibility: public
  parameters: []
  comment: '# * Indicate that report handling should stop after invoking this callback.

    # *

    # * @return $this'
traits:
- Illuminate\Support\Traits\ReflectsClosures
- Throwable
- ReflectsClosures
interfaces: []
