name: EventListCommand
class_comment: null
dependencies:
- name: Closure
  type: class
  source: Closure
- name: Command
  type: class
  source: Illuminate\Console\Command
- name: ShouldBroadcast
  type: class
  source: Illuminate\Contracts\Broadcasting\ShouldBroadcast
- name: ShouldQueue
  type: class
  source: Illuminate\Contracts\Queue\ShouldQueue
- name: ReflectionFunction
  type: class
  source: ReflectionFunction
- name: AsCommand
  type: class
  source: Symfony\Component\Console\Attribute\AsCommand
properties:
- name: signature
  visibility: protected
  comment: '# * The name and signature of the console command.

    # *

    # * @var string'
- name: description
  visibility: protected
  comment: '# * The console command description.

    # *

    # * @var string'
- name: eventsResolver
  visibility: protected
  comment: '# * The events dispatcher resolver callback.

    # *

    # * @var \Closure|null'
methods:
- name: handle
  visibility: public
  parameters: []
  comment: "# * The name and signature of the console command.\n# *\n# * @var string\n\
    # */\n# protected $signature = 'event:list {--event= : Filter the events by name}';\n\
    # \n# /**\n# * The console command description.\n# *\n# * @var string\n# */\n\
    # protected $description = \"List the application's events and listeners\";\n\
    # \n# /**\n# * The events dispatcher resolver callback.\n# *\n# * @var \\Closure|null\n\
    # */\n# protected static $eventsResolver;\n# \n# /**\n# * Execute the console\
    \ command.\n# *\n# * @return void"
- name: getEvents
  visibility: protected
  parameters: []
  comment: '# * Get all of the events and listeners configured for the application.

    # *

    # * @return \Illuminate\Support\Collection'
- name: getListenersOnDispatcher
  visibility: protected
  parameters: []
  comment: '# * Get the event / listeners from the dispatcher object.

    # *

    # * @return array'
- name: appendEventInterfaces
  visibility: protected
  parameters:
  - name: event
  comment: '# * Add the event implemented interfaces to the output.

    # *

    # * @param  string  $event

    # * @return string'
- name: appendListenerInterfaces
  visibility: protected
  parameters:
  - name: listener
  comment: '# * Add the listener implemented interfaces to the output.

    # *

    # * @param  string  $listener

    # * @return string'
- name: stringifyClosure
  visibility: protected
  parameters:
  - name: rawListener
  comment: '# * Get a displayable string representation of a Closure listener.

    # *

    # * @param  \Closure  $rawListener

    # * @return string'
- name: filterEvents
  visibility: protected
  parameters:
  - name: events
  comment: '# * Filter the given events using the provided event name filter.

    # *

    # * @param  \Illuminate\Support\Collection  $events

    # * @return \Illuminate\Support\Collection'
- name: filteringByEvent
  visibility: protected
  parameters: []
  comment: '# * Determine whether the user is filtering by an event name.

    # *

    # * @return bool'
- name: getRawListeners
  visibility: protected
  parameters: []
  comment: '# * Gets the raw version of event listeners from the event dispatcher.

    # *

    # * @return array'
- name: getEventsDispatcher
  visibility: public
  parameters: []
  comment: '# * Get the event dispatcher.

    # *

    # * @return \Illuminate\Events\Dispatcher'
- name: resolveEventsUsing
  visibility: public
  parameters:
  - name: resolver
  comment: '# * Set a callback that should be used when resolving the events dispatcher.

    # *

    # * @param  \Closure|null  $resolver

    # * @return void'
traits:
- Closure
- Illuminate\Console\Command
- Illuminate\Contracts\Broadcasting\ShouldBroadcast
- Illuminate\Contracts\Queue\ShouldQueue
- ReflectionFunction
- Symfony\Component\Console\Attribute\AsCommand
interfaces: []
