name: HandleExceptions
class_comment: null
dependencies:
- name: ErrorException
  type: class
  source: ErrorException
- name: Exception
  type: class
  source: Exception
- name: ExceptionHandler
  type: class
  source: Illuminate\Contracts\Debug\ExceptionHandler
- name: Application
  type: class
  source: Illuminate\Contracts\Foundation\Application
- name: LogManager
  type: class
  source: Illuminate\Log\LogManager
- name: Env
  type: class
  source: Illuminate\Support\Env
- name: NullHandler
  type: class
  source: Monolog\Handler\NullHandler
- name: ErrorHandler
  type: class
  source: PHPUnit\Runner\ErrorHandler
- name: ConsoleOutput
  type: class
  source: Symfony\Component\Console\Output\ConsoleOutput
- name: FatalError
  type: class
  source: Symfony\Component\ErrorHandler\Error\FatalError
- name: Throwable
  type: class
  source: Throwable
properties:
- name: reservedMemory
  visibility: public
  comment: '# * Reserved memory so that errors can be displayed properly on memory
    exhaustion.

    # *

    # * @var string|null'
- name: app
  visibility: protected
  comment: '# * The application instance.

    # *

    # * @var \Illuminate\Contracts\Foundation\Application'
methods:
- name: bootstrap
  visibility: public
  parameters:
  - name: app
  comment: "# * Reserved memory so that errors can be displayed properly on memory\
    \ exhaustion.\n# *\n# * @var string|null\n# */\n# public static $reservedMemory;\n\
    # \n# /**\n# * The application instance.\n# *\n# * @var \\Illuminate\\Contracts\\\
    Foundation\\Application\n# */\n# protected static $app;\n# \n# /**\n# * Bootstrap\
    \ the given application.\n# *\n# * @param  \\Illuminate\\Contracts\\Foundation\\\
    Application  $app\n# * @return void"
- name: handleError
  visibility: public
  parameters:
  - name: level
  - name: message
  - name: file
    default: ''''''
  - name: line
    default: '0'
  comment: '# * Report PHP deprecations, or convert PHP errors to ErrorException instances.

    # *

    # * @param  int  $level

    # * @param  string  $message

    # * @param  string  $file

    # * @param  int  $line

    # * @return void

    # *

    # * @throws \ErrorException'
- name: handleDeprecationError
  visibility: public
  parameters:
  - name: message
  - name: file
  - name: line
  - name: level
    default: E_DEPRECATED
  comment: '# * Reports a deprecation to the "deprecations" logger.

    # *

    # * @param  string  $message

    # * @param  string  $file

    # * @param  int  $line

    # * @param  int  $level

    # * @return void'
- name: shouldIgnoreDeprecationErrors
  visibility: protected
  parameters: []
  comment: '# * Determine if deprecation errors should be ignored.

    # *

    # * @return bool'
- name: ensureDeprecationLoggerIsConfigured
  visibility: protected
  parameters: []
  comment: '# * Ensure the "deprecations" logger is configured.

    # *

    # * @return void'
- name: ensureNullLogDriverIsConfigured
  visibility: protected
  parameters: []
  comment: '# * Ensure the "null" log driver is configured.

    # *

    # * @return void'
- name: handleException
  visibility: public
  parameters:
  - name: e
  comment: '# * Handle an uncaught exception from the application.

    # *

    # * Note: Most exceptions can be handled via the try / catch block in

    # * the HTTP and Console kernels. But, fatal error exceptions must

    # * be handled differently since they are not normal exceptions.

    # *

    # * @param  \Throwable  $e

    # * @return void'
- name: renderForConsole
  visibility: protected
  parameters:
  - name: e
  comment: '# * Render an exception to the console.

    # *

    # * @param  \Throwable  $e

    # * @return void'
- name: renderHttpResponse
  visibility: protected
  parameters:
  - name: e
  comment: '# * Render an exception as an HTTP response and send it.

    # *

    # * @param  \Throwable  $e

    # * @return void'
- name: handleShutdown
  visibility: public
  parameters: []
  comment: '# * Handle the PHP shutdown event.

    # *

    # * @return void'
- name: fatalErrorFromPhpError
  visibility: protected
  parameters:
  - name: error
  - name: traceOffset
    default: 'null'
  comment: '# * Create a new fatal error instance from an error array.

    # *

    # * @param  array  $error

    # * @param  int|null  $traceOffset

    # * @return \Symfony\Component\ErrorHandler\Error\FatalError'
- name: forwardsTo
  visibility: protected
  parameters:
  - name: method
  comment: '# * Forward a method call to the given method if an application instance
    exists.

    # *

    # * @return callable'
- name: isDeprecation
  visibility: protected
  parameters:
  - name: level
  comment: '# * Determine if the error level is a deprecation.

    # *

    # * @param  int  $level

    # * @return bool'
- name: isFatal
  visibility: protected
  parameters:
  - name: type
  comment: '# * Determine if the error type is fatal.

    # *

    # * @param  int  $type

    # * @return bool'
- name: getExceptionHandler
  visibility: protected
  parameters: []
  comment: '# * Get an instance of the exception handler.

    # *

    # * @return \Illuminate\Contracts\Debug\ExceptionHandler'
- name: forgetApp
  visibility: public
  parameters: []
  comment: '# * Clear the local application instance from memory.

    # *

    # * @return void

    # *

    # * @deprecated This method will be removed in a future Laravel version.'
- name: flushState
  visibility: public
  parameters: []
  comment: '# * Flush the bootstrapper''s global state.

    # *

    # * @return void'
- name: flushHandlersState
  visibility: public
  parameters: []
  comment: '# * Flush the bootstrapper''s global handlers state.

    # *

    # * @return void'
traits:
- ErrorException
- Exception
- Illuminate\Contracts\Debug\ExceptionHandler
- Illuminate\Contracts\Foundation\Application
- Illuminate\Log\LogManager
- Illuminate\Support\Env
- Monolog\Handler\NullHandler
- PHPUnit\Runner\ErrorHandler
- Symfony\Component\Console\Output\ConsoleOutput
- Symfony\Component\ErrorHandler\Error\FatalError
- Throwable
interfaces: []
